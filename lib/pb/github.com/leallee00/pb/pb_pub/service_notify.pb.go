// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_pub/service_notify.proto

package pb_pub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YXLiveRoomNotifyType int32

const (
	YXLiveRoomNotifyType_LIVE_START                YXLiveRoomNotifyType = 0  //主播开播
	YXLiveRoomNotifyType_LIVE_STOP                 YXLiveRoomNotifyType = 1  //主播下播
	YXLiveRoomNotifyType_LIVEROOM_HEARTBEAT        YXLiveRoomNotifyType = 2  //直播间心跳
	YXLiveRoomNotifyType_ENTER_ROOM                YXLiveRoomNotifyType = 3  //用户进入直播间
	YXLiveRoomNotifyType_EXIT_ROOM                 YXLiveRoomNotifyType = 4  //用户离开直播间
	YXLiveRoomNotifyType_UNSET_USER_KICKOUT_STATUS YXLiveRoomNotifyType = 5  //后台解除用户踢出直播间状态
	YXLiveRoomNotifyType_LIVEROOM_PK_SCORE_UPDATE  YXLiveRoomNotifyType = 6  //PK数值更新
	YXLiveRoomNotifyType_PKPROP                    YXLiveRoomNotifyType = 7  //PK礼物属性
	YXLiveRoomNotifyType_SEND_GIFT                 YXLiveRoomNotifyType = 8  // 礼物消息
	YXLiveRoomNotifyType_HOST_MODE                 YXLiveRoomNotifyType = 9  // 房间主持模式信息
	YXLiveRoomNotifyType_UPDATED_USER_INFO         YXLiveRoomNotifyType = 10 // 用户信息更新消息
	YXLiveRoomNotifyType_ROOM_BARRAGE              YXLiveRoomNotifyType = 11 // 房间弹幕消息
	YXLiveRoomNotifyType_ROOM_ACTION               YXLiveRoomNotifyType = 12 // 行为消息
	YXLiveRoomNotifyType_UPDATE_ANCHOR_SCORE       YXLiveRoomNotifyType = 13 // 多人房新增, 更新麦上用户贡献值
	YXLiveRoomNotifyType_UPDATE_BILLBOARD          YXLiveRoomNotifyType = 14 // 多人房新增, 更新贡献榜
	YXLiveRoomNotifyType_KICK_USER_OUT             YXLiveRoomNotifyType = 15 // 多人房新增, 踢出房间
	// 多人房优化新增
	YXLiveRoomNotifyType_SEND_LIVE_GIFT            YXLiveRoomNotifyType = 16
	YXLiveRoomNotifyType_UPDATE_MULTI_ANCHOR_SCORE YXLiveRoomNotifyType = 17
	// 金主新增
	YXLiveRoomNotifyType_INVESTOR_CHANGE   YXLiveRoomNotifyType = 18 // 金主变更通知
	YXLiveRoomNotifyType_SECRET_GIFT       YXLiveRoomNotifyType = 19 // 小黑屋礼物
	YXLiveRoomNotifyType_BACKGROUND_CHANGE YXLiveRoomNotifyType = 20 // 壁纸变化消息
	YXLiveRoomNotifyType_HAND_DRAWN_GIFT   YXLiveRoomNotifyType = 21 // 手绘礼物消息
	// top1粉丝团改变通知
	YXLiveRoomNotifyType_TOP1_FANS_CHANGE_NOTITFY YXLiveRoomNotifyType = 22
)

// Enum value maps for YXLiveRoomNotifyType.
var (
	YXLiveRoomNotifyType_name = map[int32]string{
		0:  "LIVE_START",
		1:  "LIVE_STOP",
		2:  "LIVEROOM_HEARTBEAT",
		3:  "ENTER_ROOM",
		4:  "EXIT_ROOM",
		5:  "UNSET_USER_KICKOUT_STATUS",
		6:  "LIVEROOM_PK_SCORE_UPDATE",
		7:  "PKPROP",
		8:  "SEND_GIFT",
		9:  "HOST_MODE",
		10: "UPDATED_USER_INFO",
		11: "ROOM_BARRAGE",
		12: "ROOM_ACTION",
		13: "UPDATE_ANCHOR_SCORE",
		14: "UPDATE_BILLBOARD",
		15: "KICK_USER_OUT",
		16: "SEND_LIVE_GIFT",
		17: "UPDATE_MULTI_ANCHOR_SCORE",
		18: "INVESTOR_CHANGE",
		19: "SECRET_GIFT",
		20: "BACKGROUND_CHANGE",
		21: "HAND_DRAWN_GIFT",
		22: "TOP1_FANS_CHANGE_NOTITFY",
	}
	YXLiveRoomNotifyType_value = map[string]int32{
		"LIVE_START":                0,
		"LIVE_STOP":                 1,
		"LIVEROOM_HEARTBEAT":        2,
		"ENTER_ROOM":                3,
		"EXIT_ROOM":                 4,
		"UNSET_USER_KICKOUT_STATUS": 5,
		"LIVEROOM_PK_SCORE_UPDATE":  6,
		"PKPROP":                    7,
		"SEND_GIFT":                 8,
		"HOST_MODE":                 9,
		"UPDATED_USER_INFO":         10,
		"ROOM_BARRAGE":              11,
		"ROOM_ACTION":               12,
		"UPDATE_ANCHOR_SCORE":       13,
		"UPDATE_BILLBOARD":          14,
		"KICK_USER_OUT":             15,
		"SEND_LIVE_GIFT":            16,
		"UPDATE_MULTI_ANCHOR_SCORE": 17,
		"INVESTOR_CHANGE":           18,
		"SECRET_GIFT":               19,
		"BACKGROUND_CHANGE":         20,
		"HAND_DRAWN_GIFT":           21,
		"TOP1_FANS_CHANGE_NOTITFY":  22,
	}
)

func (x YXLiveRoomNotifyType) Enum() *YXLiveRoomNotifyType {
	p := new(YXLiveRoomNotifyType)
	*p = x
	return p
}

func (x YXLiveRoomNotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YXLiveRoomNotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_service_notify_proto_enumTypes[0].Descriptor()
}

func (YXLiveRoomNotifyType) Type() protoreflect.EnumType {
	return &file_pb_pub_service_notify_proto_enumTypes[0]
}

func (x YXLiveRoomNotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YXLiveRoomNotifyType.Descriptor instead.
func (YXLiveRoomNotifyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{0}
}

// 客户端获取方法
// 开机获取系统通知，通过app接口获取
type RedServiceNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyIdBegin int64 `protobuf:"varint,1,opt,name=notifyIdBegin,proto3" json:"notifyIdBegin,omitempty"` // 开始编号，不填则从头开始
	NotifyIdEnd   int64 `protobuf:"varint,2,opt,name=notifyIdEnd,proto3" json:"notifyIdEnd,omitempty"`     // 结束编号, 不填则为最大
	AppId         int64 `protobuf:"varint,3,opt,name=appId,proto3" json:"appId,omitempty"`                 // appId 如果=0则取im系统消息，!=0 则取特定app发送的通知
	WantCount     int32 `protobuf:"varint,4,opt,name=wantCount,proto3" json:"wantCount,omitempty"`         // 获取条数,默认100，最大100每次
}

func (x *RedServiceNoticeReq) Reset() {
	*x = RedServiceNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedServiceNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedServiceNoticeReq) ProtoMessage() {}

func (x *RedServiceNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedServiceNoticeReq.ProtoReflect.Descriptor instead.
func (*RedServiceNoticeReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{0}
}

func (x *RedServiceNoticeReq) GetNotifyIdBegin() int64 {
	if x != nil {
		return x.NotifyIdBegin
	}
	return 0
}

func (x *RedServiceNoticeReq) GetNotifyIdEnd() int64 {
	if x != nil {
		return x.NotifyIdEnd
	}
	return 0
}

func (x *RedServiceNoticeReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RedServiceNoticeReq) GetWantCount() int32 {
	if x != nil {
		return x.WantCount
	}
	return 0
}

type RedServiceNoticeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyIdBegin int64            `protobuf:"varint,1,opt,name=notifyIdBegin,proto3" json:"notifyIdBegin,omitempty"` // 开始编号，不填则从头开始
	NotifyIdEnd   int64            `protobuf:"varint,2,opt,name=notifyIdEnd,proto3" json:"notifyIdEnd,omitempty"`     // 结束编号, 不填则为最大
	AppId         int64            `protobuf:"varint,3,opt,name=appId,proto3" json:"appId,omitempty"`                 // appId 如果=0则取im系统消息，!=0 则取特定app发送的通知
	WantCount     int32            `protobuf:"varint,4,opt,name=wantCount,proto3" json:"wantCount,omitempty"`         // 获取条数,默认100，最大100每次
	LeaveCount    int32            `protobuf:"varint,5,opt,name=leaveCount,proto3" json:"leaveCount,omitempty"`       // 符合编号范围的通知还剩下多少条
	ServiceNotice []*ServiceNotice `protobuf:"bytes,6,rep,name=serviceNotice,proto3" json:"serviceNotice,omitempty"`  //消息内容,ServiceNotify结构
}

func (x *RedServiceNoticeRsp) Reset() {
	*x = RedServiceNoticeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedServiceNoticeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedServiceNoticeRsp) ProtoMessage() {}

func (x *RedServiceNoticeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedServiceNoticeRsp.ProtoReflect.Descriptor instead.
func (*RedServiceNoticeRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{1}
}

func (x *RedServiceNoticeRsp) GetNotifyIdBegin() int64 {
	if x != nil {
		return x.NotifyIdBegin
	}
	return 0
}

func (x *RedServiceNoticeRsp) GetNotifyIdEnd() int64 {
	if x != nil {
		return x.NotifyIdEnd
	}
	return 0
}

func (x *RedServiceNoticeRsp) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RedServiceNoticeRsp) GetWantCount() int32 {
	if x != nil {
		return x.WantCount
	}
	return 0
}

func (x *RedServiceNoticeRsp) GetLeaveCount() int32 {
	if x != nil {
		return x.LeaveCount
	}
	return 0
}

func (x *RedServiceNoticeRsp) GetServiceNotice() []*ServiceNotice {
	if x != nil {
		return x.ServiceNotice
	}
	return nil
}

// 服务器通知，服务端收到此消息后先存盘，在根据appId确定通知范围，发送ServiceNotify进行通知
type ServiceNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   // 消息自增编号
	AppId       int64  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`             // app Id
	MessageType int32  `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"` // 消息类型，由客户端和服务提供者协商意义,
	MessageBody string `protobuf:"bytes,4,opt,name=messageBody,proto3" json:"messageBody,omitempty"`  // json消息体
}

func (x *ServiceNotice) Reset() {
	*x = ServiceNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotice) ProtoMessage() {}

func (x *ServiceNotice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotice.ProtoReflect.Descriptor instead.
func (*ServiceNotice) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceNotice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServiceNotice) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ServiceNotice) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotice) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// 服务触发的消息 messageType = 2000
type ServiceNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType int32  `protobuf:"varint,1,opt,name=messageType,proto3" json:"messageType,omitempty"` // 消息类型，由客户端和服务提供者协商意义,
	MessageBody string `protobuf:"bytes,2,opt,name=messageBody,proto3" json:"messageBody,omitempty"`  // json消息体
}

func (x *ServiceNotify) Reset() {
	*x = ServiceNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotify) ProtoMessage() {}

func (x *ServiceNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotify.ProtoReflect.Descriptor instead.
func (*ServiceNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceNotify) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotify) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// 服务全站通知频道
// topic:"t_service_notify", channel: "c_gate_%ip_%port"
// 每个gate一个channel，接收全量消息 如: c_gate_120.27.213.73_8101,
// jsStr={"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}
// curl -d jsStr http://127.0.0.1:4151/pub?topic=t_service_notify
// 全局通知消息结构
type ServiceNotifyToAllUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData  *PBCommData       `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	MessageType int32             `protobuf:"varint,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Exp         map[string]string `protobuf:"bytes,3,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	MessageBody string            `protobuf:"bytes,4,opt,name=messageBody,proto3" json:"messageBody,omitempty"`                                                                         // 消息体,json串
}

func (x *ServiceNotifyToAllUser) Reset() {
	*x = ServiceNotifyToAllUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotifyToAllUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotifyToAllUser) ProtoMessage() {}

func (x *ServiceNotifyToAllUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotifyToAllUser.ProtoReflect.Descriptor instead.
func (*ServiceNotifyToAllUser) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceNotifyToAllUser) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *ServiceNotifyToAllUser) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotifyToAllUser) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ServiceNotifyToAllUser) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// topic:"t_service_to_aim_user", channel: "c_service_to_aim_user"
// 服务发送消息到特定用户
// jsStr={"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},"aimUsers":[10001,10002], "messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}
// curl -d '{"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},"aimUsers":[10001,10002], "messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}' http://127.0.0.1:4151/pub?topic=t_service_to_aim_user
type ServiceNotifyToAimUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData  *PBCommData       `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	AimUsers    []int64           `protobuf:"varint,2,rep,packed,name=aimUsers,proto3" json:"aimUsers,omitempty"` // 目标用户id列表
	MessageType int32             `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Exp         map[string]string `protobuf:"bytes,4,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	MessageBody string            `protobuf:"bytes,5,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
}

func (x *ServiceNotifyToAimUser) Reset() {
	*x = ServiceNotifyToAimUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotifyToAimUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotifyToAimUser) ProtoMessage() {}

func (x *ServiceNotifyToAimUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotifyToAimUser.ProtoReflect.Descriptor instead.
func (*ServiceNotifyToAimUser) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceNotifyToAimUser) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *ServiceNotifyToAimUser) GetAimUsers() []int64 {
	if x != nil {
		return x.AimUsers
	}
	return nil
}

func (x *ServiceNotifyToAimUser) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotifyToAimUser) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ServiceNotifyToAimUser) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// topic:"t_service_to_all_group", channel: "c_gate_%ip_%port"
// 每个gate一个channel，接收全量消息 如: c_gate_120.27.213.73_8101,
// 服务发送消息到所有群
// jsStr={"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},
//
//	"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}
//
// curl -d '{"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}' http://127.0.0.1:4151/pub?topic=t_service_to_all_group
type ServiceNotifyToAllGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData  *PBCommData       `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	MessageType int32             `protobuf:"varint,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Exp         map[string]string `protobuf:"bytes,3,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	MessageBody string            `protobuf:"bytes,4,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
}

func (x *ServiceNotifyToAllGroup) Reset() {
	*x = ServiceNotifyToAllGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotifyToAllGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotifyToAllGroup) ProtoMessage() {}

func (x *ServiceNotifyToAllGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotifyToAllGroup.ProtoReflect.Descriptor instead.
func (*ServiceNotifyToAllGroup) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceNotifyToAllGroup) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *ServiceNotifyToAllGroup) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotifyToAllGroup) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ServiceNotifyToAllGroup) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// topic:"t_service_to_aim_group", channel: "c_service_to_aim_group"
// 服务发送消息到特定群
// jsStr={"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},
//
//	"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}
//
// curl -d '{"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}' http://127.0.0.1:4151/pub?topic=t_service_to_aim_group
type ServiceNotifyToAimGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData  *PBCommData       `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	MessageType int32             `protobuf:"varint,2,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Exp         map[string]string `protobuf:"bytes,4,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	MessageBody string            `protobuf:"bytes,5,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
}

func (x *ServiceNotifyToAimGroup) Reset() {
	*x = ServiceNotifyToAimGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNotifyToAimGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNotifyToAimGroup) ProtoMessage() {}

func (x *ServiceNotifyToAimGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNotifyToAimGroup.ProtoReflect.Descriptor instead.
func (*ServiceNotifyToAimGroup) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceNotifyToAimGroup) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *ServiceNotifyToAimGroup) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ServiceNotifyToAimGroup) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ServiceNotifyToAimGroup) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

// 老版本直播间控制消息同步到IM
// topic:"t_yx_to_liveroom", channel: "c_yx_to_liveroom"
// jsStr={"pbCommData":{"msgSn":1000100010001,"srcId":10001,"aimId":10002,"time":1572664086,"exp":{"key1":"value1","key2":"value2"},"serviceType":6},
//
//	"groupId":100,"messageType":12,"exp":{"nkey1":"value1","nkey2":"value2"},"messageBody":"jsonStr"}
//
// curl -d jsStr http://127.0.0.1:4151/pub?topic=t_yx_to_liveroom
type YXLiveRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData  *PBCommData          `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	GroupId     int64                `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	MessageType YXLiveRoomNotifyType `protobuf:"varint,3,opt,name=messageType,proto3,enum=pb_pub.YXLiveRoomNotifyType" json:"messageType,omitempty"`
	MessageBody string               `protobuf:"bytes,4,opt,name=messageBody,proto3" json:"messageBody,omitempty"`
	Exp         map[string]string    `protobuf:"bytes,5,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
}

func (x *YXLiveRoomNotify) Reset() {
	*x = YXLiveRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YXLiveRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YXLiveRoomNotify) ProtoMessage() {}

func (x *YXLiveRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YXLiveRoomNotify.ProtoReflect.Descriptor instead.
func (*YXLiveRoomNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{8}
}

func (x *YXLiveRoomNotify) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *YXLiveRoomNotify) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *YXLiveRoomNotify) GetMessageType() YXLiveRoomNotifyType {
	if x != nil {
		return x.MessageType
	}
	return YXLiveRoomNotifyType_LIVE_START
}

func (x *YXLiveRoomNotify) GetMessageBody() string {
	if x != nil {
		return x.MessageBody
	}
	return ""
}

func (x *YXLiveRoomNotify) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

// 大奖赛权限变更 t_pk_qualify_change
type PKQualifyChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsQualifiedPkTournament bool   `protobuf:"varint,1,opt,name=isQualifiedPkTournament,proto3" json:"isQualifiedPkTournament,omitempty"`
	PkTournamentBeginTime   string `protobuf:"bytes,2,opt,name=pkTournamentBeginTime,proto3" json:"pkTournamentBeginTime,omitempty"`
	PkTounamentTip          string `protobuf:"bytes,3,opt,name=pkTounamentTip,proto3" json:"pkTounamentTip,omitempty"`
}

func (x *PKQualifyChangeNotify) Reset() {
	*x = PKQualifyChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKQualifyChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKQualifyChangeNotify) ProtoMessage() {}

func (x *PKQualifyChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKQualifyChangeNotify.ProtoReflect.Descriptor instead.
func (*PKQualifyChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{9}
}

func (x *PKQualifyChangeNotify) GetIsQualifiedPkTournament() bool {
	if x != nil {
		return x.IsQualifiedPkTournament
	}
	return false
}

func (x *PKQualifyChangeNotify) GetPkTournamentBeginTime() string {
	if x != nil {
		return x.PkTournamentBeginTime
	}
	return ""
}

func (x *PKQualifyChangeNotify) GetPkTounamentTip() string {
	if x != nil {
		return x.PkTounamentTip
	}
	return ""
}

// 三国游戏服务NSQ消息封装消息结构
type TTKNSQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData *PBCommData       `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	MsgName    string            `protobuf:"bytes,2,opt,name=msgName,proto3" json:"msgName,omitempty"` // 即pbname: 1. 不必再定义消息类型枚举, 方便消息反解
	MsgData    string            `protobuf:"bytes,3,opt,name=msgData,proto3" json:"msgData,omitempty"` // 即json string
	Exp        map[string]string `protobuf:"bytes,4,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TTKNSQMessage) Reset() {
	*x = TTKNSQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_service_notify_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTKNSQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTKNSQMessage) ProtoMessage() {}

func (x *TTKNSQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_service_notify_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTKNSQMessage.ProtoReflect.Descriptor instead.
func (*TTKNSQMessage) Descriptor() ([]byte, []int) {
	return file_pb_pub_service_notify_proto_rawDescGZIP(), []int{10}
}

func (x *TTKNSQMessage) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *TTKNSQMessage) GetMsgName() string {
	if x != nil {
		return x.MsgName
	}
	return ""
}

func (x *TTKNSQMessage) GetMsgData() string {
	if x != nil {
		return x.MsgData
	}
	return ""
}

func (x *TTKNSQMessage) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

var File_pb_pub_service_notify_proto protoreflect.FileDescriptor

var file_pb_pub_service_notify_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x49, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xee, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x53, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x83, 0x02,
	0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x6f, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f,
	0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x61, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x36, 0x0a,
	0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50,
	0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x02,
	0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x6f, 0x41, 0x69, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x78,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x36, 0x0a,
	0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x59, 0x58, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x59, 0x58, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x59, 0x58, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x50, 0x4b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50,
	0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x70,
	0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6b, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6b, 0x54, 0x6f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6b, 0x54, 0x6f, 0x75,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x54, 0x54,
	0x4b, 0x4e, 0x53, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x54, 0x54, 0x4b, 0x4e, 0x53, 0x51,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xf2, 0x03,
	0x0a, 0x14, 0x59, 0x58, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f,
	0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x50, 0x4b, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4b, 0x50,
	0x52, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x49,
	0x46, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0f, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x47, 0x49, 0x46,
	0x54, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x43, 0x4b,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x14, 0x12,
	0x13, 0x0a, 0x0f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x5f, 0x47, 0x49,
	0x46, 0x54, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x50, 0x31, 0x5f, 0x46, 0x41, 0x4e,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x54, 0x46, 0x59,
	0x10, 0x16, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_pub_service_notify_proto_rawDescOnce sync.Once
	file_pb_pub_service_notify_proto_rawDescData = file_pb_pub_service_notify_proto_rawDesc
)

func file_pb_pub_service_notify_proto_rawDescGZIP() []byte {
	file_pb_pub_service_notify_proto_rawDescOnce.Do(func() {
		file_pb_pub_service_notify_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_pub_service_notify_proto_rawDescData)
	})
	return file_pb_pub_service_notify_proto_rawDescData
}

var file_pb_pub_service_notify_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_pub_service_notify_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pb_pub_service_notify_proto_goTypes = []interface{}{
	(YXLiveRoomNotifyType)(0),       // 0: pb_pub.YXLiveRoomNotifyType
	(*RedServiceNoticeReq)(nil),     // 1: pb_pub.RedServiceNoticeReq
	(*RedServiceNoticeRsp)(nil),     // 2: pb_pub.RedServiceNoticeRsp
	(*ServiceNotice)(nil),           // 3: pb_pub.ServiceNotice
	(*ServiceNotify)(nil),           // 4: pb_pub.ServiceNotify
	(*ServiceNotifyToAllUser)(nil),  // 5: pb_pub.ServiceNotifyToAllUser
	(*ServiceNotifyToAimUser)(nil),  // 6: pb_pub.ServiceNotifyToAimUser
	(*ServiceNotifyToAllGroup)(nil), // 7: pb_pub.ServiceNotifyToAllGroup
	(*ServiceNotifyToAimGroup)(nil), // 8: pb_pub.ServiceNotifyToAimGroup
	(*YXLiveRoomNotify)(nil),        // 9: pb_pub.YXLiveRoomNotify
	(*PKQualifyChangeNotify)(nil),   // 10: pb_pub.PKQualifyChangeNotify
	(*TTKNSQMessage)(nil),           // 11: pb_pub.TTKNSQMessage
	nil,                             // 12: pb_pub.ServiceNotifyToAllUser.ExpEntry
	nil,                             // 13: pb_pub.ServiceNotifyToAimUser.ExpEntry
	nil,                             // 14: pb_pub.ServiceNotifyToAllGroup.ExpEntry
	nil,                             // 15: pb_pub.ServiceNotifyToAimGroup.ExpEntry
	nil,                             // 16: pb_pub.YXLiveRoomNotify.ExpEntry
	nil,                             // 17: pb_pub.TTKNSQMessage.ExpEntry
	(*PBCommData)(nil),              // 18: pb_pub.PBCommData
}
var file_pb_pub_service_notify_proto_depIdxs = []int32{
	3,  // 0: pb_pub.RedServiceNoticeRsp.serviceNotice:type_name -> pb_pub.ServiceNotice
	18, // 1: pb_pub.ServiceNotifyToAllUser.pbCommData:type_name -> pb_pub.PBCommData
	12, // 2: pb_pub.ServiceNotifyToAllUser.exp:type_name -> pb_pub.ServiceNotifyToAllUser.ExpEntry
	18, // 3: pb_pub.ServiceNotifyToAimUser.pbCommData:type_name -> pb_pub.PBCommData
	13, // 4: pb_pub.ServiceNotifyToAimUser.exp:type_name -> pb_pub.ServiceNotifyToAimUser.ExpEntry
	18, // 5: pb_pub.ServiceNotifyToAllGroup.pbCommData:type_name -> pb_pub.PBCommData
	14, // 6: pb_pub.ServiceNotifyToAllGroup.exp:type_name -> pb_pub.ServiceNotifyToAllGroup.ExpEntry
	18, // 7: pb_pub.ServiceNotifyToAimGroup.pbCommData:type_name -> pb_pub.PBCommData
	15, // 8: pb_pub.ServiceNotifyToAimGroup.exp:type_name -> pb_pub.ServiceNotifyToAimGroup.ExpEntry
	18, // 9: pb_pub.YXLiveRoomNotify.pbCommData:type_name -> pb_pub.PBCommData
	0,  // 10: pb_pub.YXLiveRoomNotify.messageType:type_name -> pb_pub.YXLiveRoomNotifyType
	16, // 11: pb_pub.YXLiveRoomNotify.exp:type_name -> pb_pub.YXLiveRoomNotify.ExpEntry
	18, // 12: pb_pub.TTKNSQMessage.pbCommData:type_name -> pb_pub.PBCommData
	17, // 13: pb_pub.TTKNSQMessage.exp:type_name -> pb_pub.TTKNSQMessage.ExpEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pb_pub_service_notify_proto_init() }
func file_pb_pub_service_notify_proto_init() {
	if File_pb_pub_service_notify_proto != nil {
		return
	}
	file_pb_pub_comm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_pub_service_notify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedServiceNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedServiceNoticeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotifyToAllUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotifyToAimUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotifyToAllGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNotifyToAimGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YXLiveRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKQualifyChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_service_notify_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTKNSQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_pub_service_notify_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_pub_service_notify_proto_goTypes,
		DependencyIndexes: file_pb_pub_service_notify_proto_depIdxs,
		EnumInfos:         file_pb_pub_service_notify_proto_enumTypes,
		MessageInfos:      file_pb_pub_service_notify_proto_msgTypes,
	}.Build()
	File_pb_pub_service_notify_proto = out.File
	file_pb_pub_service_notify_proto_rawDesc = nil
	file_pb_pub_service_notify_proto_goTypes = nil
	file_pb_pub_service_notify_proto_depIdxs = nil
}
