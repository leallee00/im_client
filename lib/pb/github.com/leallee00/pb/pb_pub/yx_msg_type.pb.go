// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_pub/yx_msg_type.proto

package pb_pub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MessageTypeUnknown                              MessageType = 0
	MessageType_MessageTypeUser                                 MessageType = 1  // 普通消息
	MessageType_MessageTypeAt                                   MessageType = 2  // @消息
	MessageType_MessageTypeRoomBarrage                          MessageType = 3  // 房间弹幕
	MessageType_MessageTypeAllBarrage                           MessageType = 4  // 全站弹幕 java逻辑
	MessageType_MessageTypeGift                                 MessageType = 5  // 送礼物
	MessageType_MessageTypeUserGetIn                            MessageType = 6  // 进场欢迎语
	MessageType_MessageTypeForbidSpeaking                       MessageType = 7  // 禁言 java逻辑 带时间
	MessageType_MessageTypeUnForbidSpeaking                     MessageType = 8  // 解除禁言 java逻辑
	MessageType_MessageTypeKictOut                              MessageType = 9  // 踢出房间 java10分钟不让进
	MessageType_MessageTypeRobitInRoom                          MessageType = 10 // 机器人进入房间消息 java发送
	MessageType_MessageTypeRobitMessage                         MessageType = 11 // 机器人发送房间消息 java发送
	MessageType_MessageTypeLiveMessage                          MessageType = 12 // 房间系统消息 java发送
	MessageType_MessageTypeNewJoinLiveApply                     MessageType = 13 //新的连麦申请 java转发
	MessageType_MessageTypeCancelJoinLiveApply                  MessageType = 14 // 连麦申请取消 java转发
	MessageType_MessageTypeForbidPublish                        MessageType = 15 // 主播在直播过程中被禁播 后台禁播触发
	MessageType_MessageTypeSuperManagerKickout                  MessageType = 16 // 主播被超管踢出 客户端触发
	MessageType_MessageTypeRoomManagerChanged                   MessageType = 17 // 房管变更 主播设置，java接口踢人
	MessageType_MessageTypeJoinLiveBalanceNotEnoughTip          MessageType = 18 // 您的椰币余额不足提示 java触发
	MessageType_MessageTypeJoinLiveBalanceNotEnoughEndLive      MessageType = 19 // 您的椰币余额不足，即将断开连麦 java触发
	MessageType_MessageTypeAnchorToAnchorJoinLiveInvite         MessageType = 20 // 主播与主播连麦：另一个主播邀请我连麦 java转发
	MessageType_MessageTypeAnchorToAnchorJoinLiveAcceptOrReject MessageType = 21 // 主播与主播连麦:3.另一个主播同意了我的连麦请求 或者 拒绝了我的连麦请求 java转发
	MessageType_MessageTypeAnchorInviteJoinLiveCancel           MessageType = 22 // 主播邀请别人连麦等待中取消了邀请 java转发
	MessageType_MessageTypeAnchorToAnchorJoinLiveEnd            MessageType = 23 //主播与主播连麦:4.另一个主播结束了连麦 java转发
	MessageType_MessageTypeUserActionTip                        MessageType = 24 //用户行为提示消息
	MessageType_MessageTypeNetworkErrorKickout                  MessageType = 25 // 主播网络波动被踢出 心跳超时java
	MessageType_MessageTypeTotalStationInform                   MessageType = 26 // 送豪华礼物的全站通知 java调用
	MessageType_MessageTypeAnchorToAnchorJoinLiveTempLeave      MessageType = 27 // 主播与主播连麦：暂离
	MessageType_MessageTypeRedPocket                            MessageType = 28 // 红包通知 java推
	MessageType_MessageTypeUserLottery                          MessageType = 29 // 抽奖通知 java推送全站
	MessageType_MessageTypeAudicenceList                        MessageType = 30 // 观众列表刷新 15秒刷一次
	MessageType_MessageTypeAnnouncement                         MessageType = 31 // 直播公告
	MessageType_MessageTypeEndJoinLive                          MessageType = 32 // 结束连麦 java转发
	MessageType_MessageTypeWeekStarGift                         MessageType = 33 // 周星礼物排行 java房间内通知
	MessageType_MessageTypePKInvite                             MessageType = 34 // PK:2.另一个主播邀请我PK
	MessageType_MessageTypePKAcceptOrReject                     MessageType = 35 // PK:3.另一个主播同意了我的pk请求或者拒绝了我的PK请求
	MessageType_MessageTypePKEnd                                MessageType = 36 //PK:4.另一个主播结束了PK
	MessageType_MessageTypePKStart                              MessageType = 37 //PK:4.邀请方主播切换模式成功，通知对方主播UpdateExtroInfo
	MessageType_MessageTypePKChangeModeSuccess                  MessageType = 38 // 匹配PK时切换模式成功
	MessageType_MessageTypePKMatchingSuccess                    MessageType = 39 // 匹配成功 java推送
	MessageType_MessageTypePKTimeCorrect                        MessageType = 40 // pk时间校准
	MessageType_MessageTypePKFirstGiftMsg                       MessageType = 41 // 首送消息 java触发
	MessageType_MessageTypePKSendTargetPkValue                  MessageType = 43 // 主播发送对方主播的pk值到本房间
	MessageType_MessageTypeLiveEndH5                            MessageType = 44 //告诉h5结束直播了
	MessageType_MessageTypePK5MinuteEnd                         MessageType = 45 // 通知房间用户进入惩罚时间 java推送
	MessageType_MessageTypeJoinFans                             MessageType = 46 // 加入粉丝团 java推送
	MessageType_MessageTypeJoinGuard                            MessageType = 47 // 加入守护 java推送
	MessageType_MessageTypeSwimsuitActivityProcess              MessageType = 52 // 泳装趴活动进度消息
	MessageType_MessageTypeSwimsuitActivityRobBoxOver           MessageType = 53 // 泳装趴抢宝箱结束消息
	MessageType_MessageTypeActivityBoxProcess                   MessageType = 54 // 泳装趴抢宝箱结束消息
	MessageType_MessageTypeRedPacketNew                         MessageType = 55 // 直播间新红包 java推送
	MessageType_MessageTypeRedPacketOver                        MessageType = 56 // 直播间抢红包结束 java推送
	MessageType_MessageTypeSendRocket                           MessageType = 66 // 其他房间送火箭的全站消息（提示） java推送
	MessageType_MessageTypeTreasureMap                          MessageType = 67 //藏宝图开奖通知 java推送，全站
	MessageType_MessageTypeRankPromotionScoreChanged            MessageType = 68 //段位赛积分变化
	MessageType_MessageTypeRandomMatchCancel                    MessageType = 69 //随机匹配五分钟取消
	MessageType_MessageTypeUpdateWishMenu                       MessageType = 70 //更新心愿单
	MessageType_MessageTypeWishPoolDetail                       MessageType = 71 //许愿池详情通知
	MessageType_MessageTypeWishPoolLuckyMan                     MessageType = 72 //许愿池中奖信息
	MessageType_MessageTypeUpdatePkSeatInfo                     MessageType = 73 //更新pk 坐席view
	MessageType_MessageTypeChristmasTreeLightUp                 MessageType = 75 //圣诞树状态变化
	MessageType_MessageTypeNewYearLightUp                       MessageType = 76 //元旦图标状态变化
	MessageType_MessageTypeChatText                             MessageType = 80 // 私信消息
	// 记录直播间历史消息时直播间礼物消息的消息类型
	MessageType_MessageTypeLiveRoomGift MessageType = 100 // 直播间礼物消息，历史消息中填充msgType字段用，暂时可以忽略
	// 服务端交互专用
	MessageType_MessageTypeSendPersonalGift MessageType = 1000 // 发送私信礼物
	MessageType_MessageTypeServiceNotify MessageType = 2000 // 后台发送的系统通知
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:    "MessageTypeUnknown",
		1:    "MessageTypeUser",
		2:    "MessageTypeAt",
		3:    "MessageTypeRoomBarrage",
		4:    "MessageTypeAllBarrage",
		5:    "MessageTypeGift",
		6:    "MessageTypeUserGetIn",
		7:    "MessageTypeForbidSpeaking",
		8:    "MessageTypeUnForbidSpeaking",
		9:    "MessageTypeKictOut",
		10:   "MessageTypeRobitInRoom",
		11:   "MessageTypeRobitMessage",
		12:   "MessageTypeLiveMessage",
		13:   "MessageTypeNewJoinLiveApply",
		14:   "MessageTypeCancelJoinLiveApply",
		15:   "MessageTypeForbidPublish",
		16:   "MessageTypeSuperManagerKickout",
		17:   "MessageTypeRoomManagerChanged",
		18:   "MessageTypeJoinLiveBalanceNotEnoughTip",
		19:   "MessageTypeJoinLiveBalanceNotEnoughEndLive",
		20:   "MessageTypeAnchorToAnchorJoinLiveInvite",
		21:   "MessageTypeAnchorToAnchorJoinLiveAcceptOrReject",
		22:   "MessageTypeAnchorInviteJoinLiveCancel",
		23:   "MessageTypeAnchorToAnchorJoinLiveEnd",
		24:   "MessageTypeUserActionTip",
		25:   "MessageTypeNetworkErrorKickout",
		26:   "MessageTypeTotalStationInform",
		27:   "MessageTypeAnchorToAnchorJoinLiveTempLeave",
		28:   "MessageTypeRedPocket",
		29:   "MessageTypeUserLottery",
		30:   "MessageTypeAudicenceList",
		31:   "MessageTypeAnnouncement",
		32:   "MessageTypeEndJoinLive",
		33:   "MessageTypeWeekStarGift",
		34:   "MessageTypePKInvite",
		35:   "MessageTypePKAcceptOrReject",
		36:   "MessageTypePKEnd",
		37:   "MessageTypePKStart",
		38:   "MessageTypePKChangeModeSuccess",
		39:   "MessageTypePKMatchingSuccess",
		40:   "MessageTypePKTimeCorrect",
		41:   "MessageTypePKFirstGiftMsg",
		43:   "MessageTypePKSendTargetPkValue",
		44:   "MessageTypeLiveEndH5",
		45:   "MessageTypePK5MinuteEnd",
		46:   "MessageTypeJoinFans",
		47:   "MessageTypeJoinGuard",
		52:   "MessageTypeSwimsuitActivityProcess",
		53:   "MessageTypeSwimsuitActivityRobBoxOver",
		54:   "MessageTypeActivityBoxProcess",
		55:   "MessageTypeRedPacketNew",
		56:   "MessageTypeRedPacketOver",
		66:   "MessageTypeSendRocket",
		67:   "MessageTypeTreasureMap",
		68:   "MessageTypeRankPromotionScoreChanged",
		69:   "MessageTypeRandomMatchCancel",
		70:   "MessageTypeUpdateWishMenu",
		71:   "MessageTypeWishPoolDetail",
		72:   "MessageTypeWishPoolLuckyMan",
		73:   "MessageTypeUpdatePkSeatInfo",
		75:   "MessageTypeChristmasTreeLightUp",
		76:   "MessageTypeNewYearLightUp",
		80:   "MessageTypeChatText",
		100:  "MessageTypeLiveRoomGift",
		1000: "MessageTypeSendPersonalGift",
		2000: "MessageTypeServiceNotify",
	}
	MessageType_value = map[string]int32{
		"MessageTypeUnknown":                              0,
		"MessageTypeUser":                                 1,
		"MessageTypeAt":                                   2,
		"MessageTypeRoomBarrage":                          3,
		"MessageTypeAllBarrage":                           4,
		"MessageTypeGift":                                 5,
		"MessageTypeUserGetIn":                            6,
		"MessageTypeForbidSpeaking":                       7,
		"MessageTypeUnForbidSpeaking":                     8,
		"MessageTypeKictOut":                              9,
		"MessageTypeRobitInRoom":                          10,
		"MessageTypeRobitMessage":                         11,
		"MessageTypeLiveMessage":                          12,
		"MessageTypeNewJoinLiveApply":                     13,
		"MessageTypeCancelJoinLiveApply":                  14,
		"MessageTypeForbidPublish":                        15,
		"MessageTypeSuperManagerKickout":                  16,
		"MessageTypeRoomManagerChanged":                   17,
		"MessageTypeJoinLiveBalanceNotEnoughTip":          18,
		"MessageTypeJoinLiveBalanceNotEnoughEndLive":      19,
		"MessageTypeAnchorToAnchorJoinLiveInvite":         20,
		"MessageTypeAnchorToAnchorJoinLiveAcceptOrReject": 21,
		"MessageTypeAnchorInviteJoinLiveCancel":           22,
		"MessageTypeAnchorToAnchorJoinLiveEnd":            23,
		"MessageTypeUserActionTip":                        24,
		"MessageTypeNetworkErrorKickout":                  25,
		"MessageTypeTotalStationInform":                   26,
		"MessageTypeAnchorToAnchorJoinLiveTempLeave":      27,
		"MessageTypeRedPocket":                            28,
		"MessageTypeUserLottery":                          29,
		"MessageTypeAudicenceList":                        30,
		"MessageTypeAnnouncement":                         31,
		"MessageTypeEndJoinLive":                          32,
		"MessageTypeWeekStarGift":                         33,
		"MessageTypePKInvite":                             34,
		"MessageTypePKAcceptOrReject":                     35,
		"MessageTypePKEnd":                                36,
		"MessageTypePKStart":                              37,
		"MessageTypePKChangeModeSuccess":                  38,
		"MessageTypePKMatchingSuccess":                    39,
		"MessageTypePKTimeCorrect":                        40,
		"MessageTypePKFirstGiftMsg":                       41,
		"MessageTypePKSendTargetPkValue":                  43,
		"MessageTypeLiveEndH5":                            44,
		"MessageTypePK5MinuteEnd":                         45,
		"MessageTypeJoinFans":                             46,
		"MessageTypeJoinGuard":                            47,
		"MessageTypeSwimsuitActivityProcess":              52,
		"MessageTypeSwimsuitActivityRobBoxOver":           53,
		"MessageTypeActivityBoxProcess":                   54,
		"MessageTypeRedPacketNew":                         55,
		"MessageTypeRedPacketOver":                        56,
		"MessageTypeSendRocket":                           66,
		"MessageTypeTreasureMap":                          67,
		"MessageTypeRankPromotionScoreChanged":            68,
		"MessageTypeRandomMatchCancel":                    69,
		"MessageTypeUpdateWishMenu":                       70,
		"MessageTypeWishPoolDetail":                       71,
		"MessageTypeWishPoolLuckyMan":                     72,
		"MessageTypeUpdatePkSeatInfo":                     73,
		"MessageTypeChristmasTreeLightUp":                 75,
		"MessageTypeNewYearLightUp":                       76,
		"MessageTypeChatText":                             80,
		"MessageTypeLiveRoomGift":                         100,
		"MessageTypeSendPersonalGift":                     1000,
		"MessageTypeServiceNotify":                        2000,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_yx_msg_type_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_pb_pub_yx_msg_type_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_yx_msg_type_proto_rawDescGZIP(), []int{0}
}

var File_pb_pub_yx_msg_type_proto protoreflect.FileDescriptor

var file_pb_pub_yx_msg_type_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x79, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2a, 0xc4, 0x10, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x6c,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x69, 0x66, 0x74, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x10, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x6f, 0x62, 0x69, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x6f, 0x62, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x77, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x11, 0x12,
	0x2a, 0x0a, 0x26, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x54, 0x69, 0x70, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x10, 0x13, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x14, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x15, 0x12, 0x29, 0x0a,
	0x25, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x16, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x64,
	0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x10, 0x18,
	0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x1a, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x6f, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x1d, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x47, 0x69, 0x66, 0x74, 0x10,
	0x21, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x4b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x22, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x45, 0x6e, 0x64, 0x10,
	0x24, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x4b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x26, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x27, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x10, 0x28, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x29, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x2b,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x48, 0x35, 0x10, 0x2c, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x4b, 0x35, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x61, 0x6e, 0x73, 0x10, 0x2e,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x10, 0x2f, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x77, 0x69, 0x6d, 0x73, 0x75, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x34, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x77, 0x69, 0x6d, 0x73, 0x75, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x6f, 0x62, 0x42, 0x6f, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x35, 0x12, 0x21, 0x0a,
	0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x36,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x10, 0x37, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x10, 0x43, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x44, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x45, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x6e, 0x75, 0x10, 0x46, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x73, 0x68,
	0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x47, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x73, 0x68, 0x50,
	0x6f, 0x6f, 0x6c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x4d, 0x61, 0x6e, 0x10, 0x48, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x49, 0x12, 0x23,
	0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x72,
	0x69, 0x73, 0x74, 0x6d, 0x61, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x55,
	0x70, 0x10, 0x4b, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x65, 0x77, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x55, 0x70,
	0x10, 0x4c, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x10, 0x50, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x10, 0x64, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x47, 0x69, 0x66, 0x74, 0x10, 0xe8, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0xd0, 0x0f, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30,
	0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pb_pub_yx_msg_type_proto_rawDescOnce sync.Once
	file_pb_pub_yx_msg_type_proto_rawDescData = file_pb_pub_yx_msg_type_proto_rawDesc
)

func file_pb_pub_yx_msg_type_proto_rawDescGZIP() []byte {
	file_pb_pub_yx_msg_type_proto_rawDescOnce.Do(func() {
		file_pb_pub_yx_msg_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_pub_yx_msg_type_proto_rawDescData)
	})
	return file_pb_pub_yx_msg_type_proto_rawDescData
}

var file_pb_pub_yx_msg_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_pub_yx_msg_type_proto_goTypes = []interface{}{
	(MessageType)(0), // 0: pb_pub.MessageType
}
var file_pb_pub_yx_msg_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_pub_yx_msg_type_proto_init() }
func file_pb_pub_yx_msg_type_proto_init() {
	if File_pb_pub_yx_msg_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_pub_yx_msg_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_pub_yx_msg_type_proto_goTypes,
		DependencyIndexes: file_pb_pub_yx_msg_type_proto_depIdxs,
		EnumInfos:         file_pb_pub_yx_msg_type_proto_enumTypes,
	}.Build()
	File_pb_pub_yx_msg_type_proto = out.File
	file_pb_pub_yx_msg_type_proto_rawDesc = nil
	file_pb_pub_yx_msg_type_proto_goTypes = nil
	file_pb_pub_yx_msg_type_proto_depIdxs = nil
}
