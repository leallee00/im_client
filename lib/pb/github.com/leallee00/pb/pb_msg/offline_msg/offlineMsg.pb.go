// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_msg/offline_msg/offlineMsg.proto

package offline_msg

import (
	pb_pub "github.com/leallee00/pb/pb_pub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CHAT_SESSION_TYPE int32

const (
	CHAT_SESSION_TYPE_CHAT_SESSION_TYPE_GROUP_CHAT   CHAT_SESSION_TYPE = 0
	CHAT_SESSION_TYPE_CHAT_SESSION_TYPE_PRIVATE_CHAT CHAT_SESSION_TYPE = 100
)

// Enum value maps for CHAT_SESSION_TYPE.
var (
	CHAT_SESSION_TYPE_name = map[int32]string{
		0:   "CHAT_SESSION_TYPE_GROUP_CHAT",
		100: "CHAT_SESSION_TYPE_PRIVATE_CHAT",
	}
	CHAT_SESSION_TYPE_value = map[string]int32{
		"CHAT_SESSION_TYPE_GROUP_CHAT":   0,
		"CHAT_SESSION_TYPE_PRIVATE_CHAT": 100,
	}
)

func (x CHAT_SESSION_TYPE) Enum() *CHAT_SESSION_TYPE {
	p := new(CHAT_SESSION_TYPE)
	*p = x
	return p
}

func (x CHAT_SESSION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHAT_SESSION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_offline_msg_offlineMsg_proto_enumTypes[0].Descriptor()
}

func (CHAT_SESSION_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_offline_msg_offlineMsg_proto_enumTypes[0]
}

func (x CHAT_SESSION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHAT_SESSION_TYPE.Descriptor instead.
func (CHAT_SESSION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{0}
}

type FETCH_SESSION_RANGE int32

const (
	FETCH_SESSION_RANGE_ALL          FETCH_SESSION_RANGE = 0
	FETCH_SESSION_RANGE_PRIVATE_CHAT FETCH_SESSION_RANGE = 1
	FETCH_SESSION_RANGE_GROUP_CHAT   FETCH_SESSION_RANGE = 2
)

// Enum value maps for FETCH_SESSION_RANGE.
var (
	FETCH_SESSION_RANGE_name = map[int32]string{
		0: "ALL",
		1: "PRIVATE_CHAT",
		2: "GROUP_CHAT",
	}
	FETCH_SESSION_RANGE_value = map[string]int32{
		"ALL":          0,
		"PRIVATE_CHAT": 1,
		"GROUP_CHAT":   2,
	}
)

func (x FETCH_SESSION_RANGE) Enum() *FETCH_SESSION_RANGE {
	p := new(FETCH_SESSION_RANGE)
	*p = x
	return p
}

func (x FETCH_SESSION_RANGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FETCH_SESSION_RANGE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_offline_msg_offlineMsg_proto_enumTypes[1].Descriptor()
}

func (FETCH_SESSION_RANGE) Type() protoreflect.EnumType {
	return &file_pb_msg_offline_msg_offlineMsg_proto_enumTypes[1]
}

func (x FETCH_SESSION_RANGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FETCH_SESSION_RANGE.Descriptor instead.
func (FETCH_SESSION_RANGE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{1}
}

type SaveOfflineMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcUserid       int64              `protobuf:"varint,1,opt,name=src_userid,json=srcUserid,proto3" json:"src_userid,omitempty"` //发送用户id
	AimUserid       int64              `protobuf:"varint,2,opt,name=aim_userid,json=aimUserid,proto3" json:"aim_userid,omitempty"` //接收用户id
	Sn              int64              `protobuf:"varint,3,opt,name=sn,proto3" json:"sn,omitempty"`
	PbName          string             `protobuf:"bytes,4,opt,name=pb_name,json=pbName,proto3" json:"pb_name,omitempty"` //pb名称
	PbData          []byte             `protobuf:"bytes,5,opt,name=pb_data,json=pbData,proto3" json:"pb_data,omitempty"` //消息内容
	Time            int64              `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	PbCommData      *pb_pub.PBCommData `protobuf:"bytes,7,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	RelationUserIds []int64            `protobuf:"varint,8,rep,packed,name=relationUserIds,proto3" json:"relationUserIds,omitempty"`
}

func (x *SaveOfflineMsgReq) Reset() {
	*x = SaveOfflineMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveOfflineMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveOfflineMsgReq) ProtoMessage() {}

func (x *SaveOfflineMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveOfflineMsgReq.ProtoReflect.Descriptor instead.
func (*SaveOfflineMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{0}
}

func (x *SaveOfflineMsgReq) GetSrcUserid() int64 {
	if x != nil {
		return x.SrcUserid
	}
	return 0
}

func (x *SaveOfflineMsgReq) GetAimUserid() int64 {
	if x != nil {
		return x.AimUserid
	}
	return 0
}

func (x *SaveOfflineMsgReq) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *SaveOfflineMsgReq) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *SaveOfflineMsgReq) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *SaveOfflineMsgReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SaveOfflineMsgReq) GetPbCommData() *pb_pub.PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *SaveOfflineMsgReq) GetRelationUserIds() []int64 {
	if x != nil {
		return x.RelationUserIds
	}
	return nil
}

type SaveOfflineMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` //错误码
}

func (x *SaveOfflineMsgRsp) Reset() {
	*x = SaveOfflineMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveOfflineMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveOfflineMsgRsp) ProtoMessage() {}

func (x *SaveOfflineMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveOfflineMsgRsp.ProtoReflect.Descriptor instead.
func (*SaveOfflineMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{1}
}

func (x *SaveOfflineMsgRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

type ReadOfflineMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int64 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"` //用户id
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`       //请求的消息数
	Time   int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`     //从time开始的num条消息
}

func (x *ReadOfflineMsgReq) Reset() {
	*x = ReadOfflineMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOfflineMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOfflineMsgReq) ProtoMessage() {}

func (x *ReadOfflineMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOfflineMsgReq.ProtoReflect.Descriptor instead.
func (*ReadOfflineMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{2}
}

func (x *ReadOfflineMsgReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *ReadOfflineMsgReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ReadOfflineMsgReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 返回总消息数量及消息内容，可以通过请求num为0来获取离线消息数，
// 当用户返回已送达时，删除离线消息
type ReadOfflineMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` //错误码
	MsgNum int64          `protobuf:"varint,2,opt,name=msg_num,json=msgNum,proto3" json:"msg_num,omitempty"`       //总消息数量
	// repeated bytes pb_data = 3;
	MsgList []*ReadOfflineMsgRsp_MsgList `protobuf:"bytes,3,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`
}

func (x *ReadOfflineMsgRsp) Reset() {
	*x = ReadOfflineMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOfflineMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOfflineMsgRsp) ProtoMessage() {}

func (x *ReadOfflineMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOfflineMsgRsp.ProtoReflect.Descriptor instead.
func (*ReadOfflineMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{3}
}

func (x *ReadOfflineMsgRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

func (x *ReadOfflineMsgRsp) GetMsgNum() int64 {
	if x != nil {
		return x.MsgNum
	}
	return 0
}

func (x *ReadOfflineMsgRsp) GetMsgList() []*ReadOfflineMsgRsp_MsgList {
	if x != nil {
		return x.MsgList
	}
	return nil
}

// 历史消息读取
type HistoryMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Service      pb_pub.Service             `protobuf:"varint,2,opt,name=service,proto3,enum=pb_pub.Service" json:"service,omitempty"`
	GroupId      int64                      `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	MsgSn        int64                      `protobuf:"varint,4,opt,name=msgSn,proto3" json:"msgSn,omitempty"`
	SrcId        int64                      `protobuf:"varint,5,opt,name=srcId,proto3" json:"srcId,omitempty"`
	AimId        int64                      `protobuf:"varint,6,opt,name=aimId,proto3" json:"aimId,omitempty"`
	PbName       string                     `protobuf:"bytes,7,opt,name=pbName,proto3" json:"pbName,omitempty"`
	PbData       []byte                     `protobuf:"bytes,8,opt,name=pbData,proto3" json:"pbData,omitempty"`
	MsgStatus    pb_pub.MSG_STATE           `protobuf:"varint,9,opt,name=msgStatus,proto3,enum=pb_pub.MSG_STATE" json:"msgStatus,omitempty"` // 本消息的状态
	ReadStatus   []*ReadStatusOfDiffClients `protobuf:"bytes,10,rep,name=readStatus,proto3" json:"readStatus,omitempty"`                     // 各端的读取状态
	CreatedAt    int64                      `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdateAt     int64                      `protobuf:"varint,12,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	PbCommData   []byte                     `protobuf:"bytes,13,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	GroupMsgSn   int64                      `protobuf:"varint,14,opt,name=groupMsgSn,proto3" json:"groupMsgSn,omitempty"` // 群消息sn，每个群自增
	Session      int64                      `protobuf:"varint,15,opt,name=Session,proto3" json:"Session,omitempty"`
	SessionCurSn int64                      `protobuf:"varint,16,opt,name=SessionCurSn,proto3" json:"SessionCurSn,omitempty"`
}

func (x *HistoryMsg) Reset() {
	*x = HistoryMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMsg) ProtoMessage() {}

func (x *HistoryMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMsg.ProtoReflect.Descriptor instead.
func (*HistoryMsg) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{4}
}

func (x *HistoryMsg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HistoryMsg) GetService() pb_pub.Service {
	if x != nil {
		return x.Service
	}
	return pb_pub.Service(0)
}

func (x *HistoryMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *HistoryMsg) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *HistoryMsg) GetSrcId() int64 {
	if x != nil {
		return x.SrcId
	}
	return 0
}

func (x *HistoryMsg) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

func (x *HistoryMsg) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *HistoryMsg) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *HistoryMsg) GetMsgStatus() pb_pub.MSG_STATE {
	if x != nil {
		return x.MsgStatus
	}
	return pb_pub.MSG_STATE(0)
}

func (x *HistoryMsg) GetReadStatus() []*ReadStatusOfDiffClients {
	if x != nil {
		return x.ReadStatus
	}
	return nil
}

func (x *HistoryMsg) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *HistoryMsg) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *HistoryMsg) GetPbCommData() []byte {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *HistoryMsg) GetGroupMsgSn() int64 {
	if x != nil {
		return x.GroupMsgSn
	}
	return 0
}

func (x *HistoryMsg) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *HistoryMsg) GetSessionCurSn() int64 {
	if x != nil {
		return x.SessionCurSn
	}
	return 0
}

type ReadStatusOfDiffClients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientType pb_pub.CLIENT_TYPE `protobuf:"varint,1,opt,name=clientType,proto3,enum=pb_pub.CLIENT_TYPE" json:"clientType,omitempty"`
	ReadStatus pb_pub.MSG_STATE   `protobuf:"varint,2,opt,name=readStatus,proto3,enum=pb_pub.MSG_STATE" json:"readStatus,omitempty"`
	UpDateAt   int64              `protobuf:"varint,3,opt,name=upDateAt,proto3" json:"upDateAt,omitempty"`
}

func (x *ReadStatusOfDiffClients) Reset() {
	*x = ReadStatusOfDiffClients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStatusOfDiffClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStatusOfDiffClients) ProtoMessage() {}

func (x *ReadStatusOfDiffClients) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStatusOfDiffClients.ProtoReflect.Descriptor instead.
func (*ReadStatusOfDiffClients) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{5}
}

func (x *ReadStatusOfDiffClients) GetClientType() pb_pub.CLIENT_TYPE {
	if x != nil {
		return x.ClientType
	}
	return pb_pub.CLIENT_TYPE(0)
}

func (x *ReadStatusOfDiffClients) GetReadStatus() pb_pub.MSG_STATE {
	if x != nil {
		return x.ReadStatus
	}
	return pb_pub.MSG_STATE(0)
}

func (x *ReadStatusOfDiffClients) GetUpDateAt() int64 {
	if x != nil {
		return x.UpDateAt
	}
	return 0
}

// 获取历史消息
type FetchHistoryMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                     // 页码，默认第一页
	PageSize       int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`             // 每页条数
	TotalCount     int64  `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"`         // 为0时服务端查，不为零是是从客户端转过来的，就不要重新查个数了
	FilterNew      bool   `protobuf:"varint,4,opt,name=filterNew,proto3" json:"filterNew,omitempty"`           // 是否只拉取新消息，用户离线消息读取，多端同步
	OrderDesc      bool   `protobuf:"varint,5,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`           // 是否倒序，true:即时间从今到古，false:时间从古到今
	StartCreatedAt int64  `protobuf:"varint,6,opt,name=startCreatedAt,proto3" json:"startCreatedAt,omitempty"` // 开始时间
	EndCreatedAt   int64  `protobuf:"varint,7,opt,name=endCreatedAt,proto3" json:"endCreatedAt,omitempty"`     // 结束时间
	StartUpdatedAt int64  `protobuf:"varint,8,opt,name=startUpdatedAt,proto3" json:"startUpdatedAt,omitempty"` // 更新开始时间
	EndUpdatedAt   int64  `protobuf:"varint,9,opt,name=endUpdatedAt,proto3" json:"endUpdatedAt,omitempty"`     // 更新结束时间
	Id             int64  `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`                        // 历史消息存储id
	MsgSn          int64  `protobuf:"varint,11,opt,name=msgSn,proto3" json:"msgSn,omitempty"`                  // 根据msgsn精确查找
	GroupId        int64  `protobuf:"varint,12,opt,name=groupId,proto3" json:"groupId,omitempty"`              // 根据群id查找
	SrcId          int64  `protobuf:"varint,13,opt,name=srcId,proto3" json:"srcId,omitempty"`                  // 根据发送者查找
	AimId          int64  `protobuf:"varint,14,opt,name=aimId,proto3" json:"aimId,omitempty"`                  // 根据接收者查找
	PbName         string `protobuf:"bytes,15,opt,name=pbName,proto3" json:"pbName,omitempty"`                 // 根据消息名称查找
	MsgStatus      int32  `protobuf:"varint,16,opt,name=msgStatus,proto3" json:"msgStatus,omitempty"`          // 根据消息状态查找
	Sort           string `protobuf:"bytes,17,opt,name=sort,proto3" json:"sort,omitempty"`                     // 排序字段
	Order          string `protobuf:"bytes,18,opt,name=order,proto3" json:"order,omitempty"`                   // 排序规则
}

func (x *FetchHistoryMsgReq) Reset() {
	*x = FetchHistoryMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHistoryMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHistoryMsgReq) ProtoMessage() {}

func (x *FetchHistoryMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHistoryMsgReq.ProtoReflect.Descriptor instead.
func (*FetchHistoryMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{6}
}

func (x *FetchHistoryMsgReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetFilterNew() bool {
	if x != nil {
		return x.FilterNew
	}
	return false
}

func (x *FetchHistoryMsgReq) GetOrderDesc() bool {
	if x != nil {
		return x.OrderDesc
	}
	return false
}

func (x *FetchHistoryMsgReq) GetStartCreatedAt() int64 {
	if x != nil {
		return x.StartCreatedAt
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetEndCreatedAt() int64 {
	if x != nil {
		return x.EndCreatedAt
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetStartUpdatedAt() int64 {
	if x != nil {
		return x.StartUpdatedAt
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetEndUpdatedAt() int64 {
	if x != nil {
		return x.EndUpdatedAt
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetSrcId() int64 {
	if x != nil {
		return x.SrcId
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *FetchHistoryMsgReq) GetMsgStatus() int32 {
	if x != nil {
		return x.MsgStatus
	}
	return 0
}

func (x *FetchHistoryMsgReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *FetchHistoryMsgReq) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type FetchHistoryMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`             // 页码，默认第一页
	PageSize   int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`     // 每页条数
	TotalCount int64 `protobuf:"varint,3,opt,name=totalCount,proto3" json:"totalCount,omitempty"` // 还有多少条 收到后再下次查询的时候可以带上来
	// 消息
	PbHisMsg []*HistoryMsg `protobuf:"bytes,4,rep,name=pbHisMsg,proto3" json:"pbHisMsg,omitempty"`
}

func (x *FetchHistoryMsgRsp) Reset() {
	*x = FetchHistoryMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHistoryMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHistoryMsgRsp) ProtoMessage() {}

func (x *FetchHistoryMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHistoryMsgRsp.ProtoReflect.Descriptor instead.
func (*FetchHistoryMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{7}
}

func (x *FetchHistoryMsgRsp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchHistoryMsgRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchHistoryMsgRsp) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FetchHistoryMsgRsp) GetPbHisMsg() []*HistoryMsg {
	if x != nil {
		return x.PbHisMsg
	}
	return nil
}

// 获取历史消息，包括私聊和群聊
type FetchNewHistoryMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginId   int64 `protobuf:"varint,1,opt,name=beginId,proto3" json:"beginId,omitempty"`     // 开始的id，从头开始则填0
	PageSize  int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`   // 获取条数
	OrderDesc bool  `protobuf:"varint,3,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"` // 是否倒序，true:即时间从今到古，false:时间从古到今
}

func (x *FetchNewHistoryMsgReq) Reset() {
	*x = FetchNewHistoryMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNewHistoryMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNewHistoryMsgReq) ProtoMessage() {}

func (x *FetchNewHistoryMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNewHistoryMsgReq.ProtoReflect.Descriptor instead.
func (*FetchNewHistoryMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{8}
}

func (x *FetchNewHistoryMsgReq) GetBeginId() int64 {
	if x != nil {
		return x.BeginId
	}
	return 0
}

func (x *FetchNewHistoryMsgReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchNewHistoryMsgReq) GetOrderDesc() bool {
	if x != nil {
		return x.OrderDesc
	}
	return false
}

type FetchNewHistoryMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   int64 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`     // 每页条数
	TotalCount int64 `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"` // 一共多少条 收到后再下次查询的时候可以带上来
	// 消息
	PbHisMsg []*HistoryMsg `protobuf:"bytes,3,rep,name=pbHisMsg,proto3" json:"pbHisMsg,omitempty"`
}

func (x *FetchNewHistoryMsgRsp) Reset() {
	*x = FetchNewHistoryMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNewHistoryMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNewHistoryMsgRsp) ProtoMessage() {}

func (x *FetchNewHistoryMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNewHistoryMsgRsp.ProtoReflect.Descriptor instead.
func (*FetchNewHistoryMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{9}
}

func (x *FetchNewHistoryMsgRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchNewHistoryMsgRsp) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FetchNewHistoryMsgRsp) GetPbHisMsg() []*HistoryMsg {
	if x != nil {
		return x.PbHisMsg
	}
	return nil
}

// 读取单个消息
// 至少填一个
type FetchOneHistoryMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn int64 `protobuf:"varint,2,opt,name=msgSn,proto3" json:"msgSn,omitempty"`
}

func (x *FetchOneHistoryMsgReq) Reset() {
	*x = FetchOneHistoryMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchOneHistoryMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOneHistoryMsgReq) ProtoMessage() {}

func (x *FetchOneHistoryMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOneHistoryMsgReq.ProtoReflect.Descriptor instead.
func (*FetchOneHistoryMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{10}
}

func (x *FetchOneHistoryMsgReq) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

type FetchOneHistoryMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateHistoryMsg *HistoryMsg `protobuf:"bytes,1,opt,name=privateHistoryMsg,proto3" json:"privateHistoryMsg,omitempty"`
}

func (x *FetchOneHistoryMsgRsp) Reset() {
	*x = FetchOneHistoryMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchOneHistoryMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOneHistoryMsgRsp) ProtoMessage() {}

func (x *FetchOneHistoryMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOneHistoryMsgRsp.ProtoReflect.Descriptor instead.
func (*FetchOneHistoryMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{11}
}

func (x *FetchOneHistoryMsgRsp) GetPrivateHistoryMsg() *HistoryMsg {
	if x != nil {
		return x.PrivateHistoryMsg
	}
	return nil
}

// 删除单个消息
type DelHistoryMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn []int64 `protobuf:"varint,2,rep,packed,name=msgSn,proto3" json:"msgSn,omitempty"`
}

func (x *DelHistoryMsgReq) Reset() {
	*x = DelHistoryMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelHistoryMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelHistoryMsgReq) ProtoMessage() {}

func (x *DelHistoryMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelHistoryMsgReq.ProtoReflect.Descriptor instead.
func (*DelHistoryMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{12}
}

func (x *DelHistoryMsgReq) GetMsgSn() []int64 {
	if x != nil {
		return x.MsgSn
	}
	return nil
}

type DelHistoryMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelHistoryMsgRsp) Reset() {
	*x = DelHistoryMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelHistoryMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelHistoryMsgRsp) ProtoMessage() {}

func (x *DelHistoryMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelHistoryMsgRsp.ProtoReflect.Descriptor instead.
func (*DelHistoryMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{13}
}

// 准备好接收用户离线消息
//
//	rpc ReadyForSyncOfflineMsgStatus(pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusReq) returns (pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusRsp) {}
type ReadyForSyncOfflineMsgStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadyForSyncOfflineMsgStatusReq) Reset() {
	*x = ReadyForSyncOfflineMsgStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyForSyncOfflineMsgStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyForSyncOfflineMsgStatusReq) ProtoMessage() {}

func (x *ReadyForSyncOfflineMsgStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyForSyncOfflineMsgStatusReq.ProtoReflect.Descriptor instead.
func (*ReadyForSyncOfflineMsgStatusReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{14}
}

type ReadyForSyncOfflineMsgStatusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadyForSyncOfflineMsgStatusRsp) Reset() {
	*x = ReadyForSyncOfflineMsgStatusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyForSyncOfflineMsgStatusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyForSyncOfflineMsgStatusRsp) ProtoMessage() {}

func (x *ReadyForSyncOfflineMsgStatusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyForSyncOfflineMsgStatusRsp.ProtoReflect.Descriptor instead.
func (*ReadyForSyncOfflineMsgStatusRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{15}
}

type StatusChangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn        int64            `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`
	MsgCurStatus pb_pub.MSG_STATE `protobuf:"varint,2,opt,name=msgCurStatus,proto3,enum=pb_pub.MSG_STATE" json:"msgCurStatus,omitempty"` // 离线消息最终状态
}

func (x *StatusChangeItem) Reset() {
	*x = StatusChangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusChangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusChangeItem) ProtoMessage() {}

func (x *StatusChangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusChangeItem.ProtoReflect.Descriptor instead.
func (*StatusChangeItem) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{16}
}

func (x *StatusChangeItem) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *StatusChangeItem) GetMsgCurStatus() pb_pub.MSG_STATE {
	if x != nil {
		return x.MsgCurStatus
	}
	return pb_pub.MSG_STATE(0)
}

// 服务端发送给客户端
type OfflineMsgStatueChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session           int64               `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 客户端发送确认收到消息时把此数据原样返回
	StatusChangeItems []*StatusChangeItem `protobuf:"bytes,2,rep,name=StatusChangeItems,proto3" json:"StatusChangeItems,omitempty"`
}

func (x *OfflineMsgStatueChangeNotify) Reset() {
	*x = OfflineMsgStatueChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsgStatueChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsgStatueChangeNotify) ProtoMessage() {}

func (x *OfflineMsgStatueChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsgStatueChangeNotify.ProtoReflect.Descriptor instead.
func (*OfflineMsgStatueChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{17}
}

func (x *OfflineMsgStatueChangeNotify) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *OfflineMsgStatueChangeNotify) GetStatusChangeItems() []*StatusChangeItem {
	if x != nil {
		return x.StatusChangeItems
	}
	return nil
}

// 客户端发回给服务端，确认已经收到
type OfflineMsgStatueChangeNotifyReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session int64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 此数据取自OfflineMsgStatueChangeNotify 消息的session字段
}

func (x *OfflineMsgStatueChangeNotifyReceived) Reset() {
	*x = OfflineMsgStatueChangeNotifyReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsgStatueChangeNotifyReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsgStatueChangeNotifyReceived) ProtoMessage() {}

func (x *OfflineMsgStatueChangeNotifyReceived) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsgStatueChangeNotifyReceived.ProtoReflect.Descriptor instead.
func (*OfflineMsgStatueChangeNotifyReceived) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{18}
}

func (x *OfflineMsgStatueChangeNotifyReceived) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type UserSessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                    // 用户id
	BeginMsgRecordId string `protobuf:"bytes,2,opt,name=beginMsgRecordId,proto3" json:"beginMsgRecordId,omitempty"` // 初始消息id，从这个id往后的消息才可以拉取，一般删除消息，创建用户的时候设置
	NewMsgCount      int64  `protobuf:"varint,3,opt,name=newMsgCount,proto3" json:"newMsgCount,omitempty"`          // 新消息条数 用户点进此会话后清零,后面的重新计数
}

func (x *UserSessionStatus) Reset() {
	*x = UserSessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSessionStatus) ProtoMessage() {}

func (x *UserSessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSessionStatus.ProtoReflect.Descriptor instead.
func (*UserSessionStatus) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{19}
}

func (x *UserSessionStatus) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSessionStatus) GetBeginMsgRecordId() string {
	if x != nil {
		return x.BeginMsgRecordId
	}
	return ""
}

func (x *UserSessionStatus) GetNewMsgCount() int64 {
	if x != nil {
		return x.NewMsgCount
	}
	return 0
}

// chat session 用于展示会话列表
type ChatSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session         int64             `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`                                                  // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
	SessionCurSubSn int64             `protobuf:"varint,2,opt,name=SessionCurSubSn,proto3" json:"SessionCurSubSn,omitempty"`                                  // 当前session的最新序列号，序列号每一个session从1开始连续递增，客户端用于判断消息是否需要拉取
	LastMsgStatus   pb_pub.MSG_STATE  `protobuf:"varint,3,opt,name=LastMsgStatus,proto3,enum=pb_pub.MSG_STATE" json:"LastMsgStatus,omitempty"`                // 最后一条消息的状态, 客户端展示列表使用
	SessionType     CHAT_SESSION_TYPE `protobuf:"varint,4,opt,name=sessionType,proto3,enum=pb_msg_offlineMsg.CHAT_SESSION_TYPE" json:"sessionType,omitempty"` // session 类型，客户端展示列表使用， 是私聊还是群聊，还是其他
	SrcId           int64             `protobuf:"varint,5,opt,name=SrcId,proto3" json:"SrcId,omitempty"`
	PbName          string            `protobuf:"bytes,6,opt,name=PbName,proto3" json:"PbName,omitempty"`
	PbData          []byte            `protobuf:"bytes,7,opt,name=PbData,proto3" json:"PbData,omitempty"`
	CreatedAt       int64             `protobuf:"varint,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       int64             `protobuf:"varint,10,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PbCommData      []byte            `protobuf:"bytes,11,opt,name=PbCommData,proto3" json:"PbCommData,omitempty"`
	NewMsgCount     int64             `protobuf:"varint,12,opt,name=newMsgCount,proto3" json:"newMsgCount,omitempty"` // 新消息条数 用户点进此会话后清零,后面的重新计数
}

func (x *ChatSession) Reset() {
	*x = ChatSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSession) ProtoMessage() {}

func (x *ChatSession) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSession.ProtoReflect.Descriptor instead.
func (*ChatSession) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{20}
}

func (x *ChatSession) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *ChatSession) GetSessionCurSubSn() int64 {
	if x != nil {
		return x.SessionCurSubSn
	}
	return 0
}

func (x *ChatSession) GetLastMsgStatus() pb_pub.MSG_STATE {
	if x != nil {
		return x.LastMsgStatus
	}
	return pb_pub.MSG_STATE(0)
}

func (x *ChatSession) GetSessionType() CHAT_SESSION_TYPE {
	if x != nil {
		return x.SessionType
	}
	return CHAT_SESSION_TYPE_CHAT_SESSION_TYPE_GROUP_CHAT
}

func (x *ChatSession) GetSrcId() int64 {
	if x != nil {
		return x.SrcId
	}
	return 0
}

func (x *ChatSession) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *ChatSession) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *ChatSession) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ChatSession) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ChatSession) GetPbCommData() []byte {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *ChatSession) GetNewMsgCount() int64 {
	if x != nil {
		return x.NewMsgCount
	}
	return 0
}

// 分页获取srcid的全部聊过天的会话
type FetchChatSessionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                              // 用于分页查询 从1开始 默认1
	PageSize int64               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                                      // 每页数量，默认10
	Time     int64               `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                              // 从哪个时间点开始，只获取这个时间点之后的
	Range    FETCH_SESSION_RANGE `protobuf:"varint,4,opt,name=range,proto3,enum=pb_msg_offlineMsg.FETCH_SESSION_RANGE" json:"range,omitempty"` // 获取范围
}

func (x *FetchChatSessionsReq) Reset() {
	*x = FetchChatSessionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchChatSessionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChatSessionsReq) ProtoMessage() {}

func (x *FetchChatSessionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChatSessionsReq.ProtoReflect.Descriptor instead.
func (*FetchChatSessionsReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{21}
}

func (x *FetchChatSessionsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchChatSessionsReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchChatSessionsReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FetchChatSessionsReq) GetRange() FETCH_SESSION_RANGE {
	if x != nil {
		return x.Range
	}
	return FETCH_SESSION_RANGE_ALL
}

type FetchChatSessionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int64               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                              // 用于分页查询 从1开始 默认1
	PageSize     int64               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`                                      // 每页数量，默认100， 最多100
	Time         int64               `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                              // 从哪个时间点开始，只获取这个时间点之后的
	Range        FETCH_SESSION_RANGE `protobuf:"varint,4,opt,name=range,proto3,enum=pb_msg_offlineMsg.FETCH_SESSION_RANGE" json:"range,omitempty"` // 获取范围
	ChatSessions []*ChatSession      `protobuf:"bytes,5,rep,name=chatSessions,proto3" json:"chatSessions,omitempty"`
	TotalCount   int64               `protobuf:"varint,6,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *FetchChatSessionsRsp) Reset() {
	*x = FetchChatSessionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchChatSessionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChatSessionsRsp) ProtoMessage() {}

func (x *FetchChatSessionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChatSessionsRsp.ProtoReflect.Descriptor instead.
func (*FetchChatSessionsRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{22}
}

func (x *FetchChatSessionsRsp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchChatSessionsRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchChatSessionsRsp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FetchChatSessionsRsp) GetRange() FETCH_SESSION_RANGE {
	if x != nil {
		return x.Range
	}
	return FETCH_SESSION_RANGE_ALL
}

func (x *FetchChatSessionsRsp) GetChatSessions() []*ChatSession {
	if x != nil {
		return x.ChatSessions
	}
	return nil
}

func (x *FetchChatSessionsRsp) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// ChatHisMsgReq 获取历史聊天消息
type FetchChatHisMsgListOfSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // 用于分页查询 从1开始 默认1
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 每页数量，默认10
	Time     int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`         // 从哪个时间点开始，只获取这个时间点之后的
	Session  int64 `protobuf:"varint,4,opt,name=session,proto3" json:"session,omitempty"`   // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
}

func (x *FetchChatHisMsgListOfSessionReq) Reset() {
	*x = FetchChatHisMsgListOfSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchChatHisMsgListOfSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChatHisMsgListOfSessionReq) ProtoMessage() {}

func (x *FetchChatHisMsgListOfSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChatHisMsgListOfSessionReq.ProtoReflect.Descriptor instead.
func (*FetchChatHisMsgListOfSessionReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{23}
}

func (x *FetchChatHisMsgListOfSessionReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionReq) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type FetchChatHisMsgListOfSessionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int64         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // 用于分页查询 从1开始 默认1
	PageSize    int64         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 每页数量，默认10
	Time        int64         `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`         // 从哪个时间点开始，只获取这个时间点之后的
	Session     int64         `protobuf:"varint,4,opt,name=session,proto3" json:"session,omitempty"`   // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
	ChatHisMsgs []*HistoryMsg `protobuf:"bytes,5,rep,name=chatHisMsgs,proto3" json:"chatHisMsgs,omitempty"`
	TotalCount  int64         `protobuf:"varint,6,opt,name=totalCount,proto3" json:"totalCount,omitempty"` // 消息总个数
}

func (x *FetchChatHisMsgListOfSessionRsp) Reset() {
	*x = FetchChatHisMsgListOfSessionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchChatHisMsgListOfSessionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchChatHisMsgListOfSessionRsp) ProtoMessage() {}

func (x *FetchChatHisMsgListOfSessionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchChatHisMsgListOfSessionRsp.ProtoReflect.Descriptor instead.
func (*FetchChatHisMsgListOfSessionRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{24}
}

func (x *FetchChatHisMsgListOfSessionRsp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionRsp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionRsp) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *FetchChatHisMsgListOfSessionRsp) GetChatHisMsgs() []*HistoryMsg {
	if x != nil {
		return x.ChatHisMsgs
	}
	return nil
}

func (x *FetchChatHisMsgListOfSessionRsp) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// 删除会话, 解除好友关系时调用
type DelChatSessionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session int64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
}

func (x *DelChatSessionsReq) Reset() {
	*x = DelChatSessionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatSessionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatSessionsReq) ProtoMessage() {}

func (x *DelChatSessionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatSessionsReq.ProtoReflect.Descriptor instead.
func (*DelChatSessionsReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{25}
}

func (x *DelChatSessionsReq) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type DelChatSessionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session int64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
}

func (x *DelChatSessionsRsp) Reset() {
	*x = DelChatSessionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatSessionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatSessionsRsp) ProtoMessage() {}

func (x *DelChatSessionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatSessionsRsp.ProtoReflect.Descriptor instead.
func (*DelChatSessionsRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{26}
}

func (x *DelChatSessionsRsp) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

// 清除消息 客户端从聊天列表删除一项聊天会话时调用，这时对方可能是好友，也可能不是
type ClearMsgOfSessionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session int64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
}

func (x *ClearMsgOfSessionReq) Reset() {
	*x = ClearMsgOfSessionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearMsgOfSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearMsgOfSessionReq) ProtoMessage() {}

func (x *ClearMsgOfSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearMsgOfSessionReq.ProtoReflect.Descriptor instead.
func (*ClearMsgOfSessionReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{27}
}

func (x *ClearMsgOfSessionReq) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type ClearMsgOfSessionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session int64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"` // 会话id, 自己和不同好友或群组成不同session，相同好友或群组成相同session，
}

func (x *ClearMsgOfSessionRsp) Reset() {
	*x = ClearMsgOfSessionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearMsgOfSessionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearMsgOfSessionRsp) ProtoMessage() {}

func (x *ClearMsgOfSessionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearMsgOfSessionRsp.ProtoReflect.Descriptor instead.
func (*ClearMsgOfSessionRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{28}
}

func (x *ClearMsgOfSessionRsp) GetSession() int64 {
	if x != nil {
		return x.Session
	}
	return 0
}

// 获取系统通知消息
type FetchSysNotifyMsgListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // 用于分页查询 从1开始 默认1
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 每页数量，默认10
	Time     int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`         // 从哪个时间点开始，只获取这个时间点之后的
}

func (x *FetchSysNotifyMsgListReq) Reset() {
	*x = FetchSysNotifyMsgListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSysNotifyMsgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSysNotifyMsgListReq) ProtoMessage() {}

func (x *FetchSysNotifyMsgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSysNotifyMsgListReq.ProtoReflect.Descriptor instead.
func (*FetchSysNotifyMsgListReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{29}
}

func (x *FetchSysNotifyMsgListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchSysNotifyMsgListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchSysNotifyMsgListReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FetchSysNotifyMsgListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        int64         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // 用于分页查询 从1开始 默认1
	PageSize    int64         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 每页数量，默认10
	Time        int64         `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`         // 从哪个时间点开始，只获取这个时间点之后的
	ChatHisMsgs []*HistoryMsg `protobuf:"bytes,4,rep,name=chatHisMsgs,proto3" json:"chatHisMsgs,omitempty"`
	TotalCount  int64         `protobuf:"varint,5,opt,name=totalCount,proto3" json:"totalCount,omitempty"` // 消息总个数
}

func (x *FetchSysNotifyMsgListRsp) Reset() {
	*x = FetchSysNotifyMsgListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSysNotifyMsgListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSysNotifyMsgListRsp) ProtoMessage() {}

func (x *FetchSysNotifyMsgListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSysNotifyMsgListRsp.ProtoReflect.Descriptor instead.
func (*FetchSysNotifyMsgListRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{30}
}

func (x *FetchSysNotifyMsgListRsp) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FetchSysNotifyMsgListRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchSysNotifyMsgListRsp) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FetchSysNotifyMsgListRsp) GetChatHisMsgs() []*HistoryMsg {
	if x != nil {
		return x.ChatHisMsgs
	}
	return nil
}

func (x *FetchSysNotifyMsgListRsp) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ReadOfflineMsgRsp_MsgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbName     string             `protobuf:"bytes,1,opt,name=pb_name,json=pbName,proto3" json:"pb_name,omitempty"` //pb名称
	PbData     []byte             `protobuf:"bytes,2,opt,name=pb_data,json=pbData,proto3" json:"pb_data,omitempty"` //消息内容
	Time       int64              `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Sn         int64              `protobuf:"varint,4,opt,name=sn,proto3" json:"sn,omitempty"`
	SrcUserid  int64              `protobuf:"varint,5,opt,name=src_userid,json=srcUserid,proto3" json:"src_userid,omitempty"`
	AimUserid  int64              `protobuf:"varint,6,opt,name=aim_userid,json=aimUserid,proto3" json:"aim_userid,omitempty"`
	PbCommData *pb_pub.PBCommData `protobuf:"bytes,7,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
}

func (x *ReadOfflineMsgRsp_MsgList) Reset() {
	*x = ReadOfflineMsgRsp_MsgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOfflineMsgRsp_MsgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOfflineMsgRsp_MsgList) ProtoMessage() {}

func (x *ReadOfflineMsgRsp_MsgList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOfflineMsgRsp_MsgList.ProtoReflect.Descriptor instead.
func (*ReadOfflineMsgRsp_MsgList) Descriptor() ([]byte, []int) {
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ReadOfflineMsgRsp_MsgList) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *ReadOfflineMsgRsp_MsgList) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *ReadOfflineMsgRsp_MsgList) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ReadOfflineMsgRsp_MsgList) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *ReadOfflineMsgRsp_MsgList) GetSrcUserid() int64 {
	if x != nil {
		return x.SrcUserid
	}
	return 0
}

func (x *ReadOfflineMsgRsp_MsgList) GetAimUserid() int64 {
	if x != nil {
		return x.AimUserid
	}
	return 0
}

func (x *ReadOfflineMsgRsp_MsgList) GetPbCommData() *pb_pub.PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

var File_pb_msg_offline_msg_offlineMsg_proto protoreflect.FileDescriptor

var file_pb_msg_offline_msg_offlineMsg_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x53,
	0x61, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x69, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x62, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x3c, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x51, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x73, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0xd1, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x62, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x72, 0x63, 0x55,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x69, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x69, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x04, 0x0a, 0x0a, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x53, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4f, 0x66, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73,
	0x67, 0x53, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x53, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x72, 0x53, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4f, 0x66, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x22, 0x84, 0x04, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x53, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x62, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x73, 0x67, 0x52, 0x08, 0x70, 0x62, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x6b, 0x0a, 0x15,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x52, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x08, 0x70, 0x62, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x52, 0x08, 0x70, 0x62, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x15, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x22, 0x64, 0x0a, 0x15, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x22,
	0x28, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x22, 0x21, 0x0a,
	0x1f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x22, 0x21, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x5f, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x35, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x43, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x43, 0x75, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x40, 0x0a, 0x24, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x96, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x53, 0x75, 0x62, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x53, 0x75,
	0x62, 0x53, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x72, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x72, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x50, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x69, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x4d, 0x73, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x48,
	0x69, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d,
	0x73, 0x67, 0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x4d, 0x73, 0x67, 0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x18, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x59, 0x0a, 0x11,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x64, 0x2a, 0x40, 0x0a, 0x13, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30,
	0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_msg_offline_msg_offlineMsg_proto_rawDescOnce sync.Once
	file_pb_msg_offline_msg_offlineMsg_proto_rawDescData = file_pb_msg_offline_msg_offlineMsg_proto_rawDesc
)

func file_pb_msg_offline_msg_offlineMsg_proto_rawDescGZIP() []byte {
	file_pb_msg_offline_msg_offlineMsg_proto_rawDescOnce.Do(func() {
		file_pb_msg_offline_msg_offlineMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_msg_offline_msg_offlineMsg_proto_rawDescData)
	})
	return file_pb_msg_offline_msg_offlineMsg_proto_rawDescData
}

var file_pb_msg_offline_msg_offlineMsg_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_msg_offline_msg_offlineMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_pb_msg_offline_msg_offlineMsg_proto_goTypes = []interface{}{
	(CHAT_SESSION_TYPE)(0),                       // 0: pb_msg_offlineMsg.CHAT_SESSION_TYPE
	(FETCH_SESSION_RANGE)(0),                     // 1: pb_msg_offlineMsg.FETCH_SESSION_RANGE
	(*SaveOfflineMsgReq)(nil),                    // 2: pb_msg_offlineMsg.SaveOfflineMsgReq
	(*SaveOfflineMsgRsp)(nil),                    // 3: pb_msg_offlineMsg.SaveOfflineMsgRsp
	(*ReadOfflineMsgReq)(nil),                    // 4: pb_msg_offlineMsg.ReadOfflineMsgReq
	(*ReadOfflineMsgRsp)(nil),                    // 5: pb_msg_offlineMsg.ReadOfflineMsgRsp
	(*HistoryMsg)(nil),                           // 6: pb_msg_offlineMsg.HistoryMsg
	(*ReadStatusOfDiffClients)(nil),              // 7: pb_msg_offlineMsg.ReadStatusOfDiffClients
	(*FetchHistoryMsgReq)(nil),                   // 8: pb_msg_offlineMsg.FetchHistoryMsgReq
	(*FetchHistoryMsgRsp)(nil),                   // 9: pb_msg_offlineMsg.FetchHistoryMsgRsp
	(*FetchNewHistoryMsgReq)(nil),                // 10: pb_msg_offlineMsg.FetchNewHistoryMsgReq
	(*FetchNewHistoryMsgRsp)(nil),                // 11: pb_msg_offlineMsg.FetchNewHistoryMsgRsp
	(*FetchOneHistoryMsgReq)(nil),                // 12: pb_msg_offlineMsg.FetchOneHistoryMsgReq
	(*FetchOneHistoryMsgRsp)(nil),                // 13: pb_msg_offlineMsg.FetchOneHistoryMsgRsp
	(*DelHistoryMsgReq)(nil),                     // 14: pb_msg_offlineMsg.DelHistoryMsgReq
	(*DelHistoryMsgRsp)(nil),                     // 15: pb_msg_offlineMsg.DelHistoryMsgRsp
	(*ReadyForSyncOfflineMsgStatusReq)(nil),      // 16: pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusReq
	(*ReadyForSyncOfflineMsgStatusRsp)(nil),      // 17: pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusRsp
	(*StatusChangeItem)(nil),                     // 18: pb_msg_offlineMsg.StatusChangeItem
	(*OfflineMsgStatueChangeNotify)(nil),         // 19: pb_msg_offlineMsg.OfflineMsgStatueChangeNotify
	(*OfflineMsgStatueChangeNotifyReceived)(nil), // 20: pb_msg_offlineMsg.OfflineMsgStatueChangeNotifyReceived
	(*UserSessionStatus)(nil),                    // 21: pb_msg_offlineMsg.UserSessionStatus
	(*ChatSession)(nil),                          // 22: pb_msg_offlineMsg.ChatSession
	(*FetchChatSessionsReq)(nil),                 // 23: pb_msg_offlineMsg.FetchChatSessionsReq
	(*FetchChatSessionsRsp)(nil),                 // 24: pb_msg_offlineMsg.FetchChatSessionsRsp
	(*FetchChatHisMsgListOfSessionReq)(nil),      // 25: pb_msg_offlineMsg.FetchChatHisMsgListOfSessionReq
	(*FetchChatHisMsgListOfSessionRsp)(nil),      // 26: pb_msg_offlineMsg.FetchChatHisMsgListOfSessionRsp
	(*DelChatSessionsReq)(nil),                   // 27: pb_msg_offlineMsg.DelChatSessionsReq
	(*DelChatSessionsRsp)(nil),                   // 28: pb_msg_offlineMsg.DelChatSessionsRsp
	(*ClearMsgOfSessionReq)(nil),                 // 29: pb_msg_offlineMsg.ClearMsgOfSessionReq
	(*ClearMsgOfSessionRsp)(nil),                 // 30: pb_msg_offlineMsg.ClearMsgOfSessionRsp
	(*FetchSysNotifyMsgListReq)(nil),             // 31: pb_msg_offlineMsg.FetchSysNotifyMsgListReq
	(*FetchSysNotifyMsgListRsp)(nil),             // 32: pb_msg_offlineMsg.FetchSysNotifyMsgListRsp
	(*ReadOfflineMsgRsp_MsgList)(nil),            // 33: pb_msg_offlineMsg.ReadOfflineMsgRsp.MsgList
	(*pb_pub.PBCommData)(nil),                    // 34: pb_pub.PBCommData
	(pb_pub.ErrCode)(0),                          // 35: pb_pub.ErrCode
	(pb_pub.Service)(0),                          // 36: pb_pub.Service
	(pb_pub.MSG_STATE)(0),                        // 37: pb_pub.MSG_STATE
	(pb_pub.CLIENT_TYPE)(0),                      // 38: pb_pub.CLIENT_TYPE
}
var file_pb_msg_offline_msg_offlineMsg_proto_depIdxs = []int32{
	34, // 0: pb_msg_offlineMsg.SaveOfflineMsgReq.pbCommData:type_name -> pb_pub.PBCommData
	35, // 1: pb_msg_offlineMsg.SaveOfflineMsgRsp.result:type_name -> pb_pub.ErrCode
	35, // 2: pb_msg_offlineMsg.ReadOfflineMsgRsp.result:type_name -> pb_pub.ErrCode
	33, // 3: pb_msg_offlineMsg.ReadOfflineMsgRsp.msg_list:type_name -> pb_msg_offlineMsg.ReadOfflineMsgRsp.MsgList
	36, // 4: pb_msg_offlineMsg.HistoryMsg.service:type_name -> pb_pub.Service
	37, // 5: pb_msg_offlineMsg.HistoryMsg.msgStatus:type_name -> pb_pub.MSG_STATE
	7,  // 6: pb_msg_offlineMsg.HistoryMsg.readStatus:type_name -> pb_msg_offlineMsg.ReadStatusOfDiffClients
	38, // 7: pb_msg_offlineMsg.ReadStatusOfDiffClients.clientType:type_name -> pb_pub.CLIENT_TYPE
	37, // 8: pb_msg_offlineMsg.ReadStatusOfDiffClients.readStatus:type_name -> pb_pub.MSG_STATE
	6,  // 9: pb_msg_offlineMsg.FetchHistoryMsgRsp.pbHisMsg:type_name -> pb_msg_offlineMsg.HistoryMsg
	6,  // 10: pb_msg_offlineMsg.FetchNewHistoryMsgRsp.pbHisMsg:type_name -> pb_msg_offlineMsg.HistoryMsg
	6,  // 11: pb_msg_offlineMsg.FetchOneHistoryMsgRsp.privateHistoryMsg:type_name -> pb_msg_offlineMsg.HistoryMsg
	37, // 12: pb_msg_offlineMsg.StatusChangeItem.msgCurStatus:type_name -> pb_pub.MSG_STATE
	18, // 13: pb_msg_offlineMsg.OfflineMsgStatueChangeNotify.StatusChangeItems:type_name -> pb_msg_offlineMsg.StatusChangeItem
	37, // 14: pb_msg_offlineMsg.ChatSession.LastMsgStatus:type_name -> pb_pub.MSG_STATE
	0,  // 15: pb_msg_offlineMsg.ChatSession.sessionType:type_name -> pb_msg_offlineMsg.CHAT_SESSION_TYPE
	1,  // 16: pb_msg_offlineMsg.FetchChatSessionsReq.range:type_name -> pb_msg_offlineMsg.FETCH_SESSION_RANGE
	1,  // 17: pb_msg_offlineMsg.FetchChatSessionsRsp.range:type_name -> pb_msg_offlineMsg.FETCH_SESSION_RANGE
	22, // 18: pb_msg_offlineMsg.FetchChatSessionsRsp.chatSessions:type_name -> pb_msg_offlineMsg.ChatSession
	6,  // 19: pb_msg_offlineMsg.FetchChatHisMsgListOfSessionRsp.chatHisMsgs:type_name -> pb_msg_offlineMsg.HistoryMsg
	6,  // 20: pb_msg_offlineMsg.FetchSysNotifyMsgListRsp.chatHisMsgs:type_name -> pb_msg_offlineMsg.HistoryMsg
	34, // 21: pb_msg_offlineMsg.ReadOfflineMsgRsp.MsgList.pbCommData:type_name -> pb_pub.PBCommData
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pb_msg_offline_msg_offlineMsg_proto_init() }
func file_pb_msg_offline_msg_offlineMsg_proto_init() {
	if File_pb_msg_offline_msg_offlineMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveOfflineMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveOfflineMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOfflineMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOfflineMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStatusOfDiffClients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHistoryMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHistoryMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNewHistoryMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNewHistoryMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchOneHistoryMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchOneHistoryMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelHistoryMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelHistoryMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyForSyncOfflineMsgStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyForSyncOfflineMsgStatusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusChangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsgStatueChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsgStatueChangeNotifyReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchChatSessionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchChatSessionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchChatHisMsgListOfSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchChatHisMsgListOfSessionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatSessionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatSessionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearMsgOfSessionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearMsgOfSessionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSysNotifyMsgListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSysNotifyMsgListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_offline_msg_offlineMsg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOfflineMsgRsp_MsgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_msg_offline_msg_offlineMsg_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_msg_offline_msg_offlineMsg_proto_goTypes,
		DependencyIndexes: file_pb_msg_offline_msg_offlineMsg_proto_depIdxs,
		EnumInfos:         file_pb_msg_offline_msg_offlineMsg_proto_enumTypes,
		MessageInfos:      file_pb_msg_offline_msg_offlineMsg_proto_msgTypes,
	}.Build()
	File_pb_msg_offline_msg_offlineMsg_proto = out.File
	file_pb_msg_offline_msg_offlineMsg_proto_rawDesc = nil
	file_pb_msg_offline_msg_offlineMsg_proto_goTypes = nil
	file_pb_msg_offline_msg_offlineMsg_proto_depIdxs = nil
}
