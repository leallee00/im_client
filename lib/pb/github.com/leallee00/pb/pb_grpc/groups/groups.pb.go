// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/groups/groups.proto

package groups

import (
	context "context"
	groups "github.com/leallee00/pb/pb_msg/groups"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_groups_groups_proto protoreflect.FileDescriptor

var file_pb_grpc_groups_groups_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x1a, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x92, 0x06, 0x0a, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73,
	0x70, 0x12, 0x4b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0b, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x42, 0x28,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pb_grpc_groups_groups_proto_goTypes = []interface{}{
	(*groups.CreateGroupReq)(nil),  // 0: pb_msg_groups.CreateGroupReq
	(*groups.DeleteGroupReq)(nil),  // 1: pb_msg_groups.DeleteGroupReq
	(*groups.AddMemberReq)(nil),    // 2: pb_msg_groups.AddMemberReq
	(*groups.RemoveMemberReq)(nil), // 3: pb_msg_groups.RemoveMemberReq
	(*groups.GroupMembersReq)(nil), // 4: pb_msg_groups.GroupMembersReq
	(*groups.MemberGroupsReq)(nil), // 5: pb_msg_groups.MemberGroupsReq
	(*groups.GroupMessageReq)(nil), // 6: pb_msg_groups.GroupMessageReq
	(*groups.UpdateMemberReq)(nil), // 7: pb_msg_groups.UpdateMemberReq
	(*groups.UpdateUserReq)(nil),   // 8: pb_msg_groups.UpdateUserReq
	(*groups.CreateGroupRsp)(nil),  // 9: pb_msg_groups.CreateGroupRsp
	(*groups.DeleteGroupRsp)(nil),  // 10: pb_msg_groups.DeleteGroupRsp
	(*groups.AddMemberRsp)(nil),    // 11: pb_msg_groups.AddMemberRsp
	(*groups.RemoveMemberRsp)(nil), // 12: pb_msg_groups.RemoveMemberRsp
	(*groups.GroupMembersRsp)(nil), // 13: pb_msg_groups.GroupMembersRsp
	(*groups.MemberGroupsRsp)(nil), // 14: pb_msg_groups.MemberGroupsRsp
	(*groups.GroupMessageRsp)(nil), // 15: pb_msg_groups.GroupMessageRsp
	(*groups.UpdateMemberRsp)(nil), // 16: pb_msg_groups.UpdateMemberRsp
	(*groups.UpdateUserRsp)(nil),   // 17: pb_msg_groups.UpdateUserRsp
}
var file_pb_grpc_groups_groups_proto_depIdxs = []int32{
	0,  // 0: pb_grpc_groups.Groups.CreateGroup:input_type -> pb_msg_groups.CreateGroupReq
	1,  // 1: pb_grpc_groups.Groups.DeleteGroup:input_type -> pb_msg_groups.DeleteGroupReq
	2,  // 2: pb_grpc_groups.Groups.AddMember:input_type -> pb_msg_groups.AddMemberReq
	3,  // 3: pb_grpc_groups.Groups.RemoveMember:input_type -> pb_msg_groups.RemoveMemberReq
	4,  // 4: pb_grpc_groups.Groups.GroupMembers:input_type -> pb_msg_groups.GroupMembersReq
	5,  // 5: pb_grpc_groups.Groups.MemberGroups:input_type -> pb_msg_groups.MemberGroupsReq
	6,  // 6: pb_grpc_groups.Groups.GroupMessage:input_type -> pb_msg_groups.GroupMessageReq
	6,  // 7: pb_grpc_groups.Groups.FastMessage:input_type -> pb_msg_groups.GroupMessageReq
	7,  // 8: pb_grpc_groups.Groups.UpdateMember:input_type -> pb_msg_groups.UpdateMemberReq
	8,  // 9: pb_grpc_groups.Groups.UpdateUser:input_type -> pb_msg_groups.UpdateUserReq
	9,  // 10: pb_grpc_groups.Groups.CreateGroup:output_type -> pb_msg_groups.CreateGroupRsp
	10, // 11: pb_grpc_groups.Groups.DeleteGroup:output_type -> pb_msg_groups.DeleteGroupRsp
	11, // 12: pb_grpc_groups.Groups.AddMember:output_type -> pb_msg_groups.AddMemberRsp
	12, // 13: pb_grpc_groups.Groups.RemoveMember:output_type -> pb_msg_groups.RemoveMemberRsp
	13, // 14: pb_grpc_groups.Groups.GroupMembers:output_type -> pb_msg_groups.GroupMembersRsp
	14, // 15: pb_grpc_groups.Groups.MemberGroups:output_type -> pb_msg_groups.MemberGroupsRsp
	15, // 16: pb_grpc_groups.Groups.GroupMessage:output_type -> pb_msg_groups.GroupMessageRsp
	15, // 17: pb_grpc_groups.Groups.FastMessage:output_type -> pb_msg_groups.GroupMessageRsp
	16, // 18: pb_grpc_groups.Groups.UpdateMember:output_type -> pb_msg_groups.UpdateMemberRsp
	17, // 19: pb_grpc_groups.Groups.UpdateUser:output_type -> pb_msg_groups.UpdateUserRsp
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_groups_groups_proto_init() }
func file_pb_grpc_groups_groups_proto_init() {
	if File_pb_grpc_groups_groups_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_groups_groups_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_groups_groups_proto_goTypes,
		DependencyIndexes: file_pb_grpc_groups_groups_proto_depIdxs,
	}.Build()
	File_pb_grpc_groups_groups_proto = out.File
	file_pb_grpc_groups_groups_proto_rawDesc = nil
	file_pb_grpc_groups_groups_proto_goTypes = nil
	file_pb_grpc_groups_groups_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GroupsClient is the client API for Groups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupsClient interface {
	CreateGroup(ctx context.Context, in *groups.CreateGroupReq, opts ...grpc.CallOption) (*groups.CreateGroupRsp, error)
	DeleteGroup(ctx context.Context, in *groups.DeleteGroupReq, opts ...grpc.CallOption) (*groups.DeleteGroupRsp, error)
	AddMember(ctx context.Context, in *groups.AddMemberReq, opts ...grpc.CallOption) (*groups.AddMemberRsp, error)
	RemoveMember(ctx context.Context, in *groups.RemoveMemberReq, opts ...grpc.CallOption) (*groups.RemoveMemberRsp, error)
	GroupMembers(ctx context.Context, in *groups.GroupMembersReq, opts ...grpc.CallOption) (*groups.GroupMembersRsp, error)
	MemberGroups(ctx context.Context, in *groups.MemberGroupsReq, opts ...grpc.CallOption) (*groups.MemberGroupsRsp, error)
	GroupMessage(ctx context.Context, in *groups.GroupMessageReq, opts ...grpc.CallOption) (*groups.GroupMessageRsp, error)
	FastMessage(ctx context.Context, in *groups.GroupMessageReq, opts ...grpc.CallOption) (*groups.GroupMessageRsp, error)
	UpdateMember(ctx context.Context, in *groups.UpdateMemberReq, opts ...grpc.CallOption) (*groups.UpdateMemberRsp, error)
	UpdateUser(ctx context.Context, in *groups.UpdateUserReq, opts ...grpc.CallOption) (*groups.UpdateUserRsp, error)
}

type groupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsClient(cc grpc.ClientConnInterface) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *groups.CreateGroupReq, opts ...grpc.CallOption) (*groups.CreateGroupRsp, error) {
	out := new(groups.CreateGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) DeleteGroup(ctx context.Context, in *groups.DeleteGroupReq, opts ...grpc.CallOption) (*groups.DeleteGroupRsp, error) {
	out := new(groups.DeleteGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) AddMember(ctx context.Context, in *groups.AddMemberReq, opts ...grpc.CallOption) (*groups.AddMemberRsp, error) {
	out := new(groups.AddMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveMember(ctx context.Context, in *groups.RemoveMemberReq, opts ...grpc.CallOption) (*groups.RemoveMemberRsp, error) {
	out := new(groups.RemoveMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GroupMembers(ctx context.Context, in *groups.GroupMembersReq, opts ...grpc.CallOption) (*groups.GroupMembersRsp, error) {
	out := new(groups.GroupMembersRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/GroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) MemberGroups(ctx context.Context, in *groups.MemberGroupsReq, opts ...grpc.CallOption) (*groups.MemberGroupsRsp, error) {
	out := new(groups.MemberGroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/MemberGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GroupMessage(ctx context.Context, in *groups.GroupMessageReq, opts ...grpc.CallOption) (*groups.GroupMessageRsp, error) {
	out := new(groups.GroupMessageRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/GroupMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) FastMessage(ctx context.Context, in *groups.GroupMessageReq, opts ...grpc.CallOption) (*groups.GroupMessageRsp, error) {
	out := new(groups.GroupMessageRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/FastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) UpdateMember(ctx context.Context, in *groups.UpdateMemberReq, opts ...grpc.CallOption) (*groups.UpdateMemberRsp, error) {
	out := new(groups.UpdateMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) UpdateUser(ctx context.Context, in *groups.UpdateUserReq, opts ...grpc.CallOption) (*groups.UpdateUserRsp, error) {
	out := new(groups.UpdateUserRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_groups.Groups/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServer is the server API for Groups service.
type GroupsServer interface {
	CreateGroup(context.Context, *groups.CreateGroupReq) (*groups.CreateGroupRsp, error)
	DeleteGroup(context.Context, *groups.DeleteGroupReq) (*groups.DeleteGroupRsp, error)
	AddMember(context.Context, *groups.AddMemberReq) (*groups.AddMemberRsp, error)
	RemoveMember(context.Context, *groups.RemoveMemberReq) (*groups.RemoveMemberRsp, error)
	GroupMembers(context.Context, *groups.GroupMembersReq) (*groups.GroupMembersRsp, error)
	MemberGroups(context.Context, *groups.MemberGroupsReq) (*groups.MemberGroupsRsp, error)
	GroupMessage(context.Context, *groups.GroupMessageReq) (*groups.GroupMessageRsp, error)
	FastMessage(context.Context, *groups.GroupMessageReq) (*groups.GroupMessageRsp, error)
	UpdateMember(context.Context, *groups.UpdateMemberReq) (*groups.UpdateMemberRsp, error)
	UpdateUser(context.Context, *groups.UpdateUserReq) (*groups.UpdateUserRsp, error)
}

// UnimplementedGroupsServer can be embedded to have forward compatible implementations.
type UnimplementedGroupsServer struct {
}

func (*UnimplementedGroupsServer) CreateGroup(context.Context, *groups.CreateGroupReq) (*groups.CreateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedGroupsServer) DeleteGroup(context.Context, *groups.DeleteGroupReq) (*groups.DeleteGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedGroupsServer) AddMember(context.Context, *groups.AddMemberReq) (*groups.AddMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (*UnimplementedGroupsServer) RemoveMember(context.Context, *groups.RemoveMemberReq) (*groups.RemoveMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (*UnimplementedGroupsServer) GroupMembers(context.Context, *groups.GroupMembersReq) (*groups.GroupMembersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMembers not implemented")
}
func (*UnimplementedGroupsServer) MemberGroups(context.Context, *groups.MemberGroupsReq) (*groups.MemberGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberGroups not implemented")
}
func (*UnimplementedGroupsServer) GroupMessage(context.Context, *groups.GroupMessageReq) (*groups.GroupMessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMessage not implemented")
}
func (*UnimplementedGroupsServer) FastMessage(context.Context, *groups.GroupMessageReq) (*groups.GroupMessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastMessage not implemented")
}
func (*UnimplementedGroupsServer) UpdateMember(context.Context, *groups.UpdateMemberReq) (*groups.UpdateMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedGroupsServer) UpdateUser(context.Context, *groups.UpdateUserReq) (*groups.UpdateUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*groups.CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).DeleteGroup(ctx, req.(*groups.DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).AddMember(ctx, req.(*groups.AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.RemoveMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveMember(ctx, req.(*groups.RemoveMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.GroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/GroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GroupMembers(ctx, req.(*groups.GroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_MemberGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.MemberGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).MemberGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/MemberGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).MemberGroups(ctx, req.(*groups.MemberGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.GroupMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/GroupMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GroupMessage(ctx, req.(*groups.GroupMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_FastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.GroupMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).FastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/FastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).FastMessage(ctx, req.(*groups.GroupMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).UpdateMember(ctx, req.(*groups.UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(groups.UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_groups.Groups/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).UpdateUser(ctx, req.(*groups.UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_groups.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Groups_DeleteGroup_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Groups_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Groups_RemoveMember_Handler,
		},
		{
			MethodName: "GroupMembers",
			Handler:    _Groups_GroupMembers_Handler,
		},
		{
			MethodName: "MemberGroups",
			Handler:    _Groups_MemberGroups_Handler,
		},
		{
			MethodName: "GroupMessage",
			Handler:    _Groups_GroupMessage_Handler,
		},
		{
			MethodName: "FastMessage",
			Handler:    _Groups_FastMessage_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Groups_UpdateMember_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Groups_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/groups/groups.proto",
}
