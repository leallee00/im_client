// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/live_room/live_room.proto

package live_room

import (
	context "context"
	any1 "github.com/golang/protobuf/ptypes/any"
	live_room "github.com/leallee00/pb/pb_msg/live_room"
	pk_room "github.com/leallee00/pb/pb_msg/pk_room"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EVENT int32

const (
	EVENT_UNKNOWN       EVENT = 0
	EVENT_LIVE_START    EVENT = 1
	EVENT_LIVE_STOP     EVENT = 2
	EVENT_ENTER_ROOM    EVENT = 3
	EVENT_EXIT_ROOM     EVENT = 4
	EVENT_ROOM_TIME_OUT EVENT = 5
	EVENT_USER_TIME_OUT EVENT = 6
)

// Enum value maps for EVENT.
var (
	EVENT_name = map[int32]string{
		0: "UNKNOWN",
		1: "LIVE_START",
		2: "LIVE_STOP",
		3: "ENTER_ROOM",
		4: "EXIT_ROOM",
		5: "ROOM_TIME_OUT",
		6: "USER_TIME_OUT",
	}
	EVENT_value = map[string]int32{
		"UNKNOWN":       0,
		"LIVE_START":    1,
		"LIVE_STOP":     2,
		"ENTER_ROOM":    3,
		"EXIT_ROOM":     4,
		"ROOM_TIME_OUT": 5,
		"USER_TIME_OUT": 6,
	}
)

func (x EVENT) Enum() *EVENT {
	p := new(EVENT)
	*p = x
	return p
}

func (x EVENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVENT) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_grpc_live_room_live_room_proto_enumTypes[0].Descriptor()
}

func (EVENT) Type() protoreflect.EnumType {
	return &file_pb_grpc_live_room_live_room_proto_enumTypes[0]
}

func (x EVENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVENT.Descriptor instead.
func (EVENT) EnumDescriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{0}
}

// 三体推流回调
type TTTCallBackParamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string `protobuf:"bytes,1,opt,name=Channel,proto3" json:"Channel,omitempty"` // 房间id
	Code    int32  `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`      // 0表示成功；2表示推流失败已销毁推流；500表示连接cdn失败需要更新推流地址
	Stream  string `protobuf:"bytes,3,opt,name=Stream,proto3" json:"Stream,omitempty"`   // 推流地址
}

func (x *TTTCallBackParamReq) Reset() {
	*x = TTTCallBackParamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTTCallBackParamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTTCallBackParamReq) ProtoMessage() {}

func (x *TTTCallBackParamReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTTCallBackParamReq.ProtoReflect.Descriptor instead.
func (*TTTCallBackParamReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{0}
}

func (x *TTTCallBackParamReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *TTTCallBackParamReq) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TTTCallBackParamReq) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type AnchorInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnchorInfoReq) Reset() {
	*x = AnchorInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfoReq) ProtoMessage() {}

func (x *AnchorInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfoReq.ProtoReflect.Descriptor instead.
func (*AnchorInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{1}
}

type AnchorInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                  // ID
	Username            string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`                       // 用户名
	HeaderImageOriginal string `protobuf:"bytes,3,opt,name=HeaderImageOriginal,proto3" json:"HeaderImageOriginal,omitempty"` // 头像
	Rank                int64  `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank,omitempty"`                              // 段位
	VictoryTimes        int64  `protobuf:"varint,5,opt,name=VictoryTimes,proto3" json:"VictoryTimes,omitempty"`              // 连胜次数
	PullStreamAddress   string `protobuf:"bytes,6,opt,name=PullStreamAddress,proto3" json:"PullStreamAddress,omitempty"`     // 拉流地址
}

func (x *AnchorInfoRsp) Reset() {
	*x = AnchorInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfoRsp) ProtoMessage() {}

func (x *AnchorInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfoRsp.ProtoReflect.Descriptor instead.
func (*AnchorInfoRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{2}
}

func (x *AnchorInfoRsp) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AnchorInfoRsp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AnchorInfoRsp) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *AnchorInfoRsp) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AnchorInfoRsp) GetVictoryTimes() int64 {
	if x != nil {
		return x.VictoryTimes
	}
	return 0
}

func (x *AnchorInfoRsp) GetPullStreamAddress() string {
	if x != nil {
		return x.PullStreamAddress
	}
	return ""
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service    pb_pub.Service `protobuf:"varint,1,opt,name=service,proto3,enum=pb_pub.Service" json:"service,omitempty"` // 服务名称
	FullMethod string         `protobuf:"bytes,2,opt,name=fullMethod,proto3" json:"fullMethod,omitempty"`                // 调用路径
	HashKey    int64          `protobuf:"varint,3,opt,name=hashKey,proto3" json:"hashKey,omitempty"`                     // 哈希key
	Deadline   int64          `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`                   // 过期
	Data       *any1.Any      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                            // 请求携带
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{3}
}

func (x *Listener) GetService() pb_pub.Service {
	if x != nil {
		return x.Service
	}
	return pb_pub.Service(0)
}

func (x *Listener) GetFullMethod() string {
	if x != nil {
		return x.FullMethod
	}
	return ""
}

func (x *Listener) GetHashKey() int64 {
	if x != nil {
		return x.HashKey
	}
	return 0
}

func (x *Listener) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *Listener) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type Notice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event EVENT     `protobuf:"varint,1,opt,name=event,proto3,enum=pb_grpc_liveRoom.EVENT" json:"event,omitempty"`
	In    *any1.Any `protobuf:"bytes,2,opt,name=in,proto3" json:"in,omitempty"`
	Data  *any1.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 请求携带
}

func (x *Notice) Reset() {
	*x = Notice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notice) ProtoMessage() {}

func (x *Notice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notice.ProtoReflect.Descriptor instead.
func (*Notice) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{4}
}

func (x *Notice) GetEvent() EVENT {
	if x != nil {
		return x.Event
	}
	return EVENT_UNKNOWN
}

func (x *Notice) GetIn() *any1.Any {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Notice) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *any1.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Fields) Reset() {
	*x = Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{5}
}

func (x *Fields) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type PKLockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKLockReq) Reset() {
	*x = PKLockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKLockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKLockReq) ProtoMessage() {}

func (x *PKLockReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKLockReq.ProtoReflect.Descriptor instead.
func (*PKLockReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{6}
}

type PKLockRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKLockRsp) Reset() {
	*x = PKLockRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKLockRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKLockRsp) ProtoMessage() {}

func (x *PKLockRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKLockRsp.ProtoReflect.Descriptor instead.
func (*PKLockRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{7}
}

type PKUnlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKUnlockReq) Reset() {
	*x = PKUnlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKUnlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKUnlockReq) ProtoMessage() {}

func (x *PKUnlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKUnlockReq.ProtoReflect.Descriptor instead.
func (*PKUnlockReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{8}
}

type PKUnlockRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKUnlockRsp) Reset() {
	*x = PKUnlockRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKUnlockRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKUnlockRsp) ProtoMessage() {}

func (x *PKUnlockRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKUnlockRsp.ProtoReflect.Descriptor instead.
func (*PKUnlockRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{9}
}

type PKLockingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKLockingReq) Reset() {
	*x = PKLockingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKLockingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKLockingReq) ProtoMessage() {}

func (x *PKLockingReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKLockingReq.ProtoReflect.Descriptor instead.
func (*PKLockingReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{10}
}

type PKLockingRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKLockingRsp) Reset() {
	*x = PKLockingRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKLockingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKLockingRsp) ProtoMessage() {}

func (x *PKLockingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_live_room_live_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKLockingRsp.ProtoReflect.Descriptor instead.
func (*PKLockingRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_live_room_live_room_proto_rawDescGZIP(), []int{11}
}

var File_pb_grpc_live_room_live_room_proto protoreflect.FileDescriptor

var file_pb_grpc_live_room_live_room_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x13, 0x54, 0x54, 0x54, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x22, 0xd3, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x0b, 0x0a, 0x09, 0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a,
	0x09, 0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x4b, 0x4c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x4b, 0x4c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x2a, 0x78, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x06, 0x32, 0xec, 0x08, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x46, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4e, 0x73, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x50, 0x4b, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x06, 0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x50,
	0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x50, 0x4b, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12,
	0x4b, 0x0a, 0x09, 0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x4b, 0x4c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x09,
	0x50, 0x4b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0d, 0x50,
	0x4b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x4b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50,
	0x4b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a,
	0x0a, 0x50, 0x4b, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x47,
	0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x06, 0x50, 0x4b, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x4f, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x50, 0x4b, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x50, 0x4b, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x0f, 0x50, 0x4b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x4b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x73, 0x70, 0x12, 0x65, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6b, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x54, 0x54, 0x54,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x74, 0x6d, 0x70, 0x43, 0x42, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x54, 0x54,
	0x54, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x4a, 0x53, 0x4f, 0x4e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x13,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4a, 0x53, 0x4f,
	0x4e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x73,
	0x54, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73,
	0x70, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_grpc_live_room_live_room_proto_rawDescOnce sync.Once
	file_pb_grpc_live_room_live_room_proto_rawDescData = file_pb_grpc_live_room_live_room_proto_rawDesc
)

func file_pb_grpc_live_room_live_room_proto_rawDescGZIP() []byte {
	file_pb_grpc_live_room_live_room_proto_rawDescOnce.Do(func() {
		file_pb_grpc_live_room_live_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_grpc_live_room_live_room_proto_rawDescData)
	})
	return file_pb_grpc_live_room_live_room_proto_rawDescData
}

var file_pb_grpc_live_room_live_room_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_grpc_live_room_live_room_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_grpc_live_room_live_room_proto_goTypes = []interface{}{
	(EVENT)(0),                                    // 0: pb_grpc_liveRoom.EVENT
	(*TTTCallBackParamReq)(nil),                   // 1: pb_grpc_liveRoom.TTTCallBackParamReq
	(*AnchorInfoReq)(nil),                         // 2: pb_grpc_liveRoom.AnchorInfoReq
	(*AnchorInfoRsp)(nil),                         // 3: pb_grpc_liveRoom.AnchorInfoRsp
	(*Listener)(nil),                              // 4: pb_grpc_liveRoom.Listener
	(*Notice)(nil),                                // 5: pb_grpc_liveRoom.Notice
	(*Fields)(nil),                                // 6: pb_grpc_liveRoom.Fields
	(*PKLockReq)(nil),                             // 7: pb_grpc_liveRoom.PKLockReq
	(*PKLockRsp)(nil),                             // 8: pb_grpc_liveRoom.PKLockRsp
	(*PKUnlockReq)(nil),                           // 9: pb_grpc_liveRoom.PKUnlockReq
	(*PKUnlockRsp)(nil),                           // 10: pb_grpc_liveRoom.PKUnlockRsp
	(*PKLockingReq)(nil),                          // 11: pb_grpc_liveRoom.PKLockingReq
	(*PKLockingRsp)(nil),                          // 12: pb_grpc_liveRoom.PKLockingRsp
	(pb_pub.Service)(0),                           // 13: pb_pub.Service
	(*any1.Any)(nil),                              // 14: google.protobuf.Any
	(*pb_pub.LogonSuccessNotifyNsq)(nil),          // 15: pb_pub.LogonSuccessNotifyNsq
	(*pk_room.PKUser)(nil),                        // 16: pb_msg_pk_room.PKUser
	(*pk_room.PKMatchedNotify)(nil),               // 17: pb_msg_pk_room.PKMatchedNotify
	(*pk_room.PKPeerRefusedNotify)(nil),           // 18: pb_msg_pk_room.PKPeerRefusedNotify
	(*pk_room.PKStartNotify)(nil),                 // 19: pb_msg_pk_room.PKStartNotify
	(*pk_room.PKGameOverNotify)(nil),              // 20: pb_msg_pk_room.PKGameOverNotify
	(*pk_room.PKOverNotify)(nil),                  // 21: pb_msg_pk_room.PKOverNotify
	(*pk_room.PassivePKRefuseReq)(nil),            // 22: pb_msg_pk_room.PassivePKRefuseReq
	(*pb_pub.PKQualifyChangeNotify)(nil),          // 23: pb_pub.PKQualifyChangeNotify
	(*pk_room.CanJoinPkTournamentReq)(nil),        // 24: pb_msg_pk_room.CanJoinPkTournamentReq
	(*pb_pub.JSONCallReq)(nil),                    // 25: pb_pub.JSONCallReq
	(*live_room.SetRoomFansTop1StatusNotify)(nil), // 26: pb_msg_live_room.SetRoomFansTop1StatusNotify
	(*pb_pub.CommRsp)(nil),                        // 27: pb_pub.CommRsp
	(*pk_room.CanJoinPkTournamentRsp)(nil),        // 28: pb_msg_pk_room.CanJoinPkTournamentRsp
	(*pb_pub.JSONCallRsp)(nil),                    // 29: pb_pub.JSONCallRsp
}
var file_pb_grpc_live_room_live_room_proto_depIdxs = []int32{
	13, // 0: pb_grpc_liveRoom.Listener.service:type_name -> pb_pub.Service
	14, // 1: pb_grpc_liveRoom.Listener.data:type_name -> google.protobuf.Any
	0,  // 2: pb_grpc_liveRoom.Notice.event:type_name -> pb_grpc_liveRoom.EVENT
	14, // 3: pb_grpc_liveRoom.Notice.in:type_name -> google.protobuf.Any
	14, // 4: pb_grpc_liveRoom.Notice.data:type_name -> google.protobuf.Any
	14, // 5: pb_grpc_liveRoom.Fields.data:type_name -> google.protobuf.Any
	15, // 6: pb_grpc_liveRoom.LiveRoom.LogonSuccessNotify:input_type -> pb_pub.LogonSuccessNotifyNsq
	16, // 7: pb_grpc_liveRoom.LiveRoom.PKPeer:input_type -> pb_msg_pk_room.PKUser
	7,  // 8: pb_grpc_liveRoom.LiveRoom.PKLock:input_type -> pb_grpc_liveRoom.PKLockReq
	9,  // 9: pb_grpc_liveRoom.LiveRoom.PKUnlock:input_type -> pb_grpc_liveRoom.PKUnlockReq
	11, // 10: pb_grpc_liveRoom.LiveRoom.PKLocking:input_type -> pb_grpc_liveRoom.PKLockingReq
	17, // 11: pb_grpc_liveRoom.LiveRoom.PKMatched:input_type -> pb_msg_pk_room.PKMatchedNotify
	18, // 12: pb_grpc_liveRoom.LiveRoom.PKPeerRefused:input_type -> pb_msg_pk_room.PKPeerRefusedNotify
	19, // 13: pb_grpc_liveRoom.LiveRoom.PKStart:input_type -> pb_msg_pk_room.PKStartNotify
	20, // 14: pb_grpc_liveRoom.LiveRoom.PKGameOver:input_type -> pb_msg_pk_room.PKGameOverNotify
	21, // 15: pb_grpc_liveRoom.LiveRoom.PKOver:input_type -> pb_msg_pk_room.PKOverNotify
	22, // 16: pb_grpc_liveRoom.LiveRoom.PassivePKRefuse:input_type -> pb_msg_pk_room.PassivePKRefuseReq
	23, // 17: pb_grpc_liveRoom.LiveRoom.PKQualifyChange:input_type -> pb_pub.PKQualifyChangeNotify
	24, // 18: pb_grpc_liveRoom.LiveRoom.CanJoinPkTournament:input_type -> pb_msg_pk_room.CanJoinPkTournamentReq
	1,  // 19: pb_grpc_liveRoom.LiveRoom.TTTPushRtmpCB:input_type -> pb_grpc_liveRoom.TTTCallBackParamReq
	25, // 20: pb_grpc_liveRoom.LiveRoom.JSONCall:input_type -> pb_pub.JSONCallReq
	26, // 21: pb_grpc_liveRoom.LiveRoom.SetRoomFansTop1Status:input_type -> pb_msg_live_room.SetRoomFansTop1StatusNotify
	27, // 22: pb_grpc_liveRoom.LiveRoom.LogonSuccessNotify:output_type -> pb_pub.CommRsp
	16, // 23: pb_grpc_liveRoom.LiveRoom.PKPeer:output_type -> pb_msg_pk_room.PKUser
	8,  // 24: pb_grpc_liveRoom.LiveRoom.PKLock:output_type -> pb_grpc_liveRoom.PKLockRsp
	10, // 25: pb_grpc_liveRoom.LiveRoom.PKUnlock:output_type -> pb_grpc_liveRoom.PKUnlockRsp
	12, // 26: pb_grpc_liveRoom.LiveRoom.PKLocking:output_type -> pb_grpc_liveRoom.PKLockingRsp
	27, // 27: pb_grpc_liveRoom.LiveRoom.PKMatched:output_type -> pb_pub.CommRsp
	27, // 28: pb_grpc_liveRoom.LiveRoom.PKPeerRefused:output_type -> pb_pub.CommRsp
	27, // 29: pb_grpc_liveRoom.LiveRoom.PKStart:output_type -> pb_pub.CommRsp
	27, // 30: pb_grpc_liveRoom.LiveRoom.PKGameOver:output_type -> pb_pub.CommRsp
	27, // 31: pb_grpc_liveRoom.LiveRoom.PKOver:output_type -> pb_pub.CommRsp
	27, // 32: pb_grpc_liveRoom.LiveRoom.PassivePKRefuse:output_type -> pb_pub.CommRsp
	27, // 33: pb_grpc_liveRoom.LiveRoom.PKQualifyChange:output_type -> pb_pub.CommRsp
	28, // 34: pb_grpc_liveRoom.LiveRoom.CanJoinPkTournament:output_type -> pb_msg_pk_room.CanJoinPkTournamentRsp
	27, // 35: pb_grpc_liveRoom.LiveRoom.TTTPushRtmpCB:output_type -> pb_pub.CommRsp
	29, // 36: pb_grpc_liveRoom.LiveRoom.JSONCall:output_type -> pb_pub.JSONCallRsp
	27, // 37: pb_grpc_liveRoom.LiveRoom.SetRoomFansTop1Status:output_type -> pb_pub.CommRsp
	22, // [22:38] is the sub-list for method output_type
	6,  // [6:22] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pb_grpc_live_room_live_room_proto_init() }
func file_pb_grpc_live_room_live_room_proto_init() {
	if File_pb_grpc_live_room_live_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_grpc_live_room_live_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTTCallBackParamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKLockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKLockRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKUnlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKUnlockRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKLockingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_live_room_live_room_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKLockingRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_live_room_live_room_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_live_room_live_room_proto_goTypes,
		DependencyIndexes: file_pb_grpc_live_room_live_room_proto_depIdxs,
		EnumInfos:         file_pb_grpc_live_room_live_room_proto_enumTypes,
		MessageInfos:      file_pb_grpc_live_room_live_room_proto_msgTypes,
	}.Build()
	File_pb_grpc_live_room_live_room_proto = out.File
	file_pb_grpc_live_room_live_room_proto_rawDesc = nil
	file_pb_grpc_live_room_live_room_proto_goTypes = nil
	file_pb_grpc_live_room_live_room_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LiveRoomClient is the client API for LiveRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveRoomClient interface {
	// ALPHA 场景恢复
	LogonSuccessNotify(ctx context.Context, in *pb_pub.LogonSuccessNotifyNsq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKPeer(ctx context.Context, in *pk_room.PKUser, opts ...grpc.CallOption) (*pk_room.PKUser, error)
	PKLock(ctx context.Context, in *PKLockReq, opts ...grpc.CallOption) (*PKLockRsp, error)
	PKUnlock(ctx context.Context, in *PKUnlockReq, opts ...grpc.CallOption) (*PKUnlockRsp, error)
	PKLocking(ctx context.Context, in *PKLockingReq, opts ...grpc.CallOption) (*PKLockingRsp, error)
	PKMatched(ctx context.Context, in *pk_room.PKMatchedNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKPeerRefused(ctx context.Context, in *pk_room.PKPeerRefusedNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKStart(ctx context.Context, in *pk_room.PKStartNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKGameOver(ctx context.Context, in *pk_room.PKGameOverNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKOver(ctx context.Context, in *pk_room.PKOverNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PassivePKRefuse(ctx context.Context, in *pk_room.PassivePKRefuseReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	PKQualifyChange(ctx context.Context, in *pb_pub.PKQualifyChangeNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	CanJoinPkTournament(ctx context.Context, in *pk_room.CanJoinPkTournamentReq, opts ...grpc.CallOption) (*pk_room.CanJoinPkTournamentRsp, error)
	// 3体推流回调
	TTTPushRtmpCB(ctx context.Context, in *TTTCallBackParamReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// JSONCall, 处理使用JSON编码的消息
	JSONCall(ctx context.Context, in *pb_pub.JSONCallReq, opts ...grpc.CallOption) (*pb_pub.JSONCallRsp, error)
	SetRoomFansTop1Status(ctx context.Context, in *live_room.SetRoomFansTop1StatusNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
}

type liveRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveRoomClient(cc grpc.ClientConnInterface) LiveRoomClient {
	return &liveRoomClient{cc}
}

func (c *liveRoomClient) LogonSuccessNotify(ctx context.Context, in *pb_pub.LogonSuccessNotifyNsq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/LogonSuccessNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKPeer(ctx context.Context, in *pk_room.PKUser, opts ...grpc.CallOption) (*pk_room.PKUser, error) {
	out := new(pk_room.PKUser)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKLock(ctx context.Context, in *PKLockReq, opts ...grpc.CallOption) (*PKLockRsp, error) {
	out := new(PKLockRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKUnlock(ctx context.Context, in *PKUnlockReq, opts ...grpc.CallOption) (*PKUnlockRsp, error) {
	out := new(PKUnlockRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKLocking(ctx context.Context, in *PKLockingReq, opts ...grpc.CallOption) (*PKLockingRsp, error) {
	out := new(PKLockingRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKLocking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKMatched(ctx context.Context, in *pk_room.PKMatchedNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKMatched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKPeerRefused(ctx context.Context, in *pk_room.PKPeerRefusedNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKPeerRefused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKStart(ctx context.Context, in *pk_room.PKStartNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKGameOver(ctx context.Context, in *pk_room.PKGameOverNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKGameOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKOver(ctx context.Context, in *pk_room.PKOverNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PassivePKRefuse(ctx context.Context, in *pk_room.PassivePKRefuseReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PassivePKRefuse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) PKQualifyChange(ctx context.Context, in *pb_pub.PKQualifyChangeNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/PKQualifyChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) CanJoinPkTournament(ctx context.Context, in *pk_room.CanJoinPkTournamentReq, opts ...grpc.CallOption) (*pk_room.CanJoinPkTournamentRsp, error) {
	out := new(pk_room.CanJoinPkTournamentRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/CanJoinPkTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) TTTPushRtmpCB(ctx context.Context, in *TTTCallBackParamReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/TTTPushRtmpCB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) JSONCall(ctx context.Context, in *pb_pub.JSONCallReq, opts ...grpc.CallOption) (*pb_pub.JSONCallRsp, error) {
	out := new(pb_pub.JSONCallRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/JSONCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomClient) SetRoomFansTop1Status(ctx context.Context, in *live_room.SetRoomFansTop1StatusNotify, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_liveRoom.LiveRoom/SetRoomFansTop1Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveRoomServer is the server API for LiveRoom service.
type LiveRoomServer interface {
	// ALPHA 场景恢复
	LogonSuccessNotify(context.Context, *pb_pub.LogonSuccessNotifyNsq) (*pb_pub.CommRsp, error)
	PKPeer(context.Context, *pk_room.PKUser) (*pk_room.PKUser, error)
	PKLock(context.Context, *PKLockReq) (*PKLockRsp, error)
	PKUnlock(context.Context, *PKUnlockReq) (*PKUnlockRsp, error)
	PKLocking(context.Context, *PKLockingReq) (*PKLockingRsp, error)
	PKMatched(context.Context, *pk_room.PKMatchedNotify) (*pb_pub.CommRsp, error)
	PKPeerRefused(context.Context, *pk_room.PKPeerRefusedNotify) (*pb_pub.CommRsp, error)
	PKStart(context.Context, *pk_room.PKStartNotify) (*pb_pub.CommRsp, error)
	PKGameOver(context.Context, *pk_room.PKGameOverNotify) (*pb_pub.CommRsp, error)
	PKOver(context.Context, *pk_room.PKOverNotify) (*pb_pub.CommRsp, error)
	PassivePKRefuse(context.Context, *pk_room.PassivePKRefuseReq) (*pb_pub.CommRsp, error)
	PKQualifyChange(context.Context, *pb_pub.PKQualifyChangeNotify) (*pb_pub.CommRsp, error)
	CanJoinPkTournament(context.Context, *pk_room.CanJoinPkTournamentReq) (*pk_room.CanJoinPkTournamentRsp, error)
	// 3体推流回调
	TTTPushRtmpCB(context.Context, *TTTCallBackParamReq) (*pb_pub.CommRsp, error)
	// JSONCall, 处理使用JSON编码的消息
	JSONCall(context.Context, *pb_pub.JSONCallReq) (*pb_pub.JSONCallRsp, error)
	SetRoomFansTop1Status(context.Context, *live_room.SetRoomFansTop1StatusNotify) (*pb_pub.CommRsp, error)
}

// UnimplementedLiveRoomServer can be embedded to have forward compatible implementations.
type UnimplementedLiveRoomServer struct {
}

func (*UnimplementedLiveRoomServer) LogonSuccessNotify(context.Context, *pb_pub.LogonSuccessNotifyNsq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogonSuccessNotify not implemented")
}
func (*UnimplementedLiveRoomServer) PKPeer(context.Context, *pk_room.PKUser) (*pk_room.PKUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKPeer not implemented")
}
func (*UnimplementedLiveRoomServer) PKLock(context.Context, *PKLockReq) (*PKLockRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKLock not implemented")
}
func (*UnimplementedLiveRoomServer) PKUnlock(context.Context, *PKUnlockReq) (*PKUnlockRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKUnlock not implemented")
}
func (*UnimplementedLiveRoomServer) PKLocking(context.Context, *PKLockingReq) (*PKLockingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKLocking not implemented")
}
func (*UnimplementedLiveRoomServer) PKMatched(context.Context, *pk_room.PKMatchedNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKMatched not implemented")
}
func (*UnimplementedLiveRoomServer) PKPeerRefused(context.Context, *pk_room.PKPeerRefusedNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKPeerRefused not implemented")
}
func (*UnimplementedLiveRoomServer) PKStart(context.Context, *pk_room.PKStartNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKStart not implemented")
}
func (*UnimplementedLiveRoomServer) PKGameOver(context.Context, *pk_room.PKGameOverNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKGameOver not implemented")
}
func (*UnimplementedLiveRoomServer) PKOver(context.Context, *pk_room.PKOverNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKOver not implemented")
}
func (*UnimplementedLiveRoomServer) PassivePKRefuse(context.Context, *pk_room.PassivePKRefuseReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassivePKRefuse not implemented")
}
func (*UnimplementedLiveRoomServer) PKQualifyChange(context.Context, *pb_pub.PKQualifyChangeNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKQualifyChange not implemented")
}
func (*UnimplementedLiveRoomServer) CanJoinPkTournament(context.Context, *pk_room.CanJoinPkTournamentReq) (*pk_room.CanJoinPkTournamentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanJoinPkTournament not implemented")
}
func (*UnimplementedLiveRoomServer) TTTPushRtmpCB(context.Context, *TTTCallBackParamReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TTTPushRtmpCB not implemented")
}
func (*UnimplementedLiveRoomServer) JSONCall(context.Context, *pb_pub.JSONCallReq) (*pb_pub.JSONCallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JSONCall not implemented")
}
func (*UnimplementedLiveRoomServer) SetRoomFansTop1Status(context.Context, *live_room.SetRoomFansTop1StatusNotify) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomFansTop1Status not implemented")
}

func RegisterLiveRoomServer(s *grpc.Server, srv LiveRoomServer) {
	s.RegisterService(&_LiveRoom_serviceDesc, srv)
}

func _LiveRoom_LogonSuccessNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.LogonSuccessNotifyNsq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).LogonSuccessNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/LogonSuccessNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).LogonSuccessNotify(ctx, req.(*pb_pub.LogonSuccessNotifyNsq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKPeer(ctx, req.(*pk_room.PKUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKLockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKLock(ctx, req.(*PKLockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKUnlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKUnlock(ctx, req.(*PKUnlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKLocking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKLockingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKLocking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKLocking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKLocking(ctx, req.(*PKLockingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKMatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKMatchedNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKMatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKMatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKMatched(ctx, req.(*pk_room.PKMatchedNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKPeerRefused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKPeerRefusedNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKPeerRefused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKPeerRefused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKPeerRefused(ctx, req.(*pk_room.PKPeerRefusedNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKStartNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKStart(ctx, req.(*pk_room.PKStartNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKGameOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKGameOverNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKGameOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKGameOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKGameOver(ctx, req.(*pk_room.PKGameOverNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PKOverNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKOver(ctx, req.(*pk_room.PKOverNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PassivePKRefuse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.PassivePKRefuseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PassivePKRefuse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PassivePKRefuse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PassivePKRefuse(ctx, req.(*pk_room.PassivePKRefuseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_PKQualifyChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.PKQualifyChangeNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).PKQualifyChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/PKQualifyChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).PKQualifyChange(ctx, req.(*pb_pub.PKQualifyChangeNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_CanJoinPkTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pk_room.CanJoinPkTournamentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).CanJoinPkTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/CanJoinPkTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).CanJoinPkTournament(ctx, req.(*pk_room.CanJoinPkTournamentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_TTTPushRtmpCB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTTCallBackParamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).TTTPushRtmpCB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/TTTPushRtmpCB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).TTTPushRtmpCB(ctx, req.(*TTTCallBackParamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_JSONCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.JSONCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).JSONCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/JSONCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).JSONCall(ctx, req.(*pb_pub.JSONCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoom_SetRoomFansTop1Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(live_room.SetRoomFansTop1StatusNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomServer).SetRoomFansTop1Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_liveRoom.LiveRoom/SetRoomFansTop1Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomServer).SetRoomFansTop1Status(ctx, req.(*live_room.SetRoomFansTop1StatusNotify))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveRoom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_liveRoom.LiveRoom",
	HandlerType: (*LiveRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogonSuccessNotify",
			Handler:    _LiveRoom_LogonSuccessNotify_Handler,
		},
		{
			MethodName: "PKPeer",
			Handler:    _LiveRoom_PKPeer_Handler,
		},
		{
			MethodName: "PKLock",
			Handler:    _LiveRoom_PKLock_Handler,
		},
		{
			MethodName: "PKUnlock",
			Handler:    _LiveRoom_PKUnlock_Handler,
		},
		{
			MethodName: "PKLocking",
			Handler:    _LiveRoom_PKLocking_Handler,
		},
		{
			MethodName: "PKMatched",
			Handler:    _LiveRoom_PKMatched_Handler,
		},
		{
			MethodName: "PKPeerRefused",
			Handler:    _LiveRoom_PKPeerRefused_Handler,
		},
		{
			MethodName: "PKStart",
			Handler:    _LiveRoom_PKStart_Handler,
		},
		{
			MethodName: "PKGameOver",
			Handler:    _LiveRoom_PKGameOver_Handler,
		},
		{
			MethodName: "PKOver",
			Handler:    _LiveRoom_PKOver_Handler,
		},
		{
			MethodName: "PassivePKRefuse",
			Handler:    _LiveRoom_PassivePKRefuse_Handler,
		},
		{
			MethodName: "PKQualifyChange",
			Handler:    _LiveRoom_PKQualifyChange_Handler,
		},
		{
			MethodName: "CanJoinPkTournament",
			Handler:    _LiveRoom_CanJoinPkTournament_Handler,
		},
		{
			MethodName: "TTTPushRtmpCB",
			Handler:    _LiveRoom_TTTPushRtmpCB_Handler,
		},
		{
			MethodName: "JSONCall",
			Handler:    _LiveRoom_JSONCall_Handler,
		},
		{
			MethodName: "SetRoomFansTop1Status",
			Handler:    _LiveRoom_SetRoomFansTop1Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/live_room/live_room.proto",
}
