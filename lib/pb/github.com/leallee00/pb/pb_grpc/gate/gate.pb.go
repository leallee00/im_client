// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/gate/gate.proto

package gate

import (
	context "context"
	pub "github.com/leallee00/pb/pb_grpc/pub"
	gate "github.com/leallee00/pb/pb_msg/gate"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 进入房间通知
type UserEnterRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64          `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServiceType pb_pub.Service `protobuf:"varint,2,opt,name=serviceType,proto3,enum=pb_pub.Service" json:"serviceType,omitempty"`
	GroupId     int32          `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *UserEnterRoomNotify) Reset() {
	*x = UserEnterRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_gate_gate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEnterRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnterRoomNotify) ProtoMessage() {}

func (x *UserEnterRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_gate_gate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnterRoomNotify.ProtoReflect.Descriptor instead.
func (*UserEnterRoomNotify) Descriptor() ([]byte, []int) {
	return file_pb_grpc_gate_gate_proto_rawDescGZIP(), []int{0}
}

func (x *UserEnterRoomNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserEnterRoomNotify) GetServiceType() pb_pub.Service {
	if x != nil {
		return x.ServiceType
	}
	return pb_pub.Service(0)
}

func (x *UserEnterRoomNotify) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 离开房间通知
type UserExitRoomNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64          `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServiceType pb_pub.Service `protobuf:"varint,2,opt,name=serviceType,proto3,enum=pb_pub.Service" json:"serviceType,omitempty"`
	GroupId     int32          `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *UserExitRoomNotify) Reset() {
	*x = UserExitRoomNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_gate_gate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExitRoomNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExitRoomNotify) ProtoMessage() {}

func (x *UserExitRoomNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_gate_gate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExitRoomNotify.ProtoReflect.Descriptor instead.
func (*UserExitRoomNotify) Descriptor() ([]byte, []int) {
	return file_pb_grpc_gate_gate_proto_rawDescGZIP(), []int{1}
}

func (x *UserExitRoomNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserExitRoomNotify) GetServiceType() pb_pub.Service {
	if x != nil {
		return x.ServiceType
	}
	return pb_pub.Service(0)
}

func (x *UserExitRoomNotify) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

var File_pb_grpc_gate_gate_proto protoreflect.FileDescriptor

var file_pb_grpc_gate_gate_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x75, 0x62, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x79, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0xdc, 0x04, 0x0a, 0x04,
	0x47, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x16,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_grpc_gate_gate_proto_rawDescOnce sync.Once
	file_pb_grpc_gate_gate_proto_rawDescData = file_pb_grpc_gate_gate_proto_rawDesc
)

func file_pb_grpc_gate_gate_proto_rawDescGZIP() []byte {
	file_pb_grpc_gate_gate_proto_rawDescOnce.Do(func() {
		file_pb_grpc_gate_gate_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_grpc_gate_gate_proto_rawDescData)
	})
	return file_pb_grpc_gate_gate_proto_rawDescData
}

var file_pb_grpc_gate_gate_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pb_grpc_gate_gate_proto_goTypes = []interface{}{
	(*UserEnterRoomNotify)(nil),            // 0: pb_grpc_gate.UserEnterRoomNotify
	(*UserExitRoomNotify)(nil),             // 1: pb_grpc_gate.UserExitRoomNotify
	(pb_pub.Service)(0),                    // 2: pb_pub.Service
	(*gate.KickOffUser)(nil),               // 3: pb_msg_gate.KickOffUser
	(*pub.SendToAimUserReq)(nil),           // 4: pb_grpc_pub.SendToAimUserReq
	(*pub.SendToAimGroupReq)(nil),          // 5: pb_grpc_pub.SendToAimGroupReq
	(*pub.SendToAllUserReq)(nil),           // 6: pb_grpc_pub.SendToAllUserReq
	(*pub.SendToAllGroupReq)(nil),          // 7: pb_grpc_pub.SendToAllGroupReq
	(*pub.SendToAimClientsReq)(nil),        // 8: pb_grpc_pub.SendToAimClientsReq
	(*pb_pub.MsgReceipt)(nil),              // 9: pb_pub.MsgReceipt
	(*gate.RemoveUserFromGateRoomReq)(nil), // 10: pb_msg_gate.RemoveUserFromGateRoomReq
	(*pb_pub.PBMessage)(nil),               // 11: pb_pub.PBMessage
	(*pb_pub.CommRsp)(nil),                 // 12: pb_pub.CommRsp
}
var file_pb_grpc_gate_gate_proto_depIdxs = []int32{
	2,  // 0: pb_grpc_gate.UserEnterRoomNotify.serviceType:type_name -> pb_pub.Service
	2,  // 1: pb_grpc_gate.UserExitRoomNotify.serviceType:type_name -> pb_pub.Service
	3,  // 2: pb_grpc_gate.Gate.KickOffUser:input_type -> pb_msg_gate.KickOffUser
	4,  // 3: pb_grpc_gate.Gate.SendToAimUser:input_type -> pb_grpc_pub.SendToAimUserReq
	5,  // 4: pb_grpc_gate.Gate.SendToAimGroup:input_type -> pb_grpc_pub.SendToAimGroupReq
	6,  // 5: pb_grpc_gate.Gate.SendToAllUser:input_type -> pb_grpc_pub.SendToAllUserReq
	7,  // 6: pb_grpc_gate.Gate.SendToAllGroup:input_type -> pb_grpc_pub.SendToAllGroupReq
	8,  // 7: pb_grpc_gate.Gate.SendToAimClients:input_type -> pb_grpc_pub.SendToAimClientsReq
	9,  // 8: pb_grpc_gate.Gate.MsgReceipt:input_type -> pb_pub.MsgReceipt
	10, // 9: pb_grpc_gate.Gate.RemoveUserFromGateRoom:input_type -> pb_msg_gate.RemoveUserFromGateRoomReq
	11, // 10: pb_grpc_gate.Gate.SendMsgFromServer:input_type -> pb_pub.PBMessage
	12, // 11: pb_grpc_gate.Gate.KickOffUser:output_type -> pb_pub.CommRsp
	12, // 12: pb_grpc_gate.Gate.SendToAimUser:output_type -> pb_pub.CommRsp
	12, // 13: pb_grpc_gate.Gate.SendToAimGroup:output_type -> pb_pub.CommRsp
	12, // 14: pb_grpc_gate.Gate.SendToAllUser:output_type -> pb_pub.CommRsp
	12, // 15: pb_grpc_gate.Gate.SendToAllGroup:output_type -> pb_pub.CommRsp
	12, // 16: pb_grpc_gate.Gate.SendToAimClients:output_type -> pb_pub.CommRsp
	12, // 17: pb_grpc_gate.Gate.MsgReceipt:output_type -> pb_pub.CommRsp
	12, // 18: pb_grpc_gate.Gate.RemoveUserFromGateRoom:output_type -> pb_pub.CommRsp
	11, // 19: pb_grpc_gate.Gate.SendMsgFromServer:output_type -> pb_pub.PBMessage
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_pb_grpc_gate_gate_proto_init() }
func file_pb_grpc_gate_gate_proto_init() {
	if File_pb_grpc_gate_gate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_grpc_gate_gate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEnterRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_gate_gate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExitRoomNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_gate_gate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_gate_gate_proto_goTypes,
		DependencyIndexes: file_pb_grpc_gate_gate_proto_depIdxs,
		MessageInfos:      file_pb_grpc_gate_gate_proto_msgTypes,
	}.Build()
	File_pb_grpc_gate_gate_proto = out.File
	file_pb_grpc_gate_gate_proto_rawDesc = nil
	file_pb_grpc_gate_gate_proto_goTypes = nil
	file_pb_grpc_gate_gate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateClient interface {
	// 私聊逻辑判断
	KickOffUser(ctx context.Context, in *gate.KickOffUser, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到指定用户
	SendToAimUser(ctx context.Context, in *pub.SendToAimUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到指定群
	SendToAimGroup(ctx context.Context, in *pub.SendToAimGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到所有用户
	SendToAllUser(ctx context.Context, in *pub.SendToAllUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAllGroup(ctx context.Context, in *pub.SendToAllGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAimClients(ctx context.Context, in *pub.SendToAimClientsReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 回执消息
	MsgReceipt(ctx context.Context, in *pb_pub.MsgReceipt, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 把用户从gate上的房间移除
	RemoveUserFromGateRoom(ctx context.Context, in *gate.RemoveUserFromGateRoomReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 服务端直接发送消息
	SendMsgFromServer(ctx context.Context, in *pb_pub.PBMessage, opts ...grpc.CallOption) (*pb_pub.PBMessage, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) KickOffUser(ctx context.Context, in *gate.KickOffUser, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/KickOffUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendToAimUser(ctx context.Context, in *pub.SendToAimUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendToAimUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendToAimGroup(ctx context.Context, in *pub.SendToAimGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendToAimGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendToAllUser(ctx context.Context, in *pub.SendToAllUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendToAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendToAllGroup(ctx context.Context, in *pub.SendToAllGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendToAllGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendToAimClients(ctx context.Context, in *pub.SendToAimClientsReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendToAimClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) MsgReceipt(ctx context.Context, in *pb_pub.MsgReceipt, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/MsgReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) RemoveUserFromGateRoom(ctx context.Context, in *gate.RemoveUserFromGateRoomReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/RemoveUserFromGateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMsgFromServer(ctx context.Context, in *pb_pub.PBMessage, opts ...grpc.CallOption) (*pb_pub.PBMessage, error) {
	out := new(pb_pub.PBMessage)
	err := c.cc.Invoke(ctx, "/pb_grpc_gate.Gate/SendMsgFromServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
type GateServer interface {
	// 私聊逻辑判断
	KickOffUser(context.Context, *gate.KickOffUser) (*pb_pub.CommRsp, error)
	// 发送到指定用户
	SendToAimUser(context.Context, *pub.SendToAimUserReq) (*pb_pub.CommRsp, error)
	// 发送到指定群
	SendToAimGroup(context.Context, *pub.SendToAimGroupReq) (*pb_pub.CommRsp, error)
	// 发送到所有用户
	SendToAllUser(context.Context, *pub.SendToAllUserReq) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAllGroup(context.Context, *pub.SendToAllGroupReq) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAimClients(context.Context, *pub.SendToAimClientsReq) (*pb_pub.CommRsp, error)
	// 回执消息
	MsgReceipt(context.Context, *pb_pub.MsgReceipt) (*pb_pub.CommRsp, error)
	// 把用户从gate上的房间移除
	RemoveUserFromGateRoom(context.Context, *gate.RemoveUserFromGateRoomReq) (*pb_pub.CommRsp, error)
	// 服务端直接发送消息
	SendMsgFromServer(context.Context, *pb_pub.PBMessage) (*pb_pub.PBMessage, error)
}

// UnimplementedGateServer can be embedded to have forward compatible implementations.
type UnimplementedGateServer struct {
}

func (*UnimplementedGateServer) KickOffUser(context.Context, *gate.KickOffUser) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOffUser not implemented")
}
func (*UnimplementedGateServer) SendToAimUser(context.Context, *pub.SendToAimUserReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAimUser not implemented")
}
func (*UnimplementedGateServer) SendToAimGroup(context.Context, *pub.SendToAimGroupReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAimGroup not implemented")
}
func (*UnimplementedGateServer) SendToAllUser(context.Context, *pub.SendToAllUserReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAllUser not implemented")
}
func (*UnimplementedGateServer) SendToAllGroup(context.Context, *pub.SendToAllGroupReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAllGroup not implemented")
}
func (*UnimplementedGateServer) SendToAimClients(context.Context, *pub.SendToAimClientsReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAimClients not implemented")
}
func (*UnimplementedGateServer) MsgReceipt(context.Context, *pb_pub.MsgReceipt) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgReceipt not implemented")
}
func (*UnimplementedGateServer) RemoveUserFromGateRoom(context.Context, *gate.RemoveUserFromGateRoomReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromGateRoom not implemented")
}
func (*UnimplementedGateServer) SendMsgFromServer(context.Context, *pb_pub.PBMessage) (*pb_pub.PBMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgFromServer not implemented")
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_KickOffUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gate.KickOffUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).KickOffUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/KickOffUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).KickOffUser(ctx, req.(*gate.KickOffUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendToAimUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAimUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendToAimUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendToAimUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendToAimUser(ctx, req.(*pub.SendToAimUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendToAimGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAimGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendToAimGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendToAimGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendToAimGroup(ctx, req.(*pub.SendToAimGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendToAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAllUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendToAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendToAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendToAllUser(ctx, req.(*pub.SendToAllUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendToAllGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAllGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendToAllGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendToAllGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendToAllGroup(ctx, req.(*pub.SendToAllGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendToAimClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAimClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendToAimClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendToAimClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendToAimClients(ctx, req.(*pub.SendToAimClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_MsgReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.MsgReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).MsgReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/MsgReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).MsgReceipt(ctx, req.(*pb_pub.MsgReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_RemoveUserFromGateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gate.RemoveUserFromGateRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).RemoveUserFromGateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/RemoveUserFromGateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).RemoveUserFromGateRoom(ctx, req.(*gate.RemoveUserFromGateRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMsgFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.PBMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMsgFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_gate.Gate/SendMsgFromServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMsgFromServer(ctx, req.(*pb_pub.PBMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_gate.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickOffUser",
			Handler:    _Gate_KickOffUser_Handler,
		},
		{
			MethodName: "SendToAimUser",
			Handler:    _Gate_SendToAimUser_Handler,
		},
		{
			MethodName: "SendToAimGroup",
			Handler:    _Gate_SendToAimGroup_Handler,
		},
		{
			MethodName: "SendToAllUser",
			Handler:    _Gate_SendToAllUser_Handler,
		},
		{
			MethodName: "SendToAllGroup",
			Handler:    _Gate_SendToAllGroup_Handler,
		},
		{
			MethodName: "SendToAimClients",
			Handler:    _Gate_SendToAimClients_Handler,
		},
		{
			MethodName: "MsgReceipt",
			Handler:    _Gate_MsgReceipt_Handler,
		},
		{
			MethodName: "RemoveUserFromGateRoom",
			Handler:    _Gate_RemoveUserFromGateRoom_Handler,
		},
		{
			MethodName: "SendMsgFromServer",
			Handler:    _Gate_SendMsgFromServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/gate/gate.proto",
}
