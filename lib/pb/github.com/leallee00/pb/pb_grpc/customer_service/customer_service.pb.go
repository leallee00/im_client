// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/customer_service/customer_service.proto

package customer_service

import (
	context "context"
	customer_service "github.com/leallee00/pb/pb_msg/customer_service"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_customer_service_customer_service_proto protoreflect.FileDescriptor

var file_pb_grpc_customer_service_customer_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x11, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xa4,
	0x0d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x66, 0x75, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x66, 0x75, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x66, 0x75,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x0d, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x59, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x08, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x4b, 0x65, 0x66, 0x75, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x73, 0x70, 0x12,
	0x5c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x12, 0x26, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x66, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x73, 0x70, 0x12, 0x5c, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x12, 0x26, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x73, 0x70,
	0x12, 0x56, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x66, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x66, 0x75, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x66, 0x75, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x6b, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x6b, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x73, 0x70, 0x12, 0x65,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x29, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66,
	0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x66, 0x75, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x73, 0x70, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_pb_grpc_customer_service_customer_service_proto_goTypes = []interface{}{
	(*customer_service.KefuMessage)(nil),        // 0: pb_msg_customer_service.KefuMessage
	(*customer_service.KefuReceipt)(nil),        // 1: pb_msg_customer_service.KefuReceipt
	(*customer_service.AnswerReq)(nil),          // 2: pb_msg_customer_service.AnswerReq
	(*customer_service.FetchWaitCustomers)(nil), // 3: pb_msg_customer_service.FetchWaitCustomers
	(*customer_service.HistoriesReq)(nil),       // 4: pb_msg_customer_service.HistoriesReq
	(*customer_service.SessionsReq)(nil),        // 5: pb_msg_customer_service.SessionsReq
	(*customer_service.DeleteSessionReq)(nil),   // 6: pb_msg_customer_service.DeleteSessionReq
	(*customer_service.AddKefuReq)(nil),         // 7: pb_msg_customer_service.AddKefuReq
	(*customer_service.UpdateKefuReq)(nil),      // 8: pb_msg_customer_service.UpdateKefuReq
	(*customer_service.DeleteKefuReq)(nil),      // 9: pb_msg_customer_service.DeleteKefuReq
	(*customer_service.GetKefuReq)(nil),         // 10: pb_msg_customer_service.GetKefuReq
	(*customer_service.GetKefusReq)(nil),        // 11: pb_msg_customer_service.GetKefusReq
	(*customer_service.GetKefuRolesReq)(nil),    // 12: pb_msg_customer_service.GetKefuRolesReq
	(*customer_service.AddKefuGroupReq)(nil),    // 13: pb_msg_customer_service.AddKefuGroupReq
	(*customer_service.UpdateKefuGroupReq)(nil), // 14: pb_msg_customer_service.UpdateKefuGroupReq
	(*customer_service.DeleteKefuGroupReq)(nil), // 15: pb_msg_customer_service.DeleteKefuGroupReq
	(*customer_service.GetKefuGroupReq)(nil),    // 16: pb_msg_customer_service.GetKefuGroupReq
	(*customer_service.GetKefuGroupsReq)(nil),   // 17: pb_msg_customer_service.GetKefuGroupsReq
	(*pb_pub.CommRsp)(nil),                      // 18: pb_pub.CommRsp
	(*customer_service.AnswerRsp)(nil),          // 19: pb_msg_customer_service.AnswerRsp
	(*customer_service.WaitCustomers)(nil),      // 20: pb_msg_customer_service.WaitCustomers
	(*customer_service.HistoriesRsp)(nil),       // 21: pb_msg_customer_service.HistoriesRsp
	(*customer_service.SessionsRsp)(nil),        // 22: pb_msg_customer_service.SessionsRsp
	(*customer_service.DeleteSessionRsp)(nil),   // 23: pb_msg_customer_service.DeleteSessionRsp
	(*customer_service.AddKefuRsp)(nil),         // 24: pb_msg_customer_service.AddKefuRsp
	(*customer_service.UpdateKefuRsp)(nil),      // 25: pb_msg_customer_service.UpdateKefuRsp
	(*customer_service.DeleteKefuRsp)(nil),      // 26: pb_msg_customer_service.DeleteKefuRsp
	(*customer_service.GetKefuRsp)(nil),         // 27: pb_msg_customer_service.GetKefuRsp
	(*customer_service.GetKefusRsp)(nil),        // 28: pb_msg_customer_service.GetKefusRsp
	(*customer_service.GetKefuRolesRsp)(nil),    // 29: pb_msg_customer_service.GetKefuRolesRsp
	(*customer_service.AddKefuGroupRsp)(nil),    // 30: pb_msg_customer_service.AddKefuGroupRsp
	(*customer_service.UpdateKefuGroupRsp)(nil), // 31: pb_msg_customer_service.UpdateKefuGroupRsp
	(*customer_service.DeleteKefuGroupRsp)(nil), // 32: pb_msg_customer_service.DeleteKefuGroupRsp
	(*customer_service.GetKefuGroupRsp)(nil),    // 33: pb_msg_customer_service.GetKefuGroupRsp
	(*customer_service.GetKefuGroupsRsp)(nil),   // 34: pb_msg_customer_service.GetKefuGroupsRsp
}
var file_pb_grpc_customer_service_customer_service_proto_depIdxs = []int32{
	0,  // 0: pb_grpc_customer_service.CustomerService.Chat:input_type -> pb_msg_customer_service.KefuMessage
	1,  // 1: pb_grpc_customer_service.CustomerService.Receipt:input_type -> pb_msg_customer_service.KefuReceipt
	2,  // 2: pb_grpc_customer_service.CustomerService.Answer:input_type -> pb_msg_customer_service.AnswerReq
	3,  // 3: pb_grpc_customer_service.CustomerService.FetchWaitList:input_type -> pb_msg_customer_service.FetchWaitCustomers
	4,  // 4: pb_grpc_customer_service.CustomerService.Histories:input_type -> pb_msg_customer_service.HistoriesReq
	5,  // 5: pb_grpc_customer_service.CustomerService.Sessions:input_type -> pb_msg_customer_service.SessionsReq
	6,  // 6: pb_grpc_customer_service.CustomerService.DeleteSession:input_type -> pb_msg_customer_service.DeleteSessionReq
	7,  // 7: pb_grpc_customer_service.CustomerService.AddKefu:input_type -> pb_msg_customer_service.AddKefuReq
	8,  // 8: pb_grpc_customer_service.CustomerService.UpdateKefu:input_type -> pb_msg_customer_service.UpdateKefuReq
	9,  // 9: pb_grpc_customer_service.CustomerService.DeleteKefu:input_type -> pb_msg_customer_service.DeleteKefuReq
	10, // 10: pb_grpc_customer_service.CustomerService.GetKefu:input_type -> pb_msg_customer_service.GetKefuReq
	11, // 11: pb_grpc_customer_service.CustomerService.GetKefus:input_type -> pb_msg_customer_service.GetKefusReq
	12, // 12: pb_grpc_customer_service.CustomerService.GetKefuRoles:input_type -> pb_msg_customer_service.GetKefuRolesReq
	13, // 13: pb_grpc_customer_service.CustomerService.AddKefuGroup:input_type -> pb_msg_customer_service.AddKefuGroupReq
	14, // 14: pb_grpc_customer_service.CustomerService.UpdateKefuGroup:input_type -> pb_msg_customer_service.UpdateKefuGroupReq
	15, // 15: pb_grpc_customer_service.CustomerService.DeleteKefuGroup:input_type -> pb_msg_customer_service.DeleteKefuGroupReq
	16, // 16: pb_grpc_customer_service.CustomerService.GetKefuGroup:input_type -> pb_msg_customer_service.GetKefuGroupReq
	17, // 17: pb_grpc_customer_service.CustomerService.GetKefuGroups:input_type -> pb_msg_customer_service.GetKefuGroupsReq
	1,  // 18: pb_grpc_customer_service.CustomerService.Chat:output_type -> pb_msg_customer_service.KefuReceipt
	18, // 19: pb_grpc_customer_service.CustomerService.Receipt:output_type -> pb_pub.CommRsp
	19, // 20: pb_grpc_customer_service.CustomerService.Answer:output_type -> pb_msg_customer_service.AnswerRsp
	20, // 21: pb_grpc_customer_service.CustomerService.FetchWaitList:output_type -> pb_msg_customer_service.WaitCustomers
	21, // 22: pb_grpc_customer_service.CustomerService.Histories:output_type -> pb_msg_customer_service.HistoriesRsp
	22, // 23: pb_grpc_customer_service.CustomerService.Sessions:output_type -> pb_msg_customer_service.SessionsRsp
	23, // 24: pb_grpc_customer_service.CustomerService.DeleteSession:output_type -> pb_msg_customer_service.DeleteSessionRsp
	24, // 25: pb_grpc_customer_service.CustomerService.AddKefu:output_type -> pb_msg_customer_service.AddKefuRsp
	25, // 26: pb_grpc_customer_service.CustomerService.UpdateKefu:output_type -> pb_msg_customer_service.UpdateKefuRsp
	26, // 27: pb_grpc_customer_service.CustomerService.DeleteKefu:output_type -> pb_msg_customer_service.DeleteKefuRsp
	27, // 28: pb_grpc_customer_service.CustomerService.GetKefu:output_type -> pb_msg_customer_service.GetKefuRsp
	28, // 29: pb_grpc_customer_service.CustomerService.GetKefus:output_type -> pb_msg_customer_service.GetKefusRsp
	29, // 30: pb_grpc_customer_service.CustomerService.GetKefuRoles:output_type -> pb_msg_customer_service.GetKefuRolesRsp
	30, // 31: pb_grpc_customer_service.CustomerService.AddKefuGroup:output_type -> pb_msg_customer_service.AddKefuGroupRsp
	31, // 32: pb_grpc_customer_service.CustomerService.UpdateKefuGroup:output_type -> pb_msg_customer_service.UpdateKefuGroupRsp
	32, // 33: pb_grpc_customer_service.CustomerService.DeleteKefuGroup:output_type -> pb_msg_customer_service.DeleteKefuGroupRsp
	33, // 34: pb_grpc_customer_service.CustomerService.GetKefuGroup:output_type -> pb_msg_customer_service.GetKefuGroupRsp
	34, // 35: pb_grpc_customer_service.CustomerService.GetKefuGroups:output_type -> pb_msg_customer_service.GetKefuGroupsRsp
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_customer_service_customer_service_proto_init() }
func file_pb_grpc_customer_service_customer_service_proto_init() {
	if File_pb_grpc_customer_service_customer_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_customer_service_customer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_customer_service_customer_service_proto_goTypes,
		DependencyIndexes: file_pb_grpc_customer_service_customer_service_proto_depIdxs,
	}.Build()
	File_pb_grpc_customer_service_customer_service_proto = out.File
	file_pb_grpc_customer_service_customer_service_proto_rawDesc = nil
	file_pb_grpc_customer_service_customer_service_proto_goTypes = nil
	file_pb_grpc_customer_service_customer_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// 聊天
	Chat(ctx context.Context, in *customer_service.KefuMessage, opts ...grpc.CallOption) (*customer_service.KefuReceipt, error)
	// 回执
	Receipt(ctx context.Context, in *customer_service.KefuReceipt, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 客服接入客户
	Answer(ctx context.Context, in *customer_service.AnswerReq, opts ...grpc.CallOption) (*customer_service.AnswerRsp, error)
	// 获取待接入列表
	FetchWaitList(ctx context.Context, in *customer_service.FetchWaitCustomers, opts ...grpc.CallOption) (*customer_service.WaitCustomers, error)
	// 获取历史消息
	Histories(ctx context.Context, in *customer_service.HistoriesReq, opts ...grpc.CallOption) (*customer_service.HistoriesRsp, error)
	// 获取会话列表
	Sessions(ctx context.Context, in *customer_service.SessionsReq, opts ...grpc.CallOption) (*customer_service.SessionsRsp, error)
	// 客服删除一个会话
	DeleteSession(ctx context.Context, in *customer_service.DeleteSessionReq, opts ...grpc.CallOption) (*customer_service.DeleteSessionRsp, error)
	// 添加一个客服
	AddKefu(ctx context.Context, in *customer_service.AddKefuReq, opts ...grpc.CallOption) (*customer_service.AddKefuRsp, error)
	// 更新一个客服
	UpdateKefu(ctx context.Context, in *customer_service.UpdateKefuReq, opts ...grpc.CallOption) (*customer_service.UpdateKefuRsp, error)
	// 删除一个客服
	DeleteKefu(ctx context.Context, in *customer_service.DeleteKefuReq, opts ...grpc.CallOption) (*customer_service.DeleteKefuRsp, error)
	// 获取一个客服
	GetKefu(ctx context.Context, in *customer_service.GetKefuReq, opts ...grpc.CallOption) (*customer_service.GetKefuRsp, error)
	// 获取指定客服群的全部客服
	GetKefus(ctx context.Context, in *customer_service.GetKefusReq, opts ...grpc.CallOption) (*customer_service.GetKefusRsp, error)
	// 获取一个用户的全部客服身份
	GetKefuRoles(ctx context.Context, in *customer_service.GetKefuRolesReq, opts ...grpc.CallOption) (*customer_service.GetKefuRolesRsp, error)
	// 添加一个客服群
	AddKefuGroup(ctx context.Context, in *customer_service.AddKefuGroupReq, opts ...grpc.CallOption) (*customer_service.AddKefuGroupRsp, error)
	// 更新一个客服群
	UpdateKefuGroup(ctx context.Context, in *customer_service.UpdateKefuGroupReq, opts ...grpc.CallOption) (*customer_service.UpdateKefuGroupRsp, error)
	// 删除一个客服群
	DeleteKefuGroup(ctx context.Context, in *customer_service.DeleteKefuGroupReq, opts ...grpc.CallOption) (*customer_service.DeleteKefuGroupRsp, error)
	// 获取一个客服群
	GetKefuGroup(ctx context.Context, in *customer_service.GetKefuGroupReq, opts ...grpc.CallOption) (*customer_service.GetKefuGroupRsp, error)
	// 获取app的全部客服
	GetKefuGroups(ctx context.Context, in *customer_service.GetKefuGroupsReq, opts ...grpc.CallOption) (*customer_service.GetKefuGroupsRsp, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Chat(ctx context.Context, in *customer_service.KefuMessage, opts ...grpc.CallOption) (*customer_service.KefuReceipt, error) {
	out := new(customer_service.KefuReceipt)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Receipt(ctx context.Context, in *customer_service.KefuReceipt, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/Receipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Answer(ctx context.Context, in *customer_service.AnswerReq, opts ...grpc.CallOption) (*customer_service.AnswerRsp, error) {
	out := new(customer_service.AnswerRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/Answer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FetchWaitList(ctx context.Context, in *customer_service.FetchWaitCustomers, opts ...grpc.CallOption) (*customer_service.WaitCustomers, error) {
	out := new(customer_service.WaitCustomers)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/FetchWaitList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Histories(ctx context.Context, in *customer_service.HistoriesReq, opts ...grpc.CallOption) (*customer_service.HistoriesRsp, error) {
	out := new(customer_service.HistoriesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/Histories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Sessions(ctx context.Context, in *customer_service.SessionsReq, opts ...grpc.CallOption) (*customer_service.SessionsRsp, error) {
	out := new(customer_service.SessionsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteSession(ctx context.Context, in *customer_service.DeleteSessionReq, opts ...grpc.CallOption) (*customer_service.DeleteSessionRsp, error) {
	out := new(customer_service.DeleteSessionRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddKefu(ctx context.Context, in *customer_service.AddKefuReq, opts ...grpc.CallOption) (*customer_service.AddKefuRsp, error) {
	out := new(customer_service.AddKefuRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/AddKefu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateKefu(ctx context.Context, in *customer_service.UpdateKefuReq, opts ...grpc.CallOption) (*customer_service.UpdateKefuRsp, error) {
	out := new(customer_service.UpdateKefuRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/UpdateKefu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteKefu(ctx context.Context, in *customer_service.DeleteKefuReq, opts ...grpc.CallOption) (*customer_service.DeleteKefuRsp, error) {
	out := new(customer_service.DeleteKefuRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/DeleteKefu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetKefu(ctx context.Context, in *customer_service.GetKefuReq, opts ...grpc.CallOption) (*customer_service.GetKefuRsp, error) {
	out := new(customer_service.GetKefuRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/GetKefu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetKefus(ctx context.Context, in *customer_service.GetKefusReq, opts ...grpc.CallOption) (*customer_service.GetKefusRsp, error) {
	out := new(customer_service.GetKefusRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/GetKefus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetKefuRoles(ctx context.Context, in *customer_service.GetKefuRolesReq, opts ...grpc.CallOption) (*customer_service.GetKefuRolesRsp, error) {
	out := new(customer_service.GetKefuRolesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/GetKefuRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddKefuGroup(ctx context.Context, in *customer_service.AddKefuGroupReq, opts ...grpc.CallOption) (*customer_service.AddKefuGroupRsp, error) {
	out := new(customer_service.AddKefuGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/AddKefuGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateKefuGroup(ctx context.Context, in *customer_service.UpdateKefuGroupReq, opts ...grpc.CallOption) (*customer_service.UpdateKefuGroupRsp, error) {
	out := new(customer_service.UpdateKefuGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/UpdateKefuGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteKefuGroup(ctx context.Context, in *customer_service.DeleteKefuGroupReq, opts ...grpc.CallOption) (*customer_service.DeleteKefuGroupRsp, error) {
	out := new(customer_service.DeleteKefuGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/DeleteKefuGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetKefuGroup(ctx context.Context, in *customer_service.GetKefuGroupReq, opts ...grpc.CallOption) (*customer_service.GetKefuGroupRsp, error) {
	out := new(customer_service.GetKefuGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/GetKefuGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetKefuGroups(ctx context.Context, in *customer_service.GetKefuGroupsReq, opts ...grpc.CallOption) (*customer_service.GetKefuGroupsRsp, error) {
	out := new(customer_service.GetKefuGroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_customer_service.CustomerService/GetKefuGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// 聊天
	Chat(context.Context, *customer_service.KefuMessage) (*customer_service.KefuReceipt, error)
	// 回执
	Receipt(context.Context, *customer_service.KefuReceipt) (*pb_pub.CommRsp, error)
	// 客服接入客户
	Answer(context.Context, *customer_service.AnswerReq) (*customer_service.AnswerRsp, error)
	// 获取待接入列表
	FetchWaitList(context.Context, *customer_service.FetchWaitCustomers) (*customer_service.WaitCustomers, error)
	// 获取历史消息
	Histories(context.Context, *customer_service.HistoriesReq) (*customer_service.HistoriesRsp, error)
	// 获取会话列表
	Sessions(context.Context, *customer_service.SessionsReq) (*customer_service.SessionsRsp, error)
	// 客服删除一个会话
	DeleteSession(context.Context, *customer_service.DeleteSessionReq) (*customer_service.DeleteSessionRsp, error)
	// 添加一个客服
	AddKefu(context.Context, *customer_service.AddKefuReq) (*customer_service.AddKefuRsp, error)
	// 更新一个客服
	UpdateKefu(context.Context, *customer_service.UpdateKefuReq) (*customer_service.UpdateKefuRsp, error)
	// 删除一个客服
	DeleteKefu(context.Context, *customer_service.DeleteKefuReq) (*customer_service.DeleteKefuRsp, error)
	// 获取一个客服
	GetKefu(context.Context, *customer_service.GetKefuReq) (*customer_service.GetKefuRsp, error)
	// 获取指定客服群的全部客服
	GetKefus(context.Context, *customer_service.GetKefusReq) (*customer_service.GetKefusRsp, error)
	// 获取一个用户的全部客服身份
	GetKefuRoles(context.Context, *customer_service.GetKefuRolesReq) (*customer_service.GetKefuRolesRsp, error)
	// 添加一个客服群
	AddKefuGroup(context.Context, *customer_service.AddKefuGroupReq) (*customer_service.AddKefuGroupRsp, error)
	// 更新一个客服群
	UpdateKefuGroup(context.Context, *customer_service.UpdateKefuGroupReq) (*customer_service.UpdateKefuGroupRsp, error)
	// 删除一个客服群
	DeleteKefuGroup(context.Context, *customer_service.DeleteKefuGroupReq) (*customer_service.DeleteKefuGroupRsp, error)
	// 获取一个客服群
	GetKefuGroup(context.Context, *customer_service.GetKefuGroupReq) (*customer_service.GetKefuGroupRsp, error)
	// 获取app的全部客服
	GetKefuGroups(context.Context, *customer_service.GetKefuGroupsReq) (*customer_service.GetKefuGroupsRsp, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) Chat(context.Context, *customer_service.KefuMessage) (*customer_service.KefuReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (*UnimplementedCustomerServiceServer) Receipt(context.Context, *customer_service.KefuReceipt) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receipt not implemented")
}
func (*UnimplementedCustomerServiceServer) Answer(context.Context, *customer_service.AnswerReq) (*customer_service.AnswerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (*UnimplementedCustomerServiceServer) FetchWaitList(context.Context, *customer_service.FetchWaitCustomers) (*customer_service.WaitCustomers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchWaitList not implemented")
}
func (*UnimplementedCustomerServiceServer) Histories(context.Context, *customer_service.HistoriesReq) (*customer_service.HistoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Histories not implemented")
}
func (*UnimplementedCustomerServiceServer) Sessions(context.Context, *customer_service.SessionsReq) (*customer_service.SessionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (*UnimplementedCustomerServiceServer) DeleteSession(context.Context, *customer_service.DeleteSessionReq) (*customer_service.DeleteSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedCustomerServiceServer) AddKefu(context.Context, *customer_service.AddKefuReq) (*customer_service.AddKefuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKefu not implemented")
}
func (*UnimplementedCustomerServiceServer) UpdateKefu(context.Context, *customer_service.UpdateKefuReq) (*customer_service.UpdateKefuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKefu not implemented")
}
func (*UnimplementedCustomerServiceServer) DeleteKefu(context.Context, *customer_service.DeleteKefuReq) (*customer_service.DeleteKefuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKefu not implemented")
}
func (*UnimplementedCustomerServiceServer) GetKefu(context.Context, *customer_service.GetKefuReq) (*customer_service.GetKefuRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKefu not implemented")
}
func (*UnimplementedCustomerServiceServer) GetKefus(context.Context, *customer_service.GetKefusReq) (*customer_service.GetKefusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKefus not implemented")
}
func (*UnimplementedCustomerServiceServer) GetKefuRoles(context.Context, *customer_service.GetKefuRolesReq) (*customer_service.GetKefuRolesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKefuRoles not implemented")
}
func (*UnimplementedCustomerServiceServer) AddKefuGroup(context.Context, *customer_service.AddKefuGroupReq) (*customer_service.AddKefuGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKefuGroup not implemented")
}
func (*UnimplementedCustomerServiceServer) UpdateKefuGroup(context.Context, *customer_service.UpdateKefuGroupReq) (*customer_service.UpdateKefuGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKefuGroup not implemented")
}
func (*UnimplementedCustomerServiceServer) DeleteKefuGroup(context.Context, *customer_service.DeleteKefuGroupReq) (*customer_service.DeleteKefuGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKefuGroup not implemented")
}
func (*UnimplementedCustomerServiceServer) GetKefuGroup(context.Context, *customer_service.GetKefuGroupReq) (*customer_service.GetKefuGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKefuGroup not implemented")
}
func (*UnimplementedCustomerServiceServer) GetKefuGroups(context.Context, *customer_service.GetKefuGroupsReq) (*customer_service.GetKefuGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKefuGroups not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.KefuMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Chat(ctx, req.(*customer_service.KefuMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Receipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.KefuReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Receipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/Receipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Receipt(ctx, req.(*customer_service.KefuReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.AnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/Answer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Answer(ctx, req.(*customer_service.AnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FetchWaitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.FetchWaitCustomers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).FetchWaitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/FetchWaitList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).FetchWaitList(ctx, req.(*customer_service.FetchWaitCustomers))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Histories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.HistoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Histories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/Histories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Histories(ctx, req.(*customer_service.HistoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.SessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Sessions(ctx, req.(*customer_service.SessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.DeleteSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteSession(ctx, req.(*customer_service.DeleteSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddKefu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.AddKefuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddKefu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/AddKefu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddKefu(ctx, req.(*customer_service.AddKefuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateKefu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.UpdateKefuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateKefu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/UpdateKefu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateKefu(ctx, req.(*customer_service.UpdateKefuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteKefu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.DeleteKefuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteKefu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/DeleteKefu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteKefu(ctx, req.(*customer_service.DeleteKefuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetKefu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.GetKefuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetKefu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/GetKefu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetKefu(ctx, req.(*customer_service.GetKefuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetKefus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.GetKefusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetKefus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/GetKefus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetKefus(ctx, req.(*customer_service.GetKefusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetKefuRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.GetKefuRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetKefuRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/GetKefuRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetKefuRoles(ctx, req.(*customer_service.GetKefuRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddKefuGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.AddKefuGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddKefuGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/AddKefuGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddKefuGroup(ctx, req.(*customer_service.AddKefuGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateKefuGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.UpdateKefuGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateKefuGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/UpdateKefuGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateKefuGroup(ctx, req.(*customer_service.UpdateKefuGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteKefuGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.DeleteKefuGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteKefuGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/DeleteKefuGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteKefuGroup(ctx, req.(*customer_service.DeleteKefuGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetKefuGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.GetKefuGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetKefuGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/GetKefuGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetKefuGroup(ctx, req.(*customer_service.GetKefuGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetKefuGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer_service.GetKefuGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetKefuGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_customer_service.CustomerService/GetKefuGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetKefuGroups(ctx, req.(*customer_service.GetKefuGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_customer_service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _CustomerService_Chat_Handler,
		},
		{
			MethodName: "Receipt",
			Handler:    _CustomerService_Receipt_Handler,
		},
		{
			MethodName: "Answer",
			Handler:    _CustomerService_Answer_Handler,
		},
		{
			MethodName: "FetchWaitList",
			Handler:    _CustomerService_FetchWaitList_Handler,
		},
		{
			MethodName: "Histories",
			Handler:    _CustomerService_Histories_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _CustomerService_Sessions_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _CustomerService_DeleteSession_Handler,
		},
		{
			MethodName: "AddKefu",
			Handler:    _CustomerService_AddKefu_Handler,
		},
		{
			MethodName: "UpdateKefu",
			Handler:    _CustomerService_UpdateKefu_Handler,
		},
		{
			MethodName: "DeleteKefu",
			Handler:    _CustomerService_DeleteKefu_Handler,
		},
		{
			MethodName: "GetKefu",
			Handler:    _CustomerService_GetKefu_Handler,
		},
		{
			MethodName: "GetKefus",
			Handler:    _CustomerService_GetKefus_Handler,
		},
		{
			MethodName: "GetKefuRoles",
			Handler:    _CustomerService_GetKefuRoles_Handler,
		},
		{
			MethodName: "AddKefuGroup",
			Handler:    _CustomerService_AddKefuGroup_Handler,
		},
		{
			MethodName: "UpdateKefuGroup",
			Handler:    _CustomerService_UpdateKefuGroup_Handler,
		},
		{
			MethodName: "DeleteKefuGroup",
			Handler:    _CustomerService_DeleteKefuGroup_Handler,
		},
		{
			MethodName: "GetKefuGroup",
			Handler:    _CustomerService_GetKefuGroup_Handler,
		},
		{
			MethodName: "GetKefuGroups",
			Handler:    _CustomerService_GetKefuGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/customer_service/customer_service.proto",
}
