// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/msg_analyze/msg_analyze.proto

package msg_analyze

import (
	context "context"
	msg_analyze "github.com/leallee00/pb/pb_msg/msg_analyze"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_msg_analyze_msg_analyze_proto protoreflect.FileDescriptor

var file_pb_grpc_msg_analyze_msg_analyze_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x1a, 0x24, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2f,
	0x6d, 0x73, 0x67, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xf4, 0x02, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x12, 0x5e, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73,
	0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x73,
	0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6d,
	0x73, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30,
	0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x73, 0x67, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pb_grpc_msg_analyze_msg_analyze_proto_goTypes = []interface{}{
	(*msg_analyze.ReadMsgHistoryReq)(nil), // 0: pb_msg_msgAnalyze.ReadMsgHistoryReq
	(*msg_analyze.ChatSessionsReq)(nil),   // 1: pb_msg_msgAnalyze.ChatSessionsReq
	(*msg_analyze.ChatHistoriesReq)(nil),  // 2: pb_msg_msgAnalyze.ChatHistoriesReq
	(*msg_analyze.ChatStatsReq)(nil),      // 3: pb_msg_msgAnalyze.ChatStatsReq
	(*msg_analyze.ReadMsgHistoryRsp)(nil), // 4: pb_msg_msgAnalyze.ReadMsgHistoryRsp
	(*msg_analyze.ChatSessionsRsp)(nil),   // 5: pb_msg_msgAnalyze.ChatSessionsRsp
	(*msg_analyze.ChatHistoriesRsp)(nil),  // 6: pb_msg_msgAnalyze.ChatHistoriesRsp
	(*msg_analyze.ChatStatsRsp)(nil),      // 7: pb_msg_msgAnalyze.ChatStatsRsp
}
var file_pb_grpc_msg_analyze_msg_analyze_proto_depIdxs = []int32{
	0, // 0: pb_grpc_msgAnalyze.msgAnalyze.ReadMsgHistory:input_type -> pb_msg_msgAnalyze.ReadMsgHistoryReq
	1, // 1: pb_grpc_msgAnalyze.msgAnalyze.ChatSessions:input_type -> pb_msg_msgAnalyze.ChatSessionsReq
	2, // 2: pb_grpc_msgAnalyze.msgAnalyze.ChatHistories:input_type -> pb_msg_msgAnalyze.ChatHistoriesReq
	3, // 3: pb_grpc_msgAnalyze.msgAnalyze.ChatStats:input_type -> pb_msg_msgAnalyze.ChatStatsReq
	4, // 4: pb_grpc_msgAnalyze.msgAnalyze.ReadMsgHistory:output_type -> pb_msg_msgAnalyze.ReadMsgHistoryRsp
	5, // 5: pb_grpc_msgAnalyze.msgAnalyze.ChatSessions:output_type -> pb_msg_msgAnalyze.ChatSessionsRsp
	6, // 6: pb_grpc_msgAnalyze.msgAnalyze.ChatHistories:output_type -> pb_msg_msgAnalyze.ChatHistoriesRsp
	7, // 7: pb_grpc_msgAnalyze.msgAnalyze.ChatStats:output_type -> pb_msg_msgAnalyze.ChatStatsRsp
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_msg_analyze_msg_analyze_proto_init() }
func file_pb_grpc_msg_analyze_msg_analyze_proto_init() {
	if File_pb_grpc_msg_analyze_msg_analyze_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_msg_analyze_msg_analyze_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_msg_analyze_msg_analyze_proto_goTypes,
		DependencyIndexes: file_pb_grpc_msg_analyze_msg_analyze_proto_depIdxs,
	}.Build()
	File_pb_grpc_msg_analyze_msg_analyze_proto = out.File
	file_pb_grpc_msg_analyze_msg_analyze_proto_rawDesc = nil
	file_pb_grpc_msg_analyze_msg_analyze_proto_goTypes = nil
	file_pb_grpc_msg_analyze_msg_analyze_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MsgAnalyzeClient is the client API for MsgAnalyze service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgAnalyzeClient interface {
	// 获取历史消息
	ReadMsgHistory(ctx context.Context, in *msg_analyze.ReadMsgHistoryReq, opts ...grpc.CallOption) (*msg_analyze.ReadMsgHistoryRsp, error)
	// 获取有用户会话
	ChatSessions(ctx context.Context, in *msg_analyze.ChatSessionsReq, opts ...grpc.CallOption) (*msg_analyze.ChatSessionsRsp, error)
	// 获取有历史聊天消息
	ChatHistories(ctx context.Context, in *msg_analyze.ChatHistoriesReq, opts ...grpc.CallOption) (*msg_analyze.ChatHistoriesRsp, error)
	// 聊天统计
	ChatStats(ctx context.Context, in *msg_analyze.ChatStatsReq, opts ...grpc.CallOption) (*msg_analyze.ChatStatsRsp, error)
}

type msgAnalyzeClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgAnalyzeClient(cc grpc.ClientConnInterface) MsgAnalyzeClient {
	return &msgAnalyzeClient{cc}
}

func (c *msgAnalyzeClient) ReadMsgHistory(ctx context.Context, in *msg_analyze.ReadMsgHistoryReq, opts ...grpc.CallOption) (*msg_analyze.ReadMsgHistoryRsp, error) {
	out := new(msg_analyze.ReadMsgHistoryRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgAnalyze.msgAnalyze/ReadMsgHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgAnalyzeClient) ChatSessions(ctx context.Context, in *msg_analyze.ChatSessionsReq, opts ...grpc.CallOption) (*msg_analyze.ChatSessionsRsp, error) {
	out := new(msg_analyze.ChatSessionsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgAnalyze.msgAnalyze/ChatSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgAnalyzeClient) ChatHistories(ctx context.Context, in *msg_analyze.ChatHistoriesReq, opts ...grpc.CallOption) (*msg_analyze.ChatHistoriesRsp, error) {
	out := new(msg_analyze.ChatHistoriesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgAnalyze.msgAnalyze/ChatHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgAnalyzeClient) ChatStats(ctx context.Context, in *msg_analyze.ChatStatsReq, opts ...grpc.CallOption) (*msg_analyze.ChatStatsRsp, error) {
	out := new(msg_analyze.ChatStatsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgAnalyze.msgAnalyze/ChatStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgAnalyzeServer is the server API for MsgAnalyze service.
type MsgAnalyzeServer interface {
	// 获取历史消息
	ReadMsgHistory(context.Context, *msg_analyze.ReadMsgHistoryReq) (*msg_analyze.ReadMsgHistoryRsp, error)
	// 获取有用户会话
	ChatSessions(context.Context, *msg_analyze.ChatSessionsReq) (*msg_analyze.ChatSessionsRsp, error)
	// 获取有历史聊天消息
	ChatHistories(context.Context, *msg_analyze.ChatHistoriesReq) (*msg_analyze.ChatHistoriesRsp, error)
	// 聊天统计
	ChatStats(context.Context, *msg_analyze.ChatStatsReq) (*msg_analyze.ChatStatsRsp, error)
}

// UnimplementedMsgAnalyzeServer can be embedded to have forward compatible implementations.
type UnimplementedMsgAnalyzeServer struct {
}

func (*UnimplementedMsgAnalyzeServer) ReadMsgHistory(context.Context, *msg_analyze.ReadMsgHistoryReq) (*msg_analyze.ReadMsgHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMsgHistory not implemented")
}
func (*UnimplementedMsgAnalyzeServer) ChatSessions(context.Context, *msg_analyze.ChatSessionsReq) (*msg_analyze.ChatSessionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSessions not implemented")
}
func (*UnimplementedMsgAnalyzeServer) ChatHistories(context.Context, *msg_analyze.ChatHistoriesReq) (*msg_analyze.ChatHistoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHistories not implemented")
}
func (*UnimplementedMsgAnalyzeServer) ChatStats(context.Context, *msg_analyze.ChatStatsReq) (*msg_analyze.ChatStatsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatStats not implemented")
}

func RegisterMsgAnalyzeServer(s *grpc.Server, srv MsgAnalyzeServer) {
	s.RegisterService(&_MsgAnalyze_serviceDesc, srv)
}

func _MsgAnalyze_ReadMsgHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg_analyze.ReadMsgHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgAnalyzeServer).ReadMsgHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgAnalyze.msgAnalyze/ReadMsgHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgAnalyzeServer).ReadMsgHistory(ctx, req.(*msg_analyze.ReadMsgHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgAnalyze_ChatSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg_analyze.ChatSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgAnalyzeServer).ChatSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgAnalyze.msgAnalyze/ChatSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgAnalyzeServer).ChatSessions(ctx, req.(*msg_analyze.ChatSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgAnalyze_ChatHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg_analyze.ChatHistoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgAnalyzeServer).ChatHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgAnalyze.msgAnalyze/ChatHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgAnalyzeServer).ChatHistories(ctx, req.(*msg_analyze.ChatHistoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgAnalyze_ChatStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(msg_analyze.ChatStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgAnalyzeServer).ChatStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgAnalyze.msgAnalyze/ChatStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgAnalyzeServer).ChatStats(ctx, req.(*msg_analyze.ChatStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgAnalyze_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_msgAnalyze.msgAnalyze",
	HandlerType: (*MsgAnalyzeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadMsgHistory",
			Handler:    _MsgAnalyze_ReadMsgHistory_Handler,
		},
		{
			MethodName: "ChatSessions",
			Handler:    _MsgAnalyze_ChatSessions_Handler,
		},
		{
			MethodName: "ChatHistories",
			Handler:    _MsgAnalyze_ChatHistories_Handler,
		},
		{
			MethodName: "ChatStats",
			Handler:    _MsgAnalyze_ChatStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/msg_analyze/msg_analyze.proto",
}
