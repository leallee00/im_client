// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/user_center/userCenter.proto

package user_center

import (
	context "context"
	gate "github.com/leallee00/pb/pb_msg/gate"
	user_center "github.com/leallee00/pb/pb_msg/user_center"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserThirdInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *UserThirdInfoReq) Reset() {
	*x = UserThirdInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserThirdInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserThirdInfoReq) ProtoMessage() {}

func (x *UserThirdInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserThirdInfoReq.ProtoReflect.Descriptor instead.
func (*UserThirdInfoReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{0}
}

func (x *UserThirdInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserThirdInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64                  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ThirdUserIdOld int64                  `protobuf:"varint,2,opt,name=ThirdUserIdOld,proto3" json:"ThirdUserIdOld,omitempty"` // 第三方的userid
	ThirdAppId     int64                  `protobuf:"varint,3,opt,name=ThirdAppId,proto3" json:"ThirdAppId,omitempty"`         // 第三方的appid
	State          pb_pub.USER_STATE_TYPE `protobuf:"varint,4,opt,name=State,proto3,enum=pb_pub.USER_STATE_TYPE" json:"State,omitempty"`
	ThirdUserId    string                 `protobuf:"bytes,5,opt,name=ThirdUserId,proto3" json:"ThirdUserId,omitempty"` // 第三方的userid
}

func (x *UserThirdInfoRsp) Reset() {
	*x = UserThirdInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserThirdInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserThirdInfoRsp) ProtoMessage() {}

func (x *UserThirdInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserThirdInfoRsp.ProtoReflect.Descriptor instead.
func (*UserThirdInfoRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{1}
}

func (x *UserThirdInfoRsp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserThirdInfoRsp) GetThirdUserIdOld() int64 {
	if x != nil {
		return x.ThirdUserIdOld
	}
	return 0
}

func (x *UserThirdInfoRsp) GetThirdAppId() int64 {
	if x != nil {
		return x.ThirdAppId
	}
	return 0
}

func (x *UserThirdInfoRsp) GetState() pb_pub.USER_STATE_TYPE {
	if x != nil {
		return x.State
	}
	return pb_pub.USER_STATE_TYPE(0)
}

func (x *UserThirdInfoRsp) GetThirdUserId() string {
	if x != nil {
		return x.ThirdUserId
	}
	return ""
}

type UserStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64              `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ClientType pb_pub.CLIENT_TYPE `protobuf:"varint,2,opt,name=clientType,proto3,enum=pb_pub.CLIENT_TYPE" json:"clientType,omitempty"`
}

func (x *UserStateReq) Reset() {
	*x = UserStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateReq) ProtoMessage() {}

func (x *UserStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateReq.ProtoReflect.Descriptor instead.
func (*UserStateReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{2}
}

func (x *UserStateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStateReq) GetClientType() pb_pub.CLIENT_TYPE {
	if x != nil {
		return x.ClientType
	}
	return pb_pub.CLIENT_TYPE(0)
}

type UserStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64                  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	GateAddr     string                 `protobuf:"bytes,2,opt,name=GateAddr,proto3" json:"GateAddr,omitempty"` // 当前所在的gate位置
	State        pb_pub.USER_STATE_TYPE `protobuf:"varint,3,opt,name=State,proto3,enum=pb_pub.USER_STATE_TYPE" json:"State,omitempty"`
	SwitchToBack bool                   `protobuf:"varint,4,opt,name=SwitchToBack,proto3" json:"SwitchToBack,omitempty"` // 前端是否切换到后台
	Clients      []*Client              `protobuf:"bytes,5,rep,name=clients,proto3" json:"clients,omitempty"`            // 用户客户端列表
}

func (x *UserStateRsp) Reset() {
	*x = UserStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateRsp) ProtoMessage() {}

func (x *UserStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateRsp.ProtoReflect.Descriptor instead.
func (*UserStateRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{3}
}

func (x *UserStateRsp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStateRsp) GetGateAddr() string {
	if x != nil {
		return x.GateAddr
	}
	return ""
}

func (x *UserStateRsp) GetState() pb_pub.USER_STATE_TYPE {
	if x != nil {
		return x.State
	}
	return pb_pub.USER_STATE_TYPE(0)
}

func (x *UserStateRsp) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

func (x *UserStateRsp) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GateAddr     string                 `protobuf:"bytes,1,opt,name=GateAddr,proto3" json:"GateAddr,omitempty"` // 当前所在的gate位置
	State        pb_pub.USER_STATE_TYPE `protobuf:"varint,2,opt,name=State,proto3,enum=pb_pub.USER_STATE_TYPE" json:"State,omitempty"`
	SwitchToBack bool                   `protobuf:"varint,3,opt,name=SwitchToBack,proto3" json:"SwitchToBack,omitempty"`                     // 前端是否切换到后台
	ClientType   pb_pub.CLIENT_TYPE     `protobuf:"varint,4,opt,name=clientType,proto3,enum=pb_pub.CLIENT_TYPE" json:"clientType,omitempty"` // 客户端类型
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{4}
}

func (x *Client) GetGateAddr() string {
	if x != nil {
		return x.GateAddr
	}
	return ""
}

func (x *Client) GetState() pb_pub.USER_STATE_TYPE {
	if x != nil {
		return x.State
	}
	return pb_pub.USER_STATE_TYPE(0)
}

func (x *Client) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

func (x *Client) GetClientType() pb_pub.CLIENT_TYPE {
	if x != nil {
		return x.ClientType
	}
	return pb_pub.CLIENT_TYPE(0)
}

type Userstate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64                  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	GateAddr     string                 `protobuf:"bytes,2,opt,name=GateAddr,proto3" json:"GateAddr,omitempty"` // 当前所在的gate位置
	State        pb_pub.USER_STATE_TYPE `protobuf:"varint,3,opt,name=State,proto3,enum=pb_pub.USER_STATE_TYPE" json:"State,omitempty"`
	SwitchToBack bool                   `protobuf:"varint,4,opt,name=SwitchToBack,proto3" json:"SwitchToBack,omitempty"` // 前端是否切换到后台
}

func (x *Userstate) Reset() {
	*x = Userstate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Userstate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Userstate) ProtoMessage() {}

func (x *Userstate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Userstate.ProtoReflect.Descriptor instead.
func (*Userstate) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{5}
}

func (x *Userstate) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Userstate) GetGateAddr() string {
	if x != nil {
		return x.GateAddr
	}
	return ""
}

func (x *Userstate) GetState() pb_pub.USER_STATE_TYPE {
	if x != nil {
		return x.State
	}
	return pb_pub.USER_STATE_TYPE(0)
}

func (x *Userstate) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

type UserStateChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64                  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	State    pb_pub.USER_STATE_TYPE `protobuf:"varint,2,opt,name=State,proto3,enum=pb_pub.USER_STATE_TYPE" json:"State,omitempty"`
	GateAddr string                 `protobuf:"bytes,3,opt,name=GateAddr,proto3" json:"GateAddr,omitempty"` // 把所在gate的addr带上
}

func (x *UserStateChangeReq) Reset() {
	*x = UserStateChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateChangeReq) ProtoMessage() {}

func (x *UserStateChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateChangeReq.ProtoReflect.Descriptor instead.
func (*UserStateChangeReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{6}
}

func (x *UserStateChangeReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserStateChangeReq) GetState() pb_pub.USER_STATE_TYPE {
	if x != nil {
		return x.State
	}
	return pb_pub.USER_STATE_TYPE(0)
}

func (x *UserStateChangeReq) GetGateAddr() string {
	if x != nil {
		return x.GateAddr
	}
	return ""
}

type UserLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   int64  `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	Secret  string `protobuf:"bytes,2,opt,name=Secret,proto3" json:"Secret,omitempty"`
	UnionId string `protobuf:"bytes,3,opt,name=UnionId,proto3" json:"UnionId,omitempty"`
}

func (x *UserLoginReq) Reset() {
	*x = UserLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginReq) ProtoMessage() {}

func (x *UserLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginReq.ProtoReflect.Descriptor instead.
func (*UserLoginReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{7}
}

func (x *UserLoginReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *UserLoginReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UserLoginReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type UserLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` // 0 成功，其他为错误号
	UserID       int64          `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Token        string         `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	TokenVersion string         `protobuf:"bytes,4,opt,name=TokenVersion,proto3" json:"TokenVersion,omitempty"`
}

func (x *UserLoginRsp) Reset() {
	*x = UserLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRsp) ProtoMessage() {}

func (x *UserLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRsp.ProtoReflect.Descriptor instead.
func (*UserLoginRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{8}
}

func (x *UserLoginRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

func (x *UserLoginRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserLoginRsp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserLoginRsp) GetTokenVersion() string {
	if x != nil {
		return x.TokenVersion
	}
	return ""
}

type SetProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // appUID
	NickName  string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Gender    int64  `protobuf:"varint,3,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Language  string `protobuf:"bytes,4,opt,name=Language,proto3" json:"Language,omitempty"`
	City      string `protobuf:"bytes,5,opt,name=City,proto3" json:"City,omitempty"`
	Province  string `protobuf:"bytes,6,opt,name=Province,proto3" json:"Province,omitempty"`
	Country   string `protobuf:"bytes,7,opt,name=Country,proto3" json:"Country,omitempty"`
	AvatarUrl string `protobuf:"bytes,8,opt,name=AvatarUrl,proto3" json:"AvatarUrl,omitempty"`
}

func (x *SetProfileReq) Reset() {
	*x = SetProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileReq) ProtoMessage() {}

func (x *SetProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileReq.ProtoReflect.Descriptor instead.
func (*SetProfileReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{9}
}

func (x *SetProfileReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SetProfileReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SetProfileReq) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SetProfileReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SetProfileReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SetProfileReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *SetProfileReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SetProfileReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type SetProfileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` // 0 成功，其他为错误号
	UserID int64          `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *SetProfileRsp) Reset() {
	*x = SetProfileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileRsp) ProtoMessage() {}

func (x *SetProfileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_user_center_userCenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileRsp.ProtoReflect.Descriptor instead.
func (*SetProfileRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_user_center_userCenter_proto_rawDescGZIP(), []int{10}
}

func (x *SetProfileRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

func (x *SetProfileRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

var File_pb_grpc_user_center_userCenter_proto protoreflect.FileDescriptor

var file_pb_grpc_user_center_userCenter_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xc3, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x72, 0x64, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x68, 0x69, 0x72, 0x64, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x68, 0x69, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x68, 0x69, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xac, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x92, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f,
	0x42, 0x61, 0x63, 0x6b, 0x22, 0x77, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x56, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x22, 0x50, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x32, 0x83, 0x0a, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x11, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x1a,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x55, 0x69,
	0x64, 0x54, 0x6f, 0x49, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x55,
	0x69, 0x64, 0x54, 0x6f, 0x49, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x70, 0x70, 0x55, 0x69, 0x64, 0x54, 0x6f, 0x49, 0x6d, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x4f, 0x75, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x7a, 0x0a, 0x18, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x79, 0x48, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_grpc_user_center_userCenter_proto_rawDescOnce sync.Once
	file_pb_grpc_user_center_userCenter_proto_rawDescData = file_pb_grpc_user_center_userCenter_proto_rawDesc
)

func file_pb_grpc_user_center_userCenter_proto_rawDescGZIP() []byte {
	file_pb_grpc_user_center_userCenter_proto_rawDescOnce.Do(func() {
		file_pb_grpc_user_center_userCenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_grpc_user_center_userCenter_proto_rawDescData)
	})
	return file_pb_grpc_user_center_userCenter_proto_rawDescData
}

var file_pb_grpc_user_center_userCenter_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pb_grpc_user_center_userCenter_proto_goTypes = []interface{}{
	(*UserThirdInfoReq)(nil),                        // 0: pb_grpc_userCenter.UserThirdInfoReq
	(*UserThirdInfoRsp)(nil),                        // 1: pb_grpc_userCenter.UserThirdInfoRsp
	(*UserStateReq)(nil),                            // 2: pb_grpc_userCenter.UserStateReq
	(*UserStateRsp)(nil),                            // 3: pb_grpc_userCenter.UserStateRsp
	(*Client)(nil),                                  // 4: pb_grpc_userCenter.Client
	(*Userstate)(nil),                               // 5: pb_grpc_userCenter.Userstate
	(*UserStateChangeReq)(nil),                      // 6: pb_grpc_userCenter.UserStateChangeReq
	(*UserLoginReq)(nil),                            // 7: pb_grpc_userCenter.UserLoginReq
	(*UserLoginRsp)(nil),                            // 8: pb_grpc_userCenter.UserLoginRsp
	(*SetProfileReq)(nil),                           // 9: pb_grpc_userCenter.SetProfileReq
	(*SetProfileRsp)(nil),                           // 10: pb_grpc_userCenter.SetProfileRsp
	(pb_pub.USER_STATE_TYPE)(0),                     // 11: pb_pub.USER_STATE_TYPE
	(pb_pub.CLIENT_TYPE)(0),                         // 12: pb_pub.CLIENT_TYPE
	(pb_pub.ErrCode)(0),                             // 13: pb_pub.ErrCode
	(*gate.LoginReq)(nil),                           // 14: pb_msg_gate.LoginReq
	(*pb_pub.HeartBeat)(nil),                        // 15: pb_pub.HeartBeat
	(*user_center.FriendInfoReq)(nil),               // 16: pb_msg_userCenter.FriendInfoReq
	(*user_center.UsersInfoReq)(nil),                // 17: pb_msg_userCenter.UsersInfoReq
	(*user_center.AppUidToImIdReq)(nil),             // 18: pb_msg_userCenter.AppUidToImIdReq
	(*user_center.RedPacketHandOutReq)(nil),         // 19: pb_msg_userCenter.RedPacketHandOutReq
	(*user_center.RedPacketReceiveReq)(nil),         // 20: pb_msg_userCenter.RedPacketReceiveReq
	(*user_center.RedPacketInfoReq)(nil),            // 21: pb_msg_userCenter.RedPacketInfoReq
	(*user_center.RedPacketCurFlowReq)(nil),         // 22: pb_msg_userCenter.RedPacketCurFlowReq
	(*user_center.RedPacketMyReceivedListReq)(nil),  // 23: pb_msg_userCenter.RedPacketMyReceivedListReq
	(*user_center.RedPacketMyHandedOutListReq)(nil), // 24: pb_msg_userCenter.RedPacketMyHandedOutListReq
	(*gate.LoginRsp)(nil),                           // 25: pb_msg_gate.LoginRsp
	(*pb_pub.CommRsp)(nil),                          // 26: pb_pub.CommRsp
	(*user_center.FriendInfoRsp)(nil),               // 27: pb_msg_userCenter.FriendInfoRsp
	(*user_center.UsersInfoRsp)(nil),                // 28: pb_msg_userCenter.UsersInfoRsp
	(*user_center.AppUidToImIdRsp)(nil),             // 29: pb_msg_userCenter.AppUidToImIdRsp
	(*user_center.RedPacketHandOutRsp)(nil),         // 30: pb_msg_userCenter.RedPacketHandOutRsp
	(*user_center.RedPacketReceiveRsp)(nil),         // 31: pb_msg_userCenter.RedPacketReceiveRsp
	(*user_center.RedPacketInfoRsp)(nil),            // 32: pb_msg_userCenter.RedPacketInfoRsp
	(*user_center.RedPacketCurFlowRsp)(nil),         // 33: pb_msg_userCenter.RedPacketCurFlowRsp
	(*user_center.RedPacketMyReceivedListRsp)(nil),  // 34: pb_msg_userCenter.RedPacketMyReceivedListRsp
	(*user_center.RedPacketMyHandedOutListRsp)(nil), // 35: pb_msg_userCenter.RedPacketMyHandedOutListRsp
}
var file_pb_grpc_user_center_userCenter_proto_depIdxs = []int32{
	11, // 0: pb_grpc_userCenter.UserThirdInfoRsp.State:type_name -> pb_pub.USER_STATE_TYPE
	12, // 1: pb_grpc_userCenter.UserStateReq.clientType:type_name -> pb_pub.CLIENT_TYPE
	11, // 2: pb_grpc_userCenter.UserStateRsp.State:type_name -> pb_pub.USER_STATE_TYPE
	4,  // 3: pb_grpc_userCenter.UserStateRsp.clients:type_name -> pb_grpc_userCenter.Client
	11, // 4: pb_grpc_userCenter.Client.State:type_name -> pb_pub.USER_STATE_TYPE
	12, // 5: pb_grpc_userCenter.Client.clientType:type_name -> pb_pub.CLIENT_TYPE
	11, // 6: pb_grpc_userCenter.Userstate.State:type_name -> pb_pub.USER_STATE_TYPE
	11, // 7: pb_grpc_userCenter.UserStateChangeReq.State:type_name -> pb_pub.USER_STATE_TYPE
	13, // 8: pb_grpc_userCenter.UserLoginRsp.result:type_name -> pb_pub.ErrCode
	13, // 9: pb_grpc_userCenter.SetProfileRsp.result:type_name -> pb_pub.ErrCode
	14, // 10: pb_grpc_userCenter.UserCenter.UserLogon:input_type -> pb_msg_gate.LoginReq
	6,  // 11: pb_grpc_userCenter.UserCenter.UserStateChange:input_type -> pb_grpc_userCenter.UserStateChangeReq
	15, // 12: pb_grpc_userCenter.UserCenter.HeartBeat:input_type -> pb_pub.HeartBeat
	2,  // 13: pb_grpc_userCenter.UserCenter.GetUserState:input_type -> pb_grpc_userCenter.UserStateReq
	0,  // 14: pb_grpc_userCenter.UserCenter.GetUserThirdInfo:input_type -> pb_grpc_userCenter.UserThirdInfoReq
	16, // 15: pb_grpc_userCenter.UserCenter.GetFriendsInfo:input_type -> pb_msg_userCenter.FriendInfoReq
	17, // 16: pb_grpc_userCenter.UserCenter.GetUserInfo:input_type -> pb_msg_userCenter.UsersInfoReq
	18, // 17: pb_grpc_userCenter.UserCenter.AppUidToImId:input_type -> pb_msg_userCenter.AppUidToImIdReq
	19, // 18: pb_grpc_userCenter.UserCenter.RedPacketHandOut:input_type -> pb_msg_userCenter.RedPacketHandOutReq
	20, // 19: pb_grpc_userCenter.UserCenter.RedPacketReceive:input_type -> pb_msg_userCenter.RedPacketReceiveReq
	21, // 20: pb_grpc_userCenter.UserCenter.RedPacketInfo:input_type -> pb_msg_userCenter.RedPacketInfoReq
	22, // 21: pb_grpc_userCenter.UserCenter.RedPacketCurFlow:input_type -> pb_msg_userCenter.RedPacketCurFlowReq
	23, // 22: pb_grpc_userCenter.UserCenter.RedPacketMyReceivedList:input_type -> pb_msg_userCenter.RedPacketMyReceivedListReq
	24, // 23: pb_grpc_userCenter.UserCenter.RedPacketMyHandedOutList:input_type -> pb_msg_userCenter.RedPacketMyHandedOutListReq
	25, // 24: pb_grpc_userCenter.UserCenter.UserLogon:output_type -> pb_msg_gate.LoginRsp
	26, // 25: pb_grpc_userCenter.UserCenter.UserStateChange:output_type -> pb_pub.CommRsp
	15, // 26: pb_grpc_userCenter.UserCenter.HeartBeat:output_type -> pb_pub.HeartBeat
	3,  // 27: pb_grpc_userCenter.UserCenter.GetUserState:output_type -> pb_grpc_userCenter.UserStateRsp
	1,  // 28: pb_grpc_userCenter.UserCenter.GetUserThirdInfo:output_type -> pb_grpc_userCenter.UserThirdInfoRsp
	27, // 29: pb_grpc_userCenter.UserCenter.GetFriendsInfo:output_type -> pb_msg_userCenter.FriendInfoRsp
	28, // 30: pb_grpc_userCenter.UserCenter.GetUserInfo:output_type -> pb_msg_userCenter.UsersInfoRsp
	29, // 31: pb_grpc_userCenter.UserCenter.AppUidToImId:output_type -> pb_msg_userCenter.AppUidToImIdRsp
	30, // 32: pb_grpc_userCenter.UserCenter.RedPacketHandOut:output_type -> pb_msg_userCenter.RedPacketHandOutRsp
	31, // 33: pb_grpc_userCenter.UserCenter.RedPacketReceive:output_type -> pb_msg_userCenter.RedPacketReceiveRsp
	32, // 34: pb_grpc_userCenter.UserCenter.RedPacketInfo:output_type -> pb_msg_userCenter.RedPacketInfoRsp
	33, // 35: pb_grpc_userCenter.UserCenter.RedPacketCurFlow:output_type -> pb_msg_userCenter.RedPacketCurFlowRsp
	34, // 36: pb_grpc_userCenter.UserCenter.RedPacketMyReceivedList:output_type -> pb_msg_userCenter.RedPacketMyReceivedListRsp
	35, // 37: pb_grpc_userCenter.UserCenter.RedPacketMyHandedOutList:output_type -> pb_msg_userCenter.RedPacketMyHandedOutListRsp
	24, // [24:38] is the sub-list for method output_type
	10, // [10:24] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pb_grpc_user_center_userCenter_proto_init() }
func file_pb_grpc_user_center_userCenter_proto_init() {
	if File_pb_grpc_user_center_userCenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_grpc_user_center_userCenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserThirdInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserThirdInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Userstate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_user_center_userCenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_user_center_userCenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_user_center_userCenter_proto_goTypes,
		DependencyIndexes: file_pb_grpc_user_center_userCenter_proto_depIdxs,
		MessageInfos:      file_pb_grpc_user_center_userCenter_proto_msgTypes,
	}.Build()
	File_pb_grpc_user_center_userCenter_proto = out.File
	file_pb_grpc_user_center_userCenter_proto_rawDesc = nil
	file_pb_grpc_user_center_userCenter_proto_goTypes = nil
	file_pb_grpc_user_center_userCenter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserCenterClient is the client API for UserCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCenterClient interface {
	// 登录认证，产生的token也放在这里验证
	UserLogon(ctx context.Context, in *gate.LoginReq, opts ...grpc.CallOption) (*gate.LoginRsp, error)
	// 用户状态变更通知
	UserStateChange(ctx context.Context, in *UserStateChangeReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 心跳通知
	HeartBeat(ctx context.Context, in *pb_pub.HeartBeat, opts ...grpc.CallOption) (*pb_pub.HeartBeat, error)
	// 获取用户状态
	GetUserState(ctx context.Context, in *UserStateReq, opts ...grpc.CallOption) (*UserStateRsp, error)
	// 获取用户第三方信息
	GetUserThirdInfo(ctx context.Context, in *UserThirdInfoReq, opts ...grpc.CallOption) (*UserThirdInfoRsp, error)
	// 获取朋友用户信息
	GetFriendsInfo(ctx context.Context, in *user_center.FriendInfoReq, opts ...grpc.CallOption) (*user_center.FriendInfoRsp, error)
	// 批量获取用户信息
	GetUserInfo(ctx context.Context, in *user_center.UsersInfoReq, opts ...grpc.CallOption) (*user_center.UsersInfoRsp, error)
	// appId换imid
	AppUidToImId(ctx context.Context, in *user_center.AppUidToImIdReq, opts ...grpc.CallOption) (*user_center.AppUidToImIdRsp, error)
	// ///////////////////////////
	// 发红包
	// 发红包
	RedPacketHandOut(ctx context.Context, in *user_center.RedPacketHandOutReq, opts ...grpc.CallOption) (*user_center.RedPacketHandOutRsp, error)
	// 领红包
	RedPacketReceive(ctx context.Context, in *user_center.RedPacketReceiveReq, opts ...grpc.CallOption) (*user_center.RedPacketReceiveRsp, error)
	// 红包信息获取
	RedPacketInfo(ctx context.Context, in *user_center.RedPacketInfoReq, opts ...grpc.CallOption) (*user_center.RedPacketInfoRsp, error)
	// 红包信息下的领取列表
	RedPacketCurFlow(ctx context.Context, in *user_center.RedPacketCurFlowReq, opts ...grpc.CallOption) (*user_center.RedPacketCurFlowRsp, error)
	// 红包领取列表
	RedPacketMyReceivedList(ctx context.Context, in *user_center.RedPacketMyReceivedListReq, opts ...grpc.CallOption) (*user_center.RedPacketMyReceivedListRsp, error)
	// 发送的红包列表
	RedPacketMyHandedOutList(ctx context.Context, in *user_center.RedPacketMyHandedOutListReq, opts ...grpc.CallOption) (*user_center.RedPacketMyHandedOutListRsp, error)
}

type userCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCenterClient(cc grpc.ClientConnInterface) UserCenterClient {
	return &userCenterClient{cc}
}

func (c *userCenterClient) UserLogon(ctx context.Context, in *gate.LoginReq, opts ...grpc.CallOption) (*gate.LoginRsp, error) {
	out := new(gate.LoginRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/UserLogon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) UserStateChange(ctx context.Context, in *UserStateChangeReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/UserStateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) HeartBeat(ctx context.Context, in *pb_pub.HeartBeat, opts ...grpc.CallOption) (*pb_pub.HeartBeat, error) {
	out := new(pb_pub.HeartBeat)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserState(ctx context.Context, in *UserStateReq, opts ...grpc.CallOption) (*UserStateRsp, error) {
	out := new(UserStateRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/GetUserState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserThirdInfo(ctx context.Context, in *UserThirdInfoReq, opts ...grpc.CallOption) (*UserThirdInfoRsp, error) {
	out := new(UserThirdInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/GetUserThirdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetFriendsInfo(ctx context.Context, in *user_center.FriendInfoReq, opts ...grpc.CallOption) (*user_center.FriendInfoRsp, error) {
	out := new(user_center.FriendInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/GetFriendsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserInfo(ctx context.Context, in *user_center.UsersInfoReq, opts ...grpc.CallOption) (*user_center.UsersInfoRsp, error) {
	out := new(user_center.UsersInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) AppUidToImId(ctx context.Context, in *user_center.AppUidToImIdReq, opts ...grpc.CallOption) (*user_center.AppUidToImIdRsp, error) {
	out := new(user_center.AppUidToImIdRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/AppUidToImId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketHandOut(ctx context.Context, in *user_center.RedPacketHandOutReq, opts ...grpc.CallOption) (*user_center.RedPacketHandOutRsp, error) {
	out := new(user_center.RedPacketHandOutRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketHandOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketReceive(ctx context.Context, in *user_center.RedPacketReceiveReq, opts ...grpc.CallOption) (*user_center.RedPacketReceiveRsp, error) {
	out := new(user_center.RedPacketReceiveRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketInfo(ctx context.Context, in *user_center.RedPacketInfoReq, opts ...grpc.CallOption) (*user_center.RedPacketInfoRsp, error) {
	out := new(user_center.RedPacketInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketCurFlow(ctx context.Context, in *user_center.RedPacketCurFlowReq, opts ...grpc.CallOption) (*user_center.RedPacketCurFlowRsp, error) {
	out := new(user_center.RedPacketCurFlowRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketCurFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketMyReceivedList(ctx context.Context, in *user_center.RedPacketMyReceivedListReq, opts ...grpc.CallOption) (*user_center.RedPacketMyReceivedListRsp, error) {
	out := new(user_center.RedPacketMyReceivedListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketMyReceivedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RedPacketMyHandedOutList(ctx context.Context, in *user_center.RedPacketMyHandedOutListReq, opts ...grpc.CallOption) (*user_center.RedPacketMyHandedOutListRsp, error) {
	out := new(user_center.RedPacketMyHandedOutListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_userCenter.UserCenter/RedPacketMyHandedOutList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCenterServer is the server API for UserCenter service.
type UserCenterServer interface {
	// 登录认证，产生的token也放在这里验证
	UserLogon(context.Context, *gate.LoginReq) (*gate.LoginRsp, error)
	// 用户状态变更通知
	UserStateChange(context.Context, *UserStateChangeReq) (*pb_pub.CommRsp, error)
	// 心跳通知
	HeartBeat(context.Context, *pb_pub.HeartBeat) (*pb_pub.HeartBeat, error)
	// 获取用户状态
	GetUserState(context.Context, *UserStateReq) (*UserStateRsp, error)
	// 获取用户第三方信息
	GetUserThirdInfo(context.Context, *UserThirdInfoReq) (*UserThirdInfoRsp, error)
	// 获取朋友用户信息
	GetFriendsInfo(context.Context, *user_center.FriendInfoReq) (*user_center.FriendInfoRsp, error)
	// 批量获取用户信息
	GetUserInfo(context.Context, *user_center.UsersInfoReq) (*user_center.UsersInfoRsp, error)
	// appId换imid
	AppUidToImId(context.Context, *user_center.AppUidToImIdReq) (*user_center.AppUidToImIdRsp, error)
	// ///////////////////////////
	// 发红包
	// 发红包
	RedPacketHandOut(context.Context, *user_center.RedPacketHandOutReq) (*user_center.RedPacketHandOutRsp, error)
	// 领红包
	RedPacketReceive(context.Context, *user_center.RedPacketReceiveReq) (*user_center.RedPacketReceiveRsp, error)
	// 红包信息获取
	RedPacketInfo(context.Context, *user_center.RedPacketInfoReq) (*user_center.RedPacketInfoRsp, error)
	// 红包信息下的领取列表
	RedPacketCurFlow(context.Context, *user_center.RedPacketCurFlowReq) (*user_center.RedPacketCurFlowRsp, error)
	// 红包领取列表
	RedPacketMyReceivedList(context.Context, *user_center.RedPacketMyReceivedListReq) (*user_center.RedPacketMyReceivedListRsp, error)
	// 发送的红包列表
	RedPacketMyHandedOutList(context.Context, *user_center.RedPacketMyHandedOutListReq) (*user_center.RedPacketMyHandedOutListRsp, error)
}

// UnimplementedUserCenterServer can be embedded to have forward compatible implementations.
type UnimplementedUserCenterServer struct {
}

func (*UnimplementedUserCenterServer) UserLogon(context.Context, *gate.LoginReq) (*gate.LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogon not implemented")
}
func (*UnimplementedUserCenterServer) UserStateChange(context.Context, *UserStateChangeReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStateChange not implemented")
}
func (*UnimplementedUserCenterServer) HeartBeat(context.Context, *pb_pub.HeartBeat) (*pb_pub.HeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedUserCenterServer) GetUserState(context.Context, *UserStateReq) (*UserStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserState not implemented")
}
func (*UnimplementedUserCenterServer) GetUserThirdInfo(context.Context, *UserThirdInfoReq) (*UserThirdInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserThirdInfo not implemented")
}
func (*UnimplementedUserCenterServer) GetFriendsInfo(context.Context, *user_center.FriendInfoReq) (*user_center.FriendInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsInfo not implemented")
}
func (*UnimplementedUserCenterServer) GetUserInfo(context.Context, *user_center.UsersInfoReq) (*user_center.UsersInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedUserCenterServer) AppUidToImId(context.Context, *user_center.AppUidToImIdReq) (*user_center.AppUidToImIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUidToImId not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketHandOut(context.Context, *user_center.RedPacketHandOutReq) (*user_center.RedPacketHandOutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketHandOut not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketReceive(context.Context, *user_center.RedPacketReceiveReq) (*user_center.RedPacketReceiveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketReceive not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketInfo(context.Context, *user_center.RedPacketInfoReq) (*user_center.RedPacketInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketInfo not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketCurFlow(context.Context, *user_center.RedPacketCurFlowReq) (*user_center.RedPacketCurFlowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketCurFlow not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketMyReceivedList(context.Context, *user_center.RedPacketMyReceivedListReq) (*user_center.RedPacketMyReceivedListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketMyReceivedList not implemented")
}
func (*UnimplementedUserCenterServer) RedPacketMyHandedOutList(context.Context, *user_center.RedPacketMyHandedOutListReq) (*user_center.RedPacketMyHandedOutListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketMyHandedOutList not implemented")
}

func RegisterUserCenterServer(s *grpc.Server, srv UserCenterServer) {
	s.RegisterService(&_UserCenter_serviceDesc, srv)
}

func _UserCenter_UserLogon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gate.LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UserLogon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/UserLogon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UserLogon(ctx, req.(*gate.LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_UserStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UserStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/UserStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UserStateChange(ctx, req.(*UserStateChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).HeartBeat(ctx, req.(*pb_pub.HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/GetUserState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserState(ctx, req.(*UserStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserThirdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserThirdInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserThirdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/GetUserThirdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserThirdInfo(ctx, req.(*UserThirdInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetFriendsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.FriendInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetFriendsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/GetFriendsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetFriendsInfo(ctx, req.(*user_center.FriendInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.UsersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserInfo(ctx, req.(*user_center.UsersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_AppUidToImId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.AppUidToImIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).AppUidToImId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/AppUidToImId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).AppUidToImId(ctx, req.(*user_center.AppUidToImIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketHandOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketHandOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketHandOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketHandOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketHandOut(ctx, req.(*user_center.RedPacketHandOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketReceive(ctx, req.(*user_center.RedPacketReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketInfo(ctx, req.(*user_center.RedPacketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketCurFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketCurFlowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketCurFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketCurFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketCurFlow(ctx, req.(*user_center.RedPacketCurFlowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketMyReceivedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketMyReceivedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketMyReceivedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketMyReceivedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketMyReceivedList(ctx, req.(*user_center.RedPacketMyReceivedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RedPacketMyHandedOutList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user_center.RedPacketMyHandedOutListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RedPacketMyHandedOutList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_userCenter.UserCenter/RedPacketMyHandedOutList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RedPacketMyHandedOutList(ctx, req.(*user_center.RedPacketMyHandedOutListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_userCenter.UserCenter",
	HandlerType: (*UserCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogon",
			Handler:    _UserCenter_UserLogon_Handler,
		},
		{
			MethodName: "UserStateChange",
			Handler:    _UserCenter_UserStateChange_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _UserCenter_HeartBeat_Handler,
		},
		{
			MethodName: "GetUserState",
			Handler:    _UserCenter_GetUserState_Handler,
		},
		{
			MethodName: "GetUserThirdInfo",
			Handler:    _UserCenter_GetUserThirdInfo_Handler,
		},
		{
			MethodName: "GetFriendsInfo",
			Handler:    _UserCenter_GetFriendsInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserCenter_GetUserInfo_Handler,
		},
		{
			MethodName: "AppUidToImId",
			Handler:    _UserCenter_AppUidToImId_Handler,
		},
		{
			MethodName: "RedPacketHandOut",
			Handler:    _UserCenter_RedPacketHandOut_Handler,
		},
		{
			MethodName: "RedPacketReceive",
			Handler:    _UserCenter_RedPacketReceive_Handler,
		},
		{
			MethodName: "RedPacketInfo",
			Handler:    _UserCenter_RedPacketInfo_Handler,
		},
		{
			MethodName: "RedPacketCurFlow",
			Handler:    _UserCenter_RedPacketCurFlow_Handler,
		},
		{
			MethodName: "RedPacketMyReceivedList",
			Handler:    _UserCenter_RedPacketMyReceivedList_Handler,
		},
		{
			MethodName: "RedPacketMyHandedOutList",
			Handler:    _UserCenter_RedPacketMyHandedOutList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/user_center/userCenter.proto",
}
