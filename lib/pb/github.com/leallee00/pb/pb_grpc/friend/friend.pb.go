// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/friend/friend.proto

package friend

import (
	context "context"
	friend "github.com/leallee00/pb/pb_msg/friend"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_friend_friend_proto protoreflect.FileDescriptor

var file_pb_grpc_friend_friend_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x1a, 0x1a, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe7, 0x06, 0x0a, 0x06, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x4b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x07,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x66, 0x0a,
	0x14, 0x47, 0x6d, 0x4d, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x6d, 0x4d, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x6d,
	0x4d, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x73,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0d, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x49, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x49, 0x73, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70,
	0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pb_grpc_friend_friend_proto_goTypes = []interface{}{
	(*friend.ApplyReq)(nil),                // 0: pb_msg_friend.ApplyReq
	(*friend.ApplyAnswerReq)(nil),          // 1: pb_msg_friend.ApplyAnswerReq
	(*friend.FriendsReq)(nil),              // 2: pb_msg_friend.FriendsReq
	(*friend.FriendDetailReq)(nil),         // 3: pb_msg_friend.FriendDetailReq
	(*friend.ApplicationsReq)(nil),         // 4: pb_msg_friend.ApplicationsReq
	(*friend.UpdateFriendReq)(nil),         // 5: pb_msg_friend.UpdateFriendReq
	(*friend.DeleteFriendReq)(nil),         // 6: pb_msg_friend.DeleteFriendReq
	(*friend.GmMakeFriendRelationReq)(nil), // 7: pb_msg_friend.GmMakeFriendRelationReq
	(*friend.IsFriendReq)(nil),             // 8: pb_msg_friend.IsFriendReq
	(*friend.ReadBlackListReq)(nil),        // 9: pb_msg_friend.ReadBlackListReq
	(*friend.IsInBlackListReq)(nil),        // 10: pb_msg_friend.IsInBlackListReq
	(*friend.ApplyRsp)(nil),                // 11: pb_msg_friend.ApplyRsp
	(*friend.ApplyAnswerRsp)(nil),          // 12: pb_msg_friend.ApplyAnswerRsp
	(*friend.FriendsRsp)(nil),              // 13: pb_msg_friend.FriendsRsp
	(*friend.FriendDetailRsp)(nil),         // 14: pb_msg_friend.FriendDetailRsp
	(*friend.ApplicationsRsp)(nil),         // 15: pb_msg_friend.ApplicationsRsp
	(*friend.UpdateFriendRsp)(nil),         // 16: pb_msg_friend.UpdateFriendRsp
	(*friend.DeleteFriendRsp)(nil),         // 17: pb_msg_friend.DeleteFriendRsp
	(*friend.GmMakeFriendRelationRsp)(nil), // 18: pb_msg_friend.GmMakeFriendRelationRsp
	(*friend.IsFriendRsp)(nil),             // 19: pb_msg_friend.IsFriendRsp
	(*friend.ReadBlackListRsp)(nil),        // 20: pb_msg_friend.ReadBlackListRsp
	(*friend.IsInBlackListRsp)(nil),        // 21: pb_msg_friend.IsInBlackListRsp
}
var file_pb_grpc_friend_friend_proto_depIdxs = []int32{
	0,  // 0: pb_grpc_friend.Friend.Apply:input_type -> pb_msg_friend.ApplyReq
	1,  // 1: pb_grpc_friend.Friend.ApplyAnswer:input_type -> pb_msg_friend.ApplyAnswerReq
	2,  // 2: pb_grpc_friend.Friend.Friends:input_type -> pb_msg_friend.FriendsReq
	3,  // 3: pb_grpc_friend.Friend.FriendDetail:input_type -> pb_msg_friend.FriendDetailReq
	4,  // 4: pb_grpc_friend.Friend.Applications:input_type -> pb_msg_friend.ApplicationsReq
	5,  // 5: pb_grpc_friend.Friend.UpdateFriend:input_type -> pb_msg_friend.UpdateFriendReq
	6,  // 6: pb_grpc_friend.Friend.DeleteFriend:input_type -> pb_msg_friend.DeleteFriendReq
	7,  // 7: pb_grpc_friend.Friend.GmMakeFriendRelation:input_type -> pb_msg_friend.GmMakeFriendRelationReq
	8,  // 8: pb_grpc_friend.Friend.IsFriend:input_type -> pb_msg_friend.IsFriendReq
	9,  // 9: pb_grpc_friend.Friend.ReadBlackList:input_type -> pb_msg_friend.ReadBlackListReq
	10, // 10: pb_grpc_friend.Friend.IsInBlackList:input_type -> pb_msg_friend.IsInBlackListReq
	11, // 11: pb_grpc_friend.Friend.Apply:output_type -> pb_msg_friend.ApplyRsp
	12, // 12: pb_grpc_friend.Friend.ApplyAnswer:output_type -> pb_msg_friend.ApplyAnswerRsp
	13, // 13: pb_grpc_friend.Friend.Friends:output_type -> pb_msg_friend.FriendsRsp
	14, // 14: pb_grpc_friend.Friend.FriendDetail:output_type -> pb_msg_friend.FriendDetailRsp
	15, // 15: pb_grpc_friend.Friend.Applications:output_type -> pb_msg_friend.ApplicationsRsp
	16, // 16: pb_grpc_friend.Friend.UpdateFriend:output_type -> pb_msg_friend.UpdateFriendRsp
	17, // 17: pb_grpc_friend.Friend.DeleteFriend:output_type -> pb_msg_friend.DeleteFriendRsp
	18, // 18: pb_grpc_friend.Friend.GmMakeFriendRelation:output_type -> pb_msg_friend.GmMakeFriendRelationRsp
	19, // 19: pb_grpc_friend.Friend.IsFriend:output_type -> pb_msg_friend.IsFriendRsp
	20, // 20: pb_grpc_friend.Friend.ReadBlackList:output_type -> pb_msg_friend.ReadBlackListRsp
	21, // 21: pb_grpc_friend.Friend.IsInBlackList:output_type -> pb_msg_friend.IsInBlackListRsp
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_friend_friend_proto_init() }
func file_pb_grpc_friend_friend_proto_init() {
	if File_pb_grpc_friend_friend_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_friend_friend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_friend_friend_proto_goTypes,
		DependencyIndexes: file_pb_grpc_friend_friend_proto_depIdxs,
	}.Build()
	File_pb_grpc_friend_friend_proto = out.File
	file_pb_grpc_friend_friend_proto_rawDesc = nil
	file_pb_grpc_friend_friend_proto_goTypes = nil
	file_pb_grpc_friend_friend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendClient interface {
	// 好友申请
	Apply(ctx context.Context, in *friend.ApplyReq, opts ...grpc.CallOption) (*friend.ApplyRsp, error)
	// 应答入群申请
	ApplyAnswer(ctx context.Context, in *friend.ApplyAnswerReq, opts ...grpc.CallOption) (*friend.ApplyAnswerRsp, error)
	// 获取我的好友
	Friends(ctx context.Context, in *friend.FriendsReq, opts ...grpc.CallOption) (*friend.FriendsRsp, error)
	// 好友详情
	FriendDetail(ctx context.Context, in *friend.FriendDetailReq, opts ...grpc.CallOption) (*friend.FriendDetailRsp, error)
	// 好友申请记录,我申请的&申请我的
	Applications(ctx context.Context, in *friend.ApplicationsReq, opts ...grpc.CallOption) (*friend.ApplicationsRsp, error)
	// 更新好友信息
	UpdateFriend(ctx context.Context, in *friend.UpdateFriendReq, opts ...grpc.CallOption) (*friend.UpdateFriendRsp, error)
	// 删除好友
	DeleteFriend(ctx context.Context, in *friend.DeleteFriendReq, opts ...grpc.CallOption) (*friend.DeleteFriendRsp, error)
	// gm加好友
	GmMakeFriendRelation(ctx context.Context, in *friend.GmMakeFriendRelationReq, opts ...grpc.CallOption) (*friend.GmMakeFriendRelationRsp, error)
	// 判断是否好友
	IsFriend(ctx context.Context, in *friend.IsFriendReq, opts ...grpc.CallOption) (*friend.IsFriendRsp, error)
	// 读取黑名单列表
	ReadBlackList(ctx context.Context, in *friend.ReadBlackListReq, opts ...grpc.CallOption) (*friend.ReadBlackListRsp, error)
	// 判断是否在黑名单中
	IsInBlackList(ctx context.Context, in *friend.IsInBlackListReq, opts ...grpc.CallOption) (*friend.IsInBlackListRsp, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) Apply(ctx context.Context, in *friend.ApplyReq, opts ...grpc.CallOption) (*friend.ApplyRsp, error) {
	out := new(friend.ApplyRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ApplyAnswer(ctx context.Context, in *friend.ApplyAnswerReq, opts ...grpc.CallOption) (*friend.ApplyAnswerRsp, error) {
	out := new(friend.ApplyAnswerRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/ApplyAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) Friends(ctx context.Context, in *friend.FriendsReq, opts ...grpc.CallOption) (*friend.FriendsRsp, error) {
	out := new(friend.FriendsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/Friends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) FriendDetail(ctx context.Context, in *friend.FriendDetailReq, opts ...grpc.CallOption) (*friend.FriendDetailRsp, error) {
	out := new(friend.FriendDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/FriendDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) Applications(ctx context.Context, in *friend.ApplicationsReq, opts ...grpc.CallOption) (*friend.ApplicationsRsp, error) {
	out := new(friend.ApplicationsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/Applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) UpdateFriend(ctx context.Context, in *friend.UpdateFriendReq, opts ...grpc.CallOption) (*friend.UpdateFriendRsp, error) {
	out := new(friend.UpdateFriendRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/UpdateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *friend.DeleteFriendReq, opts ...grpc.CallOption) (*friend.DeleteFriendRsp, error) {
	out := new(friend.DeleteFriendRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GmMakeFriendRelation(ctx context.Context, in *friend.GmMakeFriendRelationReq, opts ...grpc.CallOption) (*friend.GmMakeFriendRelationRsp, error) {
	out := new(friend.GmMakeFriendRelationRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/GmMakeFriendRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsFriend(ctx context.Context, in *friend.IsFriendReq, opts ...grpc.CallOption) (*friend.IsFriendRsp, error) {
	out := new(friend.IsFriendRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/IsFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ReadBlackList(ctx context.Context, in *friend.ReadBlackListReq, opts ...grpc.CallOption) (*friend.ReadBlackListRsp, error) {
	out := new(friend.ReadBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/ReadBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsInBlackList(ctx context.Context, in *friend.IsInBlackListReq, opts ...grpc.CallOption) (*friend.IsInBlackListRsp, error) {
	out := new(friend.IsInBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_friend.Friend/IsInBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
type FriendServer interface {
	// 好友申请
	Apply(context.Context, *friend.ApplyReq) (*friend.ApplyRsp, error)
	// 应答入群申请
	ApplyAnswer(context.Context, *friend.ApplyAnswerReq) (*friend.ApplyAnswerRsp, error)
	// 获取我的好友
	Friends(context.Context, *friend.FriendsReq) (*friend.FriendsRsp, error)
	// 好友详情
	FriendDetail(context.Context, *friend.FriendDetailReq) (*friend.FriendDetailRsp, error)
	// 好友申请记录,我申请的&申请我的
	Applications(context.Context, *friend.ApplicationsReq) (*friend.ApplicationsRsp, error)
	// 更新好友信息
	UpdateFriend(context.Context, *friend.UpdateFriendReq) (*friend.UpdateFriendRsp, error)
	// 删除好友
	DeleteFriend(context.Context, *friend.DeleteFriendReq) (*friend.DeleteFriendRsp, error)
	// gm加好友
	GmMakeFriendRelation(context.Context, *friend.GmMakeFriendRelationReq) (*friend.GmMakeFriendRelationRsp, error)
	// 判断是否好友
	IsFriend(context.Context, *friend.IsFriendReq) (*friend.IsFriendRsp, error)
	// 读取黑名单列表
	ReadBlackList(context.Context, *friend.ReadBlackListReq) (*friend.ReadBlackListRsp, error)
	// 判断是否在黑名单中
	IsInBlackList(context.Context, *friend.IsInBlackListReq) (*friend.IsInBlackListRsp, error)
}

// UnimplementedFriendServer can be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (*UnimplementedFriendServer) Apply(context.Context, *friend.ApplyReq) (*friend.ApplyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedFriendServer) ApplyAnswer(context.Context, *friend.ApplyAnswerReq) (*friend.ApplyAnswerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAnswer not implemented")
}
func (*UnimplementedFriendServer) Friends(context.Context, *friend.FriendsReq) (*friend.FriendsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Friends not implemented")
}
func (*UnimplementedFriendServer) FriendDetail(context.Context, *friend.FriendDetailReq) (*friend.FriendDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendDetail not implemented")
}
func (*UnimplementedFriendServer) Applications(context.Context, *friend.ApplicationsReq) (*friend.ApplicationsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applications not implemented")
}
func (*UnimplementedFriendServer) UpdateFriend(context.Context, *friend.UpdateFriendReq) (*friend.UpdateFriendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriend not implemented")
}
func (*UnimplementedFriendServer) DeleteFriend(context.Context, *friend.DeleteFriendReq) (*friend.DeleteFriendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (*UnimplementedFriendServer) GmMakeFriendRelation(context.Context, *friend.GmMakeFriendRelationReq) (*friend.GmMakeFriendRelationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmMakeFriendRelation not implemented")
}
func (*UnimplementedFriendServer) IsFriend(context.Context, *friend.IsFriendReq) (*friend.IsFriendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriend not implemented")
}
func (*UnimplementedFriendServer) ReadBlackList(context.Context, *friend.ReadBlackListReq) (*friend.ReadBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlackList not implemented")
}
func (*UnimplementedFriendServer) IsInBlackList(context.Context, *friend.IsInBlackListReq) (*friend.IsInBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInBlackList not implemented")
}

func RegisterFriendServer(s *grpc.Server, srv FriendServer) {
	s.RegisterService(&_Friend_serviceDesc, srv)
}

func _Friend_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.ApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).Apply(ctx, req.(*friend.ApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ApplyAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.ApplyAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/ApplyAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyAnswer(ctx, req.(*friend.ApplyAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_Friends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.FriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).Friends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/Friends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).Friends(ctx, req.(*friend.FriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_FriendDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.FriendDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).FriendDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/FriendDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).FriendDetail(ctx, req.(*friend.FriendDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.ApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).Applications(ctx, req.(*friend.ApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_UpdateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.UpdateFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).UpdateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/UpdateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).UpdateFriend(ctx, req.(*friend.UpdateFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*friend.DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GmMakeFriendRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.GmMakeFriendRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GmMakeFriendRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/GmMakeFriendRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GmMakeFriendRelation(ctx, req.(*friend.GmMakeFriendRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.IsFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/IsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsFriend(ctx, req.(*friend.IsFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ReadBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.ReadBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ReadBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/ReadBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ReadBlackList(ctx, req.(*friend.ReadBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsInBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(friend.IsInBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsInBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_friend.Friend/IsInBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsInBlackList(ctx, req.(*friend.IsInBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_friend.Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _Friend_Apply_Handler,
		},
		{
			MethodName: "ApplyAnswer",
			Handler:    _Friend_ApplyAnswer_Handler,
		},
		{
			MethodName: "Friends",
			Handler:    _Friend_Friends_Handler,
		},
		{
			MethodName: "FriendDetail",
			Handler:    _Friend_FriendDetail_Handler,
		},
		{
			MethodName: "Applications",
			Handler:    _Friend_Applications_Handler,
		},
		{
			MethodName: "UpdateFriend",
			Handler:    _Friend_UpdateFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "GmMakeFriendRelation",
			Handler:    _Friend_GmMakeFriendRelation_Handler,
		},
		{
			MethodName: "IsFriend",
			Handler:    _Friend_IsFriend_Handler,
		},
		{
			MethodName: "ReadBlackList",
			Handler:    _Friend_ReadBlackList_Handler,
		},
		{
			MethodName: "IsInBlackList",
			Handler:    _Friend_IsInBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/friend/friend.proto",
}
