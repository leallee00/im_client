// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/offline_msg/offlineMsg.proto

package offline_msg

import (
	context "context"
	offline_msg "github.com/leallee00/pb/pb_msg/offline_msg"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 当一次删除多条时，输入最后一条的time，将time之前所有的消息全部删除
// 当只进行单条删除，time设为0，通过sn进行单条消息的删除
type DeleteOfflineMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int64 `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Sn     int64 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Time   int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeleteOfflineMsgReq) Reset() {
	*x = DeleteOfflineMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfflineMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfflineMsgReq) ProtoMessage() {}

func (x *DeleteOfflineMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfflineMsgReq.ProtoReflect.Descriptor instead.
func (*DeleteOfflineMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteOfflineMsgReq) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *DeleteOfflineMsgReq) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *DeleteOfflineMsgReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type DeleteOfflineMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` //错误码
}

func (x *DeleteOfflineMsgRsp) Reset() {
	*x = DeleteOfflineMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfflineMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfflineMsgRsp) ProtoMessage() {}

func (x *DeleteOfflineMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfflineMsgRsp.ProtoReflect.Descriptor instead.
func (*DeleteOfflineMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_offline_msg_offlineMsg_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteOfflineMsgRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

var File_pb_grpc_offline_msg_offlineMsg_proto protoreflect.FileDescriptor

var file_pb_grpc_offline_msg_offlineMsg_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xe1, 0x0a, 0x0a, 0x0a,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x5e, 0x0a, 0x0e, 0x53, 0x61,
	0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0f, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x12, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12,
	0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x9a, 0x01,
	0x0a, 0x24, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x1a,
	0x37, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x11, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x73, 0x67, 0x4f, 0x66, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x4d, 0x73, 0x67, 0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x73, 0x67, 0x4f, 0x66, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x15, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x73, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65,
	0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_grpc_offline_msg_offlineMsg_proto_rawDescOnce sync.Once
	file_pb_grpc_offline_msg_offlineMsg_proto_rawDescData = file_pb_grpc_offline_msg_offlineMsg_proto_rawDesc
)

func file_pb_grpc_offline_msg_offlineMsg_proto_rawDescGZIP() []byte {
	file_pb_grpc_offline_msg_offlineMsg_proto_rawDescOnce.Do(func() {
		file_pb_grpc_offline_msg_offlineMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_grpc_offline_msg_offlineMsg_proto_rawDescData)
	})
	return file_pb_grpc_offline_msg_offlineMsg_proto_rawDescData
}

var file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pb_grpc_offline_msg_offlineMsg_proto_goTypes = []interface{}{
	(*DeleteOfflineMsgReq)(nil),                              // 0: pb_grpc_offlineMsg.DeleteOfflineMsgReq
	(*DeleteOfflineMsgRsp)(nil),                              // 1: pb_grpc_offlineMsg.DeleteOfflineMsgRsp
	(pb_pub.ErrCode)(0),                                      // 2: pb_pub.ErrCode
	(*offline_msg.SaveOfflineMsgReq)(nil),                    // 3: pb_msg_offlineMsg.SaveOfflineMsgReq
	(*offline_msg.FetchHistoryMsgReq)(nil),                   // 4: pb_msg_offlineMsg.FetchHistoryMsgReq
	(*offline_msg.FetchNewHistoryMsgReq)(nil),                // 5: pb_msg_offlineMsg.FetchNewHistoryMsgReq
	(*offline_msg.FetchOneHistoryMsgReq)(nil),                // 6: pb_msg_offlineMsg.FetchOneHistoryMsgReq
	(*offline_msg.DelHistoryMsgReq)(nil),                     // 7: pb_msg_offlineMsg.DelHistoryMsgReq
	(*offline_msg.ReadyForSyncOfflineMsgStatusReq)(nil),      // 8: pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusReq
	(*offline_msg.OfflineMsgStatueChangeNotifyReceived)(nil), // 9: pb_msg_offlineMsg.OfflineMsgStatueChangeNotifyReceived
	(*offline_msg.FetchChatSessionsReq)(nil),                 // 10: pb_msg_offlineMsg.FetchChatSessionsReq
	(*offline_msg.FetchChatHisMsgListOfSessionReq)(nil),      // 11: pb_msg_offlineMsg.FetchChatHisMsgListOfSessionReq
	(*offline_msg.DelChatSessionsReq)(nil),                   // 12: pb_msg_offlineMsg.DelChatSessionsReq
	(*offline_msg.ClearMsgOfSessionReq)(nil),                 // 13: pb_msg_offlineMsg.ClearMsgOfSessionReq
	(*offline_msg.FetchSysNotifyMsgListReq)(nil),             // 14: pb_msg_offlineMsg.FetchSysNotifyMsgListReq
	(*offline_msg.SaveOfflineMsgRsp)(nil),                    // 15: pb_msg_offlineMsg.SaveOfflineMsgRsp
	(*offline_msg.FetchHistoryMsgRsp)(nil),                   // 16: pb_msg_offlineMsg.FetchHistoryMsgRsp
	(*offline_msg.FetchNewHistoryMsgRsp)(nil),                // 17: pb_msg_offlineMsg.FetchNewHistoryMsgRsp
	(*offline_msg.FetchOneHistoryMsgRsp)(nil),                // 18: pb_msg_offlineMsg.FetchOneHistoryMsgRsp
	(*offline_msg.DelHistoryMsgRsp)(nil),                     // 19: pb_msg_offlineMsg.DelHistoryMsgRsp
	(*offline_msg.ReadyForSyncOfflineMsgStatusRsp)(nil),      // 20: pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusRsp
	(*offline_msg.FetchChatSessionsRsp)(nil),                 // 21: pb_msg_offlineMsg.FetchChatSessionsRsp
	(*offline_msg.FetchChatHisMsgListOfSessionRsp)(nil),      // 22: pb_msg_offlineMsg.FetchChatHisMsgListOfSessionRsp
	(*offline_msg.DelChatSessionsRsp)(nil),                   // 23: pb_msg_offlineMsg.DelChatSessionsRsp
	(*offline_msg.ClearMsgOfSessionRsp)(nil),                 // 24: pb_msg_offlineMsg.ClearMsgOfSessionRsp
	(*offline_msg.FetchSysNotifyMsgListRsp)(nil),             // 25: pb_msg_offlineMsg.FetchSysNotifyMsgListRsp
}
var file_pb_grpc_offline_msg_offlineMsg_proto_depIdxs = []int32{
	2,  // 0: pb_grpc_offlineMsg.DeleteOfflineMsgRsp.result:type_name -> pb_pub.ErrCode
	3,  // 1: pb_grpc_offlineMsg.OfflineMsg.SaveOfflineMsg:input_type -> pb_msg_offlineMsg.SaveOfflineMsgReq
	4,  // 2: pb_grpc_offlineMsg.OfflineMsg.FetchHistoryMsg:input_type -> pb_msg_offlineMsg.FetchHistoryMsgReq
	5,  // 3: pb_grpc_offlineMsg.OfflineMsg.FetchNewHistoryMsg:input_type -> pb_msg_offlineMsg.FetchNewHistoryMsgReq
	6,  // 4: pb_grpc_offlineMsg.OfflineMsg.FetchOneHistoryMsg:input_type -> pb_msg_offlineMsg.FetchOneHistoryMsgReq
	7,  // 5: pb_grpc_offlineMsg.OfflineMsg.DelHistoryMsg:input_type -> pb_msg_offlineMsg.DelHistoryMsgReq
	8,  // 6: pb_grpc_offlineMsg.OfflineMsg.ReadyForSyncOfflineMsgStatus:input_type -> pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusReq
	9,  // 7: pb_grpc_offlineMsg.OfflineMsg.OfflineMsgStatueChangeNotifyReceived:input_type -> pb_msg_offlineMsg.OfflineMsgStatueChangeNotifyReceived
	10, // 8: pb_grpc_offlineMsg.OfflineMsg.FetchChatSessions:input_type -> pb_msg_offlineMsg.FetchChatSessionsReq
	11, // 9: pb_grpc_offlineMsg.OfflineMsg.FetchChatHisMsgListOfSession:input_type -> pb_msg_offlineMsg.FetchChatHisMsgListOfSessionReq
	12, // 10: pb_grpc_offlineMsg.OfflineMsg.DelChatSessions:input_type -> pb_msg_offlineMsg.DelChatSessionsReq
	13, // 11: pb_grpc_offlineMsg.OfflineMsg.ClearMsgOfSession:input_type -> pb_msg_offlineMsg.ClearMsgOfSessionReq
	14, // 12: pb_grpc_offlineMsg.OfflineMsg.FetchSysNotifyMsgList:input_type -> pb_msg_offlineMsg.FetchSysNotifyMsgListReq
	15, // 13: pb_grpc_offlineMsg.OfflineMsg.SaveOfflineMsg:output_type -> pb_msg_offlineMsg.SaveOfflineMsgRsp
	16, // 14: pb_grpc_offlineMsg.OfflineMsg.FetchHistoryMsg:output_type -> pb_msg_offlineMsg.FetchHistoryMsgRsp
	17, // 15: pb_grpc_offlineMsg.OfflineMsg.FetchNewHistoryMsg:output_type -> pb_msg_offlineMsg.FetchNewHistoryMsgRsp
	18, // 16: pb_grpc_offlineMsg.OfflineMsg.FetchOneHistoryMsg:output_type -> pb_msg_offlineMsg.FetchOneHistoryMsgRsp
	19, // 17: pb_grpc_offlineMsg.OfflineMsg.DelHistoryMsg:output_type -> pb_msg_offlineMsg.DelHistoryMsgRsp
	20, // 18: pb_grpc_offlineMsg.OfflineMsg.ReadyForSyncOfflineMsgStatus:output_type -> pb_msg_offlineMsg.ReadyForSyncOfflineMsgStatusRsp
	9,  // 19: pb_grpc_offlineMsg.OfflineMsg.OfflineMsgStatueChangeNotifyReceived:output_type -> pb_msg_offlineMsg.OfflineMsgStatueChangeNotifyReceived
	21, // 20: pb_grpc_offlineMsg.OfflineMsg.FetchChatSessions:output_type -> pb_msg_offlineMsg.FetchChatSessionsRsp
	22, // 21: pb_grpc_offlineMsg.OfflineMsg.FetchChatHisMsgListOfSession:output_type -> pb_msg_offlineMsg.FetchChatHisMsgListOfSessionRsp
	23, // 22: pb_grpc_offlineMsg.OfflineMsg.DelChatSessions:output_type -> pb_msg_offlineMsg.DelChatSessionsRsp
	24, // 23: pb_grpc_offlineMsg.OfflineMsg.ClearMsgOfSession:output_type -> pb_msg_offlineMsg.ClearMsgOfSessionRsp
	25, // 24: pb_grpc_offlineMsg.OfflineMsg.FetchSysNotifyMsgList:output_type -> pb_msg_offlineMsg.FetchSysNotifyMsgListRsp
	13, // [13:25] is the sub-list for method output_type
	1,  // [1:13] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_pb_grpc_offline_msg_offlineMsg_proto_init() }
func file_pb_grpc_offline_msg_offlineMsg_proto_init() {
	if File_pb_grpc_offline_msg_offlineMsg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfflineMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfflineMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_offline_msg_offlineMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_offline_msg_offlineMsg_proto_goTypes,
		DependencyIndexes: file_pb_grpc_offline_msg_offlineMsg_proto_depIdxs,
		MessageInfos:      file_pb_grpc_offline_msg_offlineMsg_proto_msgTypes,
	}.Build()
	File_pb_grpc_offline_msg_offlineMsg_proto = out.File
	file_pb_grpc_offline_msg_offlineMsg_proto_rawDesc = nil
	file_pb_grpc_offline_msg_offlineMsg_proto_goTypes = nil
	file_pb_grpc_offline_msg_offlineMsg_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OfflineMsgClient is the client API for OfflineMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OfflineMsgClient interface {
	SaveOfflineMsg(ctx context.Context, in *offline_msg.SaveOfflineMsgReq, opts ...grpc.CallOption) (*offline_msg.SaveOfflineMsgRsp, error)
	// /////////////////////////////////////////
	//
	//	PrivateHistoryMsgReq,PrivateHistoryMsgRsp
	FetchHistoryMsg(ctx context.Context, in *offline_msg.FetchHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchHistoryMsgRsp, error)
	// 获取未读取消息
	FetchNewHistoryMsg(ctx context.Context, in *offline_msg.FetchNewHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchNewHistoryMsgRsp, error)
	// OnePrivateHistoryMsgReq,OneHistoryHistoryMsgRsp
	FetchOneHistoryMsg(ctx context.Context, in *offline_msg.FetchOneHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchOneHistoryMsgRsp, error)
	// DelPrivateHistoryMsgReq,DelGroupHistoryMsgRsp
	DelHistoryMsg(ctx context.Context, in *offline_msg.DelHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.DelHistoryMsgRsp, error)
	// 准备好接收用户离线消息，在客户端拉去完离线消息后发送，对以前获取的消息状态进行更新
	ReadyForSyncOfflineMsgStatus(ctx context.Context, in *offline_msg.ReadyForSyncOfflineMsgStatusReq, opts ...grpc.CallOption) (*offline_msg.ReadyForSyncOfflineMsgStatusRsp, error)
	// 准备好接收用户离线消息，在客户端拉去完离线消息后发送，对以前获取的消息状态进行更新
	OfflineMsgStatueChangeNotifyReceived(ctx context.Context, in *offline_msg.OfflineMsgStatueChangeNotifyReceived, opts ...grpc.CallOption) (*offline_msg.OfflineMsgStatueChangeNotifyReceived, error)
	// 分页获取会话列表，排序规则：优先有新消息排列，其次更新时间倒序排列
	FetchChatSessions(ctx context.Context, in *offline_msg.FetchChatSessionsReq, opts ...grpc.CallOption) (*offline_msg.FetchChatSessionsRsp, error)
	// 分页获取指定会话的消息列表
	FetchChatHisMsgListOfSession(ctx context.Context, in *offline_msg.FetchChatHisMsgListOfSessionReq, opts ...grpc.CallOption) (*offline_msg.FetchChatHisMsgListOfSessionRsp, error)
	// 删除会话, 解除好友关系时调用
	DelChatSessions(ctx context.Context, in *offline_msg.DelChatSessionsReq, opts ...grpc.CallOption) (*offline_msg.DelChatSessionsRsp, error)
	// 清除消息 客户端从聊天列表删除一项聊天会话时调用，这时对方可能是好友，也可能不是
	ClearMsgOfSession(ctx context.Context, in *offline_msg.ClearMsgOfSessionReq, opts ...grpc.CallOption) (*offline_msg.ClearMsgOfSessionRsp, error)
	// 分页获取系统通知消息，获取后直接删除
	FetchSysNotifyMsgList(ctx context.Context, in *offline_msg.FetchSysNotifyMsgListReq, opts ...grpc.CallOption) (*offline_msg.FetchSysNotifyMsgListRsp, error)
}

type offlineMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineMsgClient(cc grpc.ClientConnInterface) OfflineMsgClient {
	return &offlineMsgClient{cc}
}

func (c *offlineMsgClient) SaveOfflineMsg(ctx context.Context, in *offline_msg.SaveOfflineMsgReq, opts ...grpc.CallOption) (*offline_msg.SaveOfflineMsgRsp, error) {
	out := new(offline_msg.SaveOfflineMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/SaveOfflineMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchHistoryMsg(ctx context.Context, in *offline_msg.FetchHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchHistoryMsgRsp, error) {
	out := new(offline_msg.FetchHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchNewHistoryMsg(ctx context.Context, in *offline_msg.FetchNewHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchNewHistoryMsgRsp, error) {
	out := new(offline_msg.FetchNewHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchNewHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchOneHistoryMsg(ctx context.Context, in *offline_msg.FetchOneHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.FetchOneHistoryMsgRsp, error) {
	out := new(offline_msg.FetchOneHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchOneHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) DelHistoryMsg(ctx context.Context, in *offline_msg.DelHistoryMsgReq, opts ...grpc.CallOption) (*offline_msg.DelHistoryMsgRsp, error) {
	out := new(offline_msg.DelHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/DelHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) ReadyForSyncOfflineMsgStatus(ctx context.Context, in *offline_msg.ReadyForSyncOfflineMsgStatusReq, opts ...grpc.CallOption) (*offline_msg.ReadyForSyncOfflineMsgStatusRsp, error) {
	out := new(offline_msg.ReadyForSyncOfflineMsgStatusRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/ReadyForSyncOfflineMsgStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) OfflineMsgStatueChangeNotifyReceived(ctx context.Context, in *offline_msg.OfflineMsgStatueChangeNotifyReceived, opts ...grpc.CallOption) (*offline_msg.OfflineMsgStatueChangeNotifyReceived, error) {
	out := new(offline_msg.OfflineMsgStatueChangeNotifyReceived)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/OfflineMsgStatueChangeNotifyReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchChatSessions(ctx context.Context, in *offline_msg.FetchChatSessionsReq, opts ...grpc.CallOption) (*offline_msg.FetchChatSessionsRsp, error) {
	out := new(offline_msg.FetchChatSessionsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchChatSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchChatHisMsgListOfSession(ctx context.Context, in *offline_msg.FetchChatHisMsgListOfSessionReq, opts ...grpc.CallOption) (*offline_msg.FetchChatHisMsgListOfSessionRsp, error) {
	out := new(offline_msg.FetchChatHisMsgListOfSessionRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchChatHisMsgListOfSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) DelChatSessions(ctx context.Context, in *offline_msg.DelChatSessionsReq, opts ...grpc.CallOption) (*offline_msg.DelChatSessionsRsp, error) {
	out := new(offline_msg.DelChatSessionsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/DelChatSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) ClearMsgOfSession(ctx context.Context, in *offline_msg.ClearMsgOfSessionReq, opts ...grpc.CallOption) (*offline_msg.ClearMsgOfSessionRsp, error) {
	out := new(offline_msg.ClearMsgOfSessionRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/ClearMsgOfSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineMsgClient) FetchSysNotifyMsgList(ctx context.Context, in *offline_msg.FetchSysNotifyMsgListReq, opts ...grpc.CallOption) (*offline_msg.FetchSysNotifyMsgListRsp, error) {
	out := new(offline_msg.FetchSysNotifyMsgListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_offlineMsg.OfflineMsg/FetchSysNotifyMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineMsgServer is the server API for OfflineMsg service.
type OfflineMsgServer interface {
	SaveOfflineMsg(context.Context, *offline_msg.SaveOfflineMsgReq) (*offline_msg.SaveOfflineMsgRsp, error)
	// /////////////////////////////////////////
	//
	//	PrivateHistoryMsgReq,PrivateHistoryMsgRsp
	FetchHistoryMsg(context.Context, *offline_msg.FetchHistoryMsgReq) (*offline_msg.FetchHistoryMsgRsp, error)
	// 获取未读取消息
	FetchNewHistoryMsg(context.Context, *offline_msg.FetchNewHistoryMsgReq) (*offline_msg.FetchNewHistoryMsgRsp, error)
	// OnePrivateHistoryMsgReq,OneHistoryHistoryMsgRsp
	FetchOneHistoryMsg(context.Context, *offline_msg.FetchOneHistoryMsgReq) (*offline_msg.FetchOneHistoryMsgRsp, error)
	// DelPrivateHistoryMsgReq,DelGroupHistoryMsgRsp
	DelHistoryMsg(context.Context, *offline_msg.DelHistoryMsgReq) (*offline_msg.DelHistoryMsgRsp, error)
	// 准备好接收用户离线消息，在客户端拉去完离线消息后发送，对以前获取的消息状态进行更新
	ReadyForSyncOfflineMsgStatus(context.Context, *offline_msg.ReadyForSyncOfflineMsgStatusReq) (*offline_msg.ReadyForSyncOfflineMsgStatusRsp, error)
	// 准备好接收用户离线消息，在客户端拉去完离线消息后发送，对以前获取的消息状态进行更新
	OfflineMsgStatueChangeNotifyReceived(context.Context, *offline_msg.OfflineMsgStatueChangeNotifyReceived) (*offline_msg.OfflineMsgStatueChangeNotifyReceived, error)
	// 分页获取会话列表，排序规则：优先有新消息排列，其次更新时间倒序排列
	FetchChatSessions(context.Context, *offline_msg.FetchChatSessionsReq) (*offline_msg.FetchChatSessionsRsp, error)
	// 分页获取指定会话的消息列表
	FetchChatHisMsgListOfSession(context.Context, *offline_msg.FetchChatHisMsgListOfSessionReq) (*offline_msg.FetchChatHisMsgListOfSessionRsp, error)
	// 删除会话, 解除好友关系时调用
	DelChatSessions(context.Context, *offline_msg.DelChatSessionsReq) (*offline_msg.DelChatSessionsRsp, error)
	// 清除消息 客户端从聊天列表删除一项聊天会话时调用，这时对方可能是好友，也可能不是
	ClearMsgOfSession(context.Context, *offline_msg.ClearMsgOfSessionReq) (*offline_msg.ClearMsgOfSessionRsp, error)
	// 分页获取系统通知消息，获取后直接删除
	FetchSysNotifyMsgList(context.Context, *offline_msg.FetchSysNotifyMsgListReq) (*offline_msg.FetchSysNotifyMsgListRsp, error)
}

// UnimplementedOfflineMsgServer can be embedded to have forward compatible implementations.
type UnimplementedOfflineMsgServer struct {
}

func (*UnimplementedOfflineMsgServer) SaveOfflineMsg(context.Context, *offline_msg.SaveOfflineMsgReq) (*offline_msg.SaveOfflineMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOfflineMsg not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchHistoryMsg(context.Context, *offline_msg.FetchHistoryMsgReq) (*offline_msg.FetchHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHistoryMsg not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchNewHistoryMsg(context.Context, *offline_msg.FetchNewHistoryMsgReq) (*offline_msg.FetchNewHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNewHistoryMsg not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchOneHistoryMsg(context.Context, *offline_msg.FetchOneHistoryMsgReq) (*offline_msg.FetchOneHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOneHistoryMsg not implemented")
}
func (*UnimplementedOfflineMsgServer) DelHistoryMsg(context.Context, *offline_msg.DelHistoryMsgReq) (*offline_msg.DelHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHistoryMsg not implemented")
}
func (*UnimplementedOfflineMsgServer) ReadyForSyncOfflineMsgStatus(context.Context, *offline_msg.ReadyForSyncOfflineMsgStatusReq) (*offline_msg.ReadyForSyncOfflineMsgStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyForSyncOfflineMsgStatus not implemented")
}
func (*UnimplementedOfflineMsgServer) OfflineMsgStatueChangeNotifyReceived(context.Context, *offline_msg.OfflineMsgStatueChangeNotifyReceived) (*offline_msg.OfflineMsgStatueChangeNotifyReceived, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineMsgStatueChangeNotifyReceived not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchChatSessions(context.Context, *offline_msg.FetchChatSessionsReq) (*offline_msg.FetchChatSessionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChatSessions not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchChatHisMsgListOfSession(context.Context, *offline_msg.FetchChatHisMsgListOfSessionReq) (*offline_msg.FetchChatHisMsgListOfSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChatHisMsgListOfSession not implemented")
}
func (*UnimplementedOfflineMsgServer) DelChatSessions(context.Context, *offline_msg.DelChatSessionsReq) (*offline_msg.DelChatSessionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChatSessions not implemented")
}
func (*UnimplementedOfflineMsgServer) ClearMsgOfSession(context.Context, *offline_msg.ClearMsgOfSessionReq) (*offline_msg.ClearMsgOfSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMsgOfSession not implemented")
}
func (*UnimplementedOfflineMsgServer) FetchSysNotifyMsgList(context.Context, *offline_msg.FetchSysNotifyMsgListReq) (*offline_msg.FetchSysNotifyMsgListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSysNotifyMsgList not implemented")
}

func RegisterOfflineMsgServer(s *grpc.Server, srv OfflineMsgServer) {
	s.RegisterService(&_OfflineMsg_serviceDesc, srv)
}

func _OfflineMsg_SaveOfflineMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.SaveOfflineMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).SaveOfflineMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/SaveOfflineMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).SaveOfflineMsg(ctx, req.(*offline_msg.SaveOfflineMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchHistoryMsg(ctx, req.(*offline_msg.FetchHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchNewHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchNewHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchNewHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchNewHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchNewHistoryMsg(ctx, req.(*offline_msg.FetchNewHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchOneHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchOneHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchOneHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchOneHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchOneHistoryMsg(ctx, req.(*offline_msg.FetchOneHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_DelHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.DelHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).DelHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/DelHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).DelHistoryMsg(ctx, req.(*offline_msg.DelHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_ReadyForSyncOfflineMsgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.ReadyForSyncOfflineMsgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).ReadyForSyncOfflineMsgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/ReadyForSyncOfflineMsgStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).ReadyForSyncOfflineMsgStatus(ctx, req.(*offline_msg.ReadyForSyncOfflineMsgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_OfflineMsgStatueChangeNotifyReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.OfflineMsgStatueChangeNotifyReceived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).OfflineMsgStatueChangeNotifyReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/OfflineMsgStatueChangeNotifyReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).OfflineMsgStatueChangeNotifyReceived(ctx, req.(*offline_msg.OfflineMsgStatueChangeNotifyReceived))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchChatSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchChatSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchChatSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchChatSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchChatSessions(ctx, req.(*offline_msg.FetchChatSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchChatHisMsgListOfSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchChatHisMsgListOfSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchChatHisMsgListOfSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchChatHisMsgListOfSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchChatHisMsgListOfSession(ctx, req.(*offline_msg.FetchChatHisMsgListOfSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_DelChatSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.DelChatSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).DelChatSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/DelChatSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).DelChatSessions(ctx, req.(*offline_msg.DelChatSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_ClearMsgOfSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.ClearMsgOfSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).ClearMsgOfSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/ClearMsgOfSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).ClearMsgOfSession(ctx, req.(*offline_msg.ClearMsgOfSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineMsg_FetchSysNotifyMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(offline_msg.FetchSysNotifyMsgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineMsgServer).FetchSysNotifyMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_offlineMsg.OfflineMsg/FetchSysNotifyMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineMsgServer).FetchSysNotifyMsgList(ctx, req.(*offline_msg.FetchSysNotifyMsgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OfflineMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_offlineMsg.OfflineMsg",
	HandlerType: (*OfflineMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOfflineMsg",
			Handler:    _OfflineMsg_SaveOfflineMsg_Handler,
		},
		{
			MethodName: "FetchHistoryMsg",
			Handler:    _OfflineMsg_FetchHistoryMsg_Handler,
		},
		{
			MethodName: "FetchNewHistoryMsg",
			Handler:    _OfflineMsg_FetchNewHistoryMsg_Handler,
		},
		{
			MethodName: "FetchOneHistoryMsg",
			Handler:    _OfflineMsg_FetchOneHistoryMsg_Handler,
		},
		{
			MethodName: "DelHistoryMsg",
			Handler:    _OfflineMsg_DelHistoryMsg_Handler,
		},
		{
			MethodName: "ReadyForSyncOfflineMsgStatus",
			Handler:    _OfflineMsg_ReadyForSyncOfflineMsgStatus_Handler,
		},
		{
			MethodName: "OfflineMsgStatueChangeNotifyReceived",
			Handler:    _OfflineMsg_OfflineMsgStatueChangeNotifyReceived_Handler,
		},
		{
			MethodName: "FetchChatSessions",
			Handler:    _OfflineMsg_FetchChatSessions_Handler,
		},
		{
			MethodName: "FetchChatHisMsgListOfSession",
			Handler:    _OfflineMsg_FetchChatHisMsgListOfSession_Handler,
		},
		{
			MethodName: "DelChatSessions",
			Handler:    _OfflineMsg_DelChatSessions_Handler,
		},
		{
			MethodName: "ClearMsgOfSession",
			Handler:    _OfflineMsg_ClearMsgOfSession_Handler,
		},
		{
			MethodName: "FetchSysNotifyMsgList",
			Handler:    _OfflineMsg_FetchSysNotifyMsgList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/offline_msg/offlineMsg.proto",
}
