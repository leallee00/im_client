// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/msg_sender/msgSender.proto

package msg_sender

import (
	context "context"
	pub "github.com/leallee00/pb/pb_grpc/pub"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_msg_sender_msgSender_proto protoreflect.FileDescriptor

var file_pb_grpc_msg_sender_msgSender_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x73,
	0x67, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x75, 0x62, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9b, 0x02, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x41, 0x69, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x69,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f,
	0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pb_grpc_msg_sender_msgSender_proto_goTypes = []interface{}{
	(*pub.SendToAimUserReq)(nil),  // 0: pb_grpc_pub.SendToAimUserReq
	(*pub.SendToAimGroupReq)(nil), // 1: pb_grpc_pub.SendToAimGroupReq
	(*pub.SendToAllUserReq)(nil),  // 2: pb_grpc_pub.SendToAllUserReq
	(*pub.SendToAllGroupReq)(nil), // 3: pb_grpc_pub.SendToAllGroupReq
	(*pb_pub.CommRsp)(nil),        // 4: pb_pub.CommRsp
}
var file_pb_grpc_msg_sender_msgSender_proto_depIdxs = []int32{
	0, // 0: pb_grpc_msgSender.MsgSender.SendToAimUser:input_type -> pb_grpc_pub.SendToAimUserReq
	1, // 1: pb_grpc_msgSender.MsgSender.SendToAimGroup:input_type -> pb_grpc_pub.SendToAimGroupReq
	2, // 2: pb_grpc_msgSender.MsgSender.SendToAllUser:input_type -> pb_grpc_pub.SendToAllUserReq
	3, // 3: pb_grpc_msgSender.MsgSender.SendToAllGroup:input_type -> pb_grpc_pub.SendToAllGroupReq
	4, // 4: pb_grpc_msgSender.MsgSender.SendToAimUser:output_type -> pb_pub.CommRsp
	4, // 5: pb_grpc_msgSender.MsgSender.SendToAimGroup:output_type -> pb_pub.CommRsp
	4, // 6: pb_grpc_msgSender.MsgSender.SendToAllUser:output_type -> pb_pub.CommRsp
	4, // 7: pb_grpc_msgSender.MsgSender.SendToAllGroup:output_type -> pb_pub.CommRsp
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_msg_sender_msgSender_proto_init() }
func file_pb_grpc_msg_sender_msgSender_proto_init() {
	if File_pb_grpc_msg_sender_msgSender_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_msg_sender_msgSender_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_msg_sender_msgSender_proto_goTypes,
		DependencyIndexes: file_pb_grpc_msg_sender_msgSender_proto_depIdxs,
	}.Build()
	File_pb_grpc_msg_sender_msgSender_proto = out.File
	file_pb_grpc_msg_sender_msgSender_proto_rawDesc = nil
	file_pb_grpc_msg_sender_msgSender_proto_goTypes = nil
	file_pb_grpc_msg_sender_msgSender_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MsgSenderClient is the client API for MsgSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgSenderClient interface {
	// 发送到指定用户
	SendToAimUser(ctx context.Context, in *pub.SendToAimUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到指定群
	SendToAimGroup(ctx context.Context, in *pub.SendToAimGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到所有用户
	SendToAllUser(ctx context.Context, in *pub.SendToAllUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAllGroup(ctx context.Context, in *pub.SendToAllGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
}

type msgSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgSenderClient(cc grpc.ClientConnInterface) MsgSenderClient {
	return &msgSenderClient{cc}
}

func (c *msgSenderClient) SendToAimUser(ctx context.Context, in *pub.SendToAimUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgSender.MsgSender/SendToAimUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgSenderClient) SendToAimGroup(ctx context.Context, in *pub.SendToAimGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgSender.MsgSender/SendToAimGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgSenderClient) SendToAllUser(ctx context.Context, in *pub.SendToAllUserReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgSender.MsgSender/SendToAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgSenderClient) SendToAllGroup(ctx context.Context, in *pub.SendToAllGroupReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_msgSender.MsgSender/SendToAllGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgSenderServer is the server API for MsgSender service.
type MsgSenderServer interface {
	// 发送到指定用户
	SendToAimUser(context.Context, *pub.SendToAimUserReq) (*pb_pub.CommRsp, error)
	// 发送到指定群
	SendToAimGroup(context.Context, *pub.SendToAimGroupReq) (*pb_pub.CommRsp, error)
	// 发送到所有用户
	SendToAllUser(context.Context, *pub.SendToAllUserReq) (*pb_pub.CommRsp, error)
	// 发送到所有群
	SendToAllGroup(context.Context, *pub.SendToAllGroupReq) (*pb_pub.CommRsp, error)
}

// UnimplementedMsgSenderServer can be embedded to have forward compatible implementations.
type UnimplementedMsgSenderServer struct {
}

func (*UnimplementedMsgSenderServer) SendToAimUser(context.Context, *pub.SendToAimUserReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAimUser not implemented")
}
func (*UnimplementedMsgSenderServer) SendToAimGroup(context.Context, *pub.SendToAimGroupReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAimGroup not implemented")
}
func (*UnimplementedMsgSenderServer) SendToAllUser(context.Context, *pub.SendToAllUserReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAllUser not implemented")
}
func (*UnimplementedMsgSenderServer) SendToAllGroup(context.Context, *pub.SendToAllGroupReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAllGroup not implemented")
}

func RegisterMsgSenderServer(s *grpc.Server, srv MsgSenderServer) {
	s.RegisterService(&_MsgSender_serviceDesc, srv)
}

func _MsgSender_SendToAimUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAimUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSenderServer).SendToAimUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgSender.MsgSender/SendToAimUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSenderServer).SendToAimUser(ctx, req.(*pub.SendToAimUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgSender_SendToAimGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAimGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSenderServer).SendToAimGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgSender.MsgSender/SendToAimGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSenderServer).SendToAimGroup(ctx, req.(*pub.SendToAimGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgSender_SendToAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAllUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSenderServer).SendToAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgSender.MsgSender/SendToAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSenderServer).SendToAllUser(ctx, req.(*pub.SendToAllUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgSender_SendToAllGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pub.SendToAllGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSenderServer).SendToAllGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_msgSender.MsgSender/SendToAllGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSenderServer).SendToAllGroup(ctx, req.(*pub.SendToAllGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_msgSender.MsgSender",
	HandlerType: (*MsgSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToAimUser",
			Handler:    _MsgSender_SendToAimUser_Handler,
		},
		{
			MethodName: "SendToAimGroup",
			Handler:    _MsgSender_SendToAimGroup_Handler,
		},
		{
			MethodName: "SendToAllUser",
			Handler:    _MsgSender_SendToAllUser_Handler,
		},
		{
			MethodName: "SendToAllGroup",
			Handler:    _MsgSender_SendToAllGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/msg_sender/msgSender.proto",
}
