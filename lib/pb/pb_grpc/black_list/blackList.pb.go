// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/black_list/blackList.proto

package black_list

import (
	context "context"
	black_list "github.com/leallee00/pb/pb_msg/black_list"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_black_list_blackList_proto protoreflect.FileDescriptor

var file_pb_grpc_black_list_blackList_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x21, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x80, 0x03, 0x0a, 0x09, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_pb_grpc_black_list_blackList_proto_goTypes = []interface{}{
	(*black_list.SaveBlackListReq)(nil),   // 0: pb_msg_blackList.SaveBlackListReq
	(*black_list.ReadBlackListReq)(nil),   // 1: pb_msg_blackList.ReadBlackListReq
	(*black_list.DeleteBlackListReq)(nil), // 2: pb_msg_blackList.DeleteBlackListReq
	(*black_list.JudgeBlackListReq)(nil),  // 3: pb_msg_blackList.JudgeBlackListReq
	(*black_list.SaveBlackListRsp)(nil),   // 4: pb_msg_blackList.SaveBlackListRsp
	(*black_list.ReadBlackListRsp)(nil),   // 5: pb_msg_blackList.ReadBlackListRsp
	(*black_list.DeleteBlackListRsp)(nil), // 6: pb_msg_blackList.DeleteBlackListRsp
	(*black_list.JudgeBlackListRsp)(nil),  // 7: pb_msg_blackList.JudgeBlackListRsp
}
var file_pb_grpc_black_list_blackList_proto_depIdxs = []int32{
	0, // 0: pb_grpc_blackList.BlackList.SaveBlackList:input_type -> pb_msg_blackList.SaveBlackListReq
	1, // 1: pb_grpc_blackList.BlackList.ReadBlackList:input_type -> pb_msg_blackList.ReadBlackListReq
	2, // 2: pb_grpc_blackList.BlackList.DeleteBlackList:input_type -> pb_msg_blackList.DeleteBlackListReq
	3, // 3: pb_grpc_blackList.BlackList.JudgeBlackList:input_type -> pb_msg_blackList.JudgeBlackListReq
	4, // 4: pb_grpc_blackList.BlackList.SaveBlackList:output_type -> pb_msg_blackList.SaveBlackListRsp
	5, // 5: pb_grpc_blackList.BlackList.ReadBlackList:output_type -> pb_msg_blackList.ReadBlackListRsp
	6, // 6: pb_grpc_blackList.BlackList.DeleteBlackList:output_type -> pb_msg_blackList.DeleteBlackListRsp
	7, // 7: pb_grpc_blackList.BlackList.JudgeBlackList:output_type -> pb_msg_blackList.JudgeBlackListRsp
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_black_list_blackList_proto_init() }
func file_pb_grpc_black_list_blackList_proto_init() {
	if File_pb_grpc_black_list_blackList_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_black_list_blackList_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_black_list_blackList_proto_goTypes,
		DependencyIndexes: file_pb_grpc_black_list_blackList_proto_depIdxs,
	}.Build()
	File_pb_grpc_black_list_blackList_proto = out.File
	file_pb_grpc_black_list_blackList_proto_rawDesc = nil
	file_pb_grpc_black_list_blackList_proto_goTypes = nil
	file_pb_grpc_black_list_blackList_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlackListClient is the client API for BlackList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlackListClient interface {
	// 加入黑名单
	SaveBlackList(ctx context.Context, in *black_list.SaveBlackListReq, opts ...grpc.CallOption) (*black_list.SaveBlackListRsp, error)
	// 读取黑名单列表
	ReadBlackList(ctx context.Context, in *black_list.ReadBlackListReq, opts ...grpc.CallOption) (*black_list.ReadBlackListRsp, error)
	// 从黑名单移除
	DeleteBlackList(ctx context.Context, in *black_list.DeleteBlackListReq, opts ...grpc.CallOption) (*black_list.DeleteBlackListRsp, error)
	// 判断aimuser是否在srcuser的黑名单列表中
	JudgeBlackList(ctx context.Context, in *black_list.JudgeBlackListReq, opts ...grpc.CallOption) (*black_list.JudgeBlackListRsp, error)
}

type blackListClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackListClient(cc grpc.ClientConnInterface) BlackListClient {
	return &blackListClient{cc}
}

func (c *blackListClient) SaveBlackList(ctx context.Context, in *black_list.SaveBlackListReq, opts ...grpc.CallOption) (*black_list.SaveBlackListRsp, error) {
	out := new(black_list.SaveBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_blackList.BlackList/SaveBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListClient) ReadBlackList(ctx context.Context, in *black_list.ReadBlackListReq, opts ...grpc.CallOption) (*black_list.ReadBlackListRsp, error) {
	out := new(black_list.ReadBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_blackList.BlackList/ReadBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListClient) DeleteBlackList(ctx context.Context, in *black_list.DeleteBlackListReq, opts ...grpc.CallOption) (*black_list.DeleteBlackListRsp, error) {
	out := new(black_list.DeleteBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_blackList.BlackList/DeleteBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListClient) JudgeBlackList(ctx context.Context, in *black_list.JudgeBlackListReq, opts ...grpc.CallOption) (*black_list.JudgeBlackListRsp, error) {
	out := new(black_list.JudgeBlackListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_blackList.BlackList/JudgeBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackListServer is the server API for BlackList service.
type BlackListServer interface {
	// 加入黑名单
	SaveBlackList(context.Context, *black_list.SaveBlackListReq) (*black_list.SaveBlackListRsp, error)
	// 读取黑名单列表
	ReadBlackList(context.Context, *black_list.ReadBlackListReq) (*black_list.ReadBlackListRsp, error)
	// 从黑名单移除
	DeleteBlackList(context.Context, *black_list.DeleteBlackListReq) (*black_list.DeleteBlackListRsp, error)
	// 判断aimuser是否在srcuser的黑名单列表中
	JudgeBlackList(context.Context, *black_list.JudgeBlackListReq) (*black_list.JudgeBlackListRsp, error)
}

// UnimplementedBlackListServer can be embedded to have forward compatible implementations.
type UnimplementedBlackListServer struct {
}

func (*UnimplementedBlackListServer) SaveBlackList(context.Context, *black_list.SaveBlackListReq) (*black_list.SaveBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBlackList not implemented")
}
func (*UnimplementedBlackListServer) ReadBlackList(context.Context, *black_list.ReadBlackListReq) (*black_list.ReadBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlackList not implemented")
}
func (*UnimplementedBlackListServer) DeleteBlackList(context.Context, *black_list.DeleteBlackListReq) (*black_list.DeleteBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlackList not implemented")
}
func (*UnimplementedBlackListServer) JudgeBlackList(context.Context, *black_list.JudgeBlackListReq) (*black_list.JudgeBlackListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeBlackList not implemented")
}

func RegisterBlackListServer(s *grpc.Server, srv BlackListServer) {
	s.RegisterService(&_BlackList_serviceDesc, srv)
}

func _BlackList_SaveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(black_list.SaveBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServer).SaveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_blackList.BlackList/SaveBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServer).SaveBlackList(ctx, req.(*black_list.SaveBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackList_ReadBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(black_list.ReadBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServer).ReadBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_blackList.BlackList/ReadBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServer).ReadBlackList(ctx, req.(*black_list.ReadBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackList_DeleteBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(black_list.DeleteBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServer).DeleteBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_blackList.BlackList/DeleteBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServer).DeleteBlackList(ctx, req.(*black_list.DeleteBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackList_JudgeBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(black_list.JudgeBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServer).JudgeBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_blackList.BlackList/JudgeBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServer).JudgeBlackList(ctx, req.(*black_list.JudgeBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlackList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_blackList.BlackList",
	HandlerType: (*BlackListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBlackList",
			Handler:    _BlackList_SaveBlackList_Handler,
		},
		{
			MethodName: "ReadBlackList",
			Handler:    _BlackList_ReadBlackList_Handler,
		},
		{
			MethodName: "DeleteBlackList",
			Handler:    _BlackList_DeleteBlackList_Handler,
		},
		{
			MethodName: "JudgeBlackList",
			Handler:    _BlackList_JudgeBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/black_list/blackList.proto",
}
