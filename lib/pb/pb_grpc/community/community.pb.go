// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/community/community.proto

package community

import (
	context "context"
	community "github.com/leallee00/pb/pb_msg/community"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pb_grpc_community_community_proto protoreflect.FileDescriptor

var file_pb_grpc_community_community_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0x20, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xda, 0x1e, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x73,
	0x70, 0x12, 0x51, 0x0a, 0x0b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x51, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x69, 0x6b, 0x65, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x69, 0x6b,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x55,
	0x6e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x0a, 0x55, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x55, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x3f, 0x0a,
	0x05, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x52, 0x73, 0x70, 0x12, 0x42,
	0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x5d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x3f,
	0x0a, 0x05, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x4e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x73, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4b,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x73, 0x12,
	0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x4b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x57,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x73, 0x52, 0x73, 0x70,
	0x12, 0x57, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4b,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pb_grpc_community_community_proto_goTypes = []interface{}{
	(*community.CreateCommunityReq)(nil),  // 0: pb_msg_community.CreateCommunityReq
	(*community.UpdateCommunityReq)(nil),  // 1: pb_msg_community.UpdateCommunityReq
	(*community.ApplyJoinReq)(nil),        // 2: pb_msg_community.ApplyJoinReq
	(*community.AnswerApplyReq)(nil),      // 3: pb_msg_community.AnswerApplyReq
	(*community.InviteJoinReq)(nil),       // 4: pb_msg_community.InviteJoinReq
	(*community.AnswerInviteReq)(nil),     // 5: pb_msg_community.AnswerInviteReq
	(*community.JoinCommunityReq)(nil),    // 6: pb_msg_community.JoinCommunityReq
	(*community.QuitCommunityReq)(nil),    // 7: pb_msg_community.QuitCommunityReq
	(*community.UpdateMemberReq)(nil),     // 8: pb_msg_community.UpdateMemberReq
	(*community.AddTopicReq)(nil),         // 9: pb_msg_community.AddTopicReq
	(*community.AddGiftReq)(nil),          // 10: pb_msg_community.AddGiftReq
	(*community.PostReq)(nil),             // 11: pb_msg_community.PostReq
	(*community.CommentReq)(nil),          // 12: pb_msg_community.CommentReq
	(*community.ReplyReq)(nil),            // 13: pb_msg_community.ReplyReq
	(*community.LikeReq)(nil),             // 14: pb_msg_community.LikeReq
	(*community.UnlikeReq)(nil),           // 15: pb_msg_community.UnlikeReq
	(*community.ShareReq)(nil),            // 16: pb_msg_community.ShareReq
	(*community.VoteReq)(nil),             // 17: pb_msg_community.VoteReq
	(*community.WatchReq)(nil),            // 18: pb_msg_community.WatchReq
	(*community.UnwatchReq)(nil),          // 19: pb_msg_community.UnwatchReq
	(*community.AwardReq)(nil),            // 20: pb_msg_community.AwardReq
	(*community.FavoriteReq)(nil),         // 21: pb_msg_community.FavoriteReq
	(*community.UnfavoriteReq)(nil),       // 22: pb_msg_community.UnfavoriteReq
	(*community.ShootReq)(nil),            // 23: pb_msg_community.ShootReq
	(*community.FollowReq)(nil),           // 24: pb_msg_community.FollowReq
	(*community.UnfollowReq)(nil),         // 25: pb_msg_community.UnfollowReq
	(*community.ParticipateReq)(nil),      // 26: pb_msg_community.ParticipateReq
	(*community.UnparticipateReq)(nil),    // 27: pb_msg_community.UnparticipateReq
	(*community.MembersReq)(nil),          // 28: pb_msg_community.MembersReq
	(*community.CommunityDetailReq)(nil),  // 29: pb_msg_community.CommunityDetailReq
	(*community.PostsReq)(nil),            // 30: pb_msg_community.PostsReq
	(*community.PostDetailReq)(nil),       // 31: pb_msg_community.PostDetailReq
	(*community.CommentsReq)(nil),         // 32: pb_msg_community.CommentsReq
	(*community.CommentDetailReq)(nil),    // 33: pb_msg_community.CommentDetailReq
	(*community.RepliesReq)(nil),          // 34: pb_msg_community.RepliesReq
	(*community.BarragesReq)(nil),         // 35: pb_msg_community.BarragesReq
	(*community.UserCommunitiesReq)(nil),  // 36: pb_msg_community.UserCommunitiesReq
	(*community.AllCommunitiesReq)(nil),   // 37: pb_msg_community.AllCommunitiesReq
	(*community.UserPostsReq)(nil),        // 38: pb_msg_community.UserPostsReq
	(*community.UserCommentsReq)(nil),     // 39: pb_msg_community.UserCommentsReq
	(*community.UserWatchsReq)(nil),       // 40: pb_msg_community.UserWatchsReq
	(*community.UserLikesReq)(nil),        // 41: pb_msg_community.UserLikesReq
	(*community.UserFollowersReq)(nil),    // 42: pb_msg_community.UserFollowersReq
	(*community.UserFolloweesReq)(nil),    // 43: pb_msg_community.UserFolloweesReq
	(*community.UserFavoritesReq)(nil),    // 44: pb_msg_community.UserFavoritesReq
	(*community.UserParticipatesReq)(nil), // 45: pb_msg_community.UserParticipatesReq
	(*community.UserBallotsReq)(nil),      // 46: pb_msg_community.UserBallotsReq
	(*community.UserFilesReq)(nil),        // 47: pb_msg_community.UserFilesReq
	(*community.UserAwardsReq)(nil),       // 48: pb_msg_community.UserAwardsReq
	(*community.UserInfoReq)(nil),         // 49: pb_msg_community.UserInfoReq
	(*community.CreateCommunityRsp)(nil),  // 50: pb_msg_community.CreateCommunityRsp
	(*community.UpdateCommunityRsp)(nil),  // 51: pb_msg_community.UpdateCommunityRsp
	(*community.ApplyJoinRsp)(nil),        // 52: pb_msg_community.ApplyJoinRsp
	(*community.AnswerApplyRsp)(nil),      // 53: pb_msg_community.AnswerApplyRsp
	(*community.InviteJoinRsp)(nil),       // 54: pb_msg_community.InviteJoinRsp
	(*community.AnswerInviteRsp)(nil),     // 55: pb_msg_community.AnswerInviteRsp
	(*community.JoinCommunityRsp)(nil),    // 56: pb_msg_community.JoinCommunityRsp
	(*community.QuitCommunityRsp)(nil),    // 57: pb_msg_community.QuitCommunityRsp
	(*community.UpdateMemberRsp)(nil),     // 58: pb_msg_community.UpdateMemberRsp
	(*community.AddTopicRsp)(nil),         // 59: pb_msg_community.AddTopicRsp
	(*community.AddGiftRsp)(nil),          // 60: pb_msg_community.AddGiftRsp
	(*community.PostRsp)(nil),             // 61: pb_msg_community.PostRsp
	(*community.CommentRsp)(nil),          // 62: pb_msg_community.CommentRsp
	(*community.ReplyRsp)(nil),            // 63: pb_msg_community.ReplyRsp
	(*community.LikeRsp)(nil),             // 64: pb_msg_community.LikeRsp
	(*community.UnlikeRsp)(nil),           // 65: pb_msg_community.UnlikeRsp
	(*community.ShareRsp)(nil),            // 66: pb_msg_community.ShareRsp
	(*community.VoteRsp)(nil),             // 67: pb_msg_community.VoteRsp
	(*community.WatchRsp)(nil),            // 68: pb_msg_community.WatchRsp
	(*community.UnwatchRsp)(nil),          // 69: pb_msg_community.UnwatchRsp
	(*community.AwardRsp)(nil),            // 70: pb_msg_community.AwardRsp
	(*community.FavoriteRsp)(nil),         // 71: pb_msg_community.FavoriteRsp
	(*community.UnfavoriteRsp)(nil),       // 72: pb_msg_community.UnfavoriteRsp
	(*community.ShootRsp)(nil),            // 73: pb_msg_community.ShootRsp
	(*community.FollowRsp)(nil),           // 74: pb_msg_community.FollowRsp
	(*community.UnfollowRsp)(nil),         // 75: pb_msg_community.UnfollowRsp
	(*community.ParticipateRsp)(nil),      // 76: pb_msg_community.ParticipateRsp
	(*community.UnparticipateRsp)(nil),    // 77: pb_msg_community.UnparticipateRsp
	(*community.MembersRsp)(nil),          // 78: pb_msg_community.MembersRsp
	(*community.CommunityDetailRsp)(nil),  // 79: pb_msg_community.CommunityDetailRsp
	(*community.PostsRsp)(nil),            // 80: pb_msg_community.PostsRsp
	(*community.PostDetailRsp)(nil),       // 81: pb_msg_community.PostDetailRsp
	(*community.CommentsRsp)(nil),         // 82: pb_msg_community.CommentsRsp
	(*community.CommentDetailRsp)(nil),    // 83: pb_msg_community.CommentDetailRsp
	(*community.RepliesRsp)(nil),          // 84: pb_msg_community.RepliesRsp
	(*community.BarragesRsp)(nil),         // 85: pb_msg_community.BarragesRsp
	(*community.UserCommunitiesRsp)(nil),  // 86: pb_msg_community.UserCommunitiesRsp
	(*community.AllCommunitiesRsp)(nil),   // 87: pb_msg_community.AllCommunitiesRsp
	(*community.UserPostsRsp)(nil),        // 88: pb_msg_community.UserPostsRsp
	(*community.UserCommentsRsp)(nil),     // 89: pb_msg_community.UserCommentsRsp
	(*community.UserWatchsRsp)(nil),       // 90: pb_msg_community.UserWatchsRsp
	(*community.UserLikesRsp)(nil),        // 91: pb_msg_community.UserLikesRsp
	(*community.UserFollowersRsp)(nil),    // 92: pb_msg_community.UserFollowersRsp
	(*community.UserFolloweesRsp)(nil),    // 93: pb_msg_community.UserFolloweesRsp
	(*community.UserFavoritesRsp)(nil),    // 94: pb_msg_community.UserFavoritesRsp
	(*community.UserParticipatesRsp)(nil), // 95: pb_msg_community.UserParticipatesRsp
	(*community.UserBallotsRsp)(nil),      // 96: pb_msg_community.UserBallotsRsp
	(*community.UserFilesRsp)(nil),        // 97: pb_msg_community.UserFilesRsp
	(*community.UserAwardsRsp)(nil),       // 98: pb_msg_community.UserAwardsRsp
	(*community.UserInfoRsp)(nil),         // 99: pb_msg_community.UserInfoRsp
}
var file_pb_grpc_community_community_proto_depIdxs = []int32{
	0,  // 0: pb_grpc_community.Community.CreateCommunity:input_type -> pb_msg_community.CreateCommunityReq
	1,  // 1: pb_grpc_community.Community.UpdateCommunity:input_type -> pb_msg_community.UpdateCommunityReq
	2,  // 2: pb_grpc_community.Community.ApplyJoin:input_type -> pb_msg_community.ApplyJoinReq
	3,  // 3: pb_grpc_community.Community.AnswerApply:input_type -> pb_msg_community.AnswerApplyReq
	4,  // 4: pb_grpc_community.Community.InviteJoin:input_type -> pb_msg_community.InviteJoinReq
	5,  // 5: pb_grpc_community.Community.AnswerInvite:input_type -> pb_msg_community.AnswerInviteReq
	6,  // 6: pb_grpc_community.Community.JoinCommunity:input_type -> pb_msg_community.JoinCommunityReq
	7,  // 7: pb_grpc_community.Community.QuitCommunity:input_type -> pb_msg_community.QuitCommunityReq
	8,  // 8: pb_grpc_community.Community.UpdateMember:input_type -> pb_msg_community.UpdateMemberReq
	9,  // 9: pb_grpc_community.Community.AddTopic:input_type -> pb_msg_community.AddTopicReq
	10, // 10: pb_grpc_community.Community.AddGift:input_type -> pb_msg_community.AddGiftReq
	11, // 11: pb_grpc_community.Community.Post:input_type -> pb_msg_community.PostReq
	12, // 12: pb_grpc_community.Community.Comment:input_type -> pb_msg_community.CommentReq
	13, // 13: pb_grpc_community.Community.Reply:input_type -> pb_msg_community.ReplyReq
	14, // 14: pb_grpc_community.Community.Like:input_type -> pb_msg_community.LikeReq
	15, // 15: pb_grpc_community.Community.Unlike:input_type -> pb_msg_community.UnlikeReq
	16, // 16: pb_grpc_community.Community.Share:input_type -> pb_msg_community.ShareReq
	17, // 17: pb_grpc_community.Community.Vote:input_type -> pb_msg_community.VoteReq
	18, // 18: pb_grpc_community.Community.Watch:input_type -> pb_msg_community.WatchReq
	19, // 19: pb_grpc_community.Community.Unwatch:input_type -> pb_msg_community.UnwatchReq
	20, // 20: pb_grpc_community.Community.Award:input_type -> pb_msg_community.AwardReq
	21, // 21: pb_grpc_community.Community.Favorite:input_type -> pb_msg_community.FavoriteReq
	22, // 22: pb_grpc_community.Community.Unfavorite:input_type -> pb_msg_community.UnfavoriteReq
	23, // 23: pb_grpc_community.Community.Shoot:input_type -> pb_msg_community.ShootReq
	24, // 24: pb_grpc_community.Community.Follow:input_type -> pb_msg_community.FollowReq
	25, // 25: pb_grpc_community.Community.Unfollow:input_type -> pb_msg_community.UnfollowReq
	26, // 26: pb_grpc_community.Community.Participate:input_type -> pb_msg_community.ParticipateReq
	27, // 27: pb_grpc_community.Community.Unparticipate:input_type -> pb_msg_community.UnparticipateReq
	28, // 28: pb_grpc_community.Community.Members:input_type -> pb_msg_community.MembersReq
	29, // 29: pb_grpc_community.Community.CommunityDetail:input_type -> pb_msg_community.CommunityDetailReq
	30, // 30: pb_grpc_community.Community.Posts:input_type -> pb_msg_community.PostsReq
	31, // 31: pb_grpc_community.Community.PostDetail:input_type -> pb_msg_community.PostDetailReq
	32, // 32: pb_grpc_community.Community.Comments:input_type -> pb_msg_community.CommentsReq
	33, // 33: pb_grpc_community.Community.CommentDetail:input_type -> pb_msg_community.CommentDetailReq
	34, // 34: pb_grpc_community.Community.Replies:input_type -> pb_msg_community.RepliesReq
	35, // 35: pb_grpc_community.Community.Barrages:input_type -> pb_msg_community.BarragesReq
	36, // 36: pb_grpc_community.Community.UserCommunities:input_type -> pb_msg_community.UserCommunitiesReq
	37, // 37: pb_grpc_community.Community.AllCommunities:input_type -> pb_msg_community.AllCommunitiesReq
	38, // 38: pb_grpc_community.Community.UserPosts:input_type -> pb_msg_community.UserPostsReq
	39, // 39: pb_grpc_community.Community.UserComments:input_type -> pb_msg_community.UserCommentsReq
	40, // 40: pb_grpc_community.Community.UserWatchs:input_type -> pb_msg_community.UserWatchsReq
	41, // 41: pb_grpc_community.Community.UserLikes:input_type -> pb_msg_community.UserLikesReq
	42, // 42: pb_grpc_community.Community.UserFollowers:input_type -> pb_msg_community.UserFollowersReq
	43, // 43: pb_grpc_community.Community.UserFollowees:input_type -> pb_msg_community.UserFolloweesReq
	44, // 44: pb_grpc_community.Community.UserFavorites:input_type -> pb_msg_community.UserFavoritesReq
	45, // 45: pb_grpc_community.Community.UserParticipates:input_type -> pb_msg_community.UserParticipatesReq
	46, // 46: pb_grpc_community.Community.UserBallots:input_type -> pb_msg_community.UserBallotsReq
	47, // 47: pb_grpc_community.Community.UserFiles:input_type -> pb_msg_community.UserFilesReq
	48, // 48: pb_grpc_community.Community.UserAwards:input_type -> pb_msg_community.UserAwardsReq
	49, // 49: pb_grpc_community.Community.UserInfo:input_type -> pb_msg_community.UserInfoReq
	50, // 50: pb_grpc_community.Community.CreateCommunity:output_type -> pb_msg_community.CreateCommunityRsp
	51, // 51: pb_grpc_community.Community.UpdateCommunity:output_type -> pb_msg_community.UpdateCommunityRsp
	52, // 52: pb_grpc_community.Community.ApplyJoin:output_type -> pb_msg_community.ApplyJoinRsp
	53, // 53: pb_grpc_community.Community.AnswerApply:output_type -> pb_msg_community.AnswerApplyRsp
	54, // 54: pb_grpc_community.Community.InviteJoin:output_type -> pb_msg_community.InviteJoinRsp
	55, // 55: pb_grpc_community.Community.AnswerInvite:output_type -> pb_msg_community.AnswerInviteRsp
	56, // 56: pb_grpc_community.Community.JoinCommunity:output_type -> pb_msg_community.JoinCommunityRsp
	57, // 57: pb_grpc_community.Community.QuitCommunity:output_type -> pb_msg_community.QuitCommunityRsp
	58, // 58: pb_grpc_community.Community.UpdateMember:output_type -> pb_msg_community.UpdateMemberRsp
	59, // 59: pb_grpc_community.Community.AddTopic:output_type -> pb_msg_community.AddTopicRsp
	60, // 60: pb_grpc_community.Community.AddGift:output_type -> pb_msg_community.AddGiftRsp
	61, // 61: pb_grpc_community.Community.Post:output_type -> pb_msg_community.PostRsp
	62, // 62: pb_grpc_community.Community.Comment:output_type -> pb_msg_community.CommentRsp
	63, // 63: pb_grpc_community.Community.Reply:output_type -> pb_msg_community.ReplyRsp
	64, // 64: pb_grpc_community.Community.Like:output_type -> pb_msg_community.LikeRsp
	65, // 65: pb_grpc_community.Community.Unlike:output_type -> pb_msg_community.UnlikeRsp
	66, // 66: pb_grpc_community.Community.Share:output_type -> pb_msg_community.ShareRsp
	67, // 67: pb_grpc_community.Community.Vote:output_type -> pb_msg_community.VoteRsp
	68, // 68: pb_grpc_community.Community.Watch:output_type -> pb_msg_community.WatchRsp
	69, // 69: pb_grpc_community.Community.Unwatch:output_type -> pb_msg_community.UnwatchRsp
	70, // 70: pb_grpc_community.Community.Award:output_type -> pb_msg_community.AwardRsp
	71, // 71: pb_grpc_community.Community.Favorite:output_type -> pb_msg_community.FavoriteRsp
	72, // 72: pb_grpc_community.Community.Unfavorite:output_type -> pb_msg_community.UnfavoriteRsp
	73, // 73: pb_grpc_community.Community.Shoot:output_type -> pb_msg_community.ShootRsp
	74, // 74: pb_grpc_community.Community.Follow:output_type -> pb_msg_community.FollowRsp
	75, // 75: pb_grpc_community.Community.Unfollow:output_type -> pb_msg_community.UnfollowRsp
	76, // 76: pb_grpc_community.Community.Participate:output_type -> pb_msg_community.ParticipateRsp
	77, // 77: pb_grpc_community.Community.Unparticipate:output_type -> pb_msg_community.UnparticipateRsp
	78, // 78: pb_grpc_community.Community.Members:output_type -> pb_msg_community.MembersRsp
	79, // 79: pb_grpc_community.Community.CommunityDetail:output_type -> pb_msg_community.CommunityDetailRsp
	80, // 80: pb_grpc_community.Community.Posts:output_type -> pb_msg_community.PostsRsp
	81, // 81: pb_grpc_community.Community.PostDetail:output_type -> pb_msg_community.PostDetailRsp
	82, // 82: pb_grpc_community.Community.Comments:output_type -> pb_msg_community.CommentsRsp
	83, // 83: pb_grpc_community.Community.CommentDetail:output_type -> pb_msg_community.CommentDetailRsp
	84, // 84: pb_grpc_community.Community.Replies:output_type -> pb_msg_community.RepliesRsp
	85, // 85: pb_grpc_community.Community.Barrages:output_type -> pb_msg_community.BarragesRsp
	86, // 86: pb_grpc_community.Community.UserCommunities:output_type -> pb_msg_community.UserCommunitiesRsp
	87, // 87: pb_grpc_community.Community.AllCommunities:output_type -> pb_msg_community.AllCommunitiesRsp
	88, // 88: pb_grpc_community.Community.UserPosts:output_type -> pb_msg_community.UserPostsRsp
	89, // 89: pb_grpc_community.Community.UserComments:output_type -> pb_msg_community.UserCommentsRsp
	90, // 90: pb_grpc_community.Community.UserWatchs:output_type -> pb_msg_community.UserWatchsRsp
	91, // 91: pb_grpc_community.Community.UserLikes:output_type -> pb_msg_community.UserLikesRsp
	92, // 92: pb_grpc_community.Community.UserFollowers:output_type -> pb_msg_community.UserFollowersRsp
	93, // 93: pb_grpc_community.Community.UserFollowees:output_type -> pb_msg_community.UserFolloweesRsp
	94, // 94: pb_grpc_community.Community.UserFavorites:output_type -> pb_msg_community.UserFavoritesRsp
	95, // 95: pb_grpc_community.Community.UserParticipates:output_type -> pb_msg_community.UserParticipatesRsp
	96, // 96: pb_grpc_community.Community.UserBallots:output_type -> pb_msg_community.UserBallotsRsp
	97, // 97: pb_grpc_community.Community.UserFiles:output_type -> pb_msg_community.UserFilesRsp
	98, // 98: pb_grpc_community.Community.UserAwards:output_type -> pb_msg_community.UserAwardsRsp
	99, // 99: pb_grpc_community.Community.UserInfo:output_type -> pb_msg_community.UserInfoRsp
	50, // [50:100] is the sub-list for method output_type
	0,  // [0:50] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_community_community_proto_init() }
func file_pb_grpc_community_community_proto_init() {
	if File_pb_grpc_community_community_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_community_community_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_community_community_proto_goTypes,
		DependencyIndexes: file_pb_grpc_community_community_proto_depIdxs,
	}.Build()
	File_pb_grpc_community_community_proto = out.File
	file_pb_grpc_community_community_proto_rawDesc = nil
	file_pb_grpc_community_community_proto_goTypes = nil
	file_pb_grpc_community_community_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommunityClient interface {
	// 创建社团
	CreateCommunity(ctx context.Context, in *community.CreateCommunityReq, opts ...grpc.CallOption) (*community.CreateCommunityRsp, error)
	// 更新社团
	UpdateCommunity(ctx context.Context, in *community.UpdateCommunityReq, opts ...grpc.CallOption) (*community.UpdateCommunityRsp, error)
	// 申请入团
	ApplyJoin(ctx context.Context, in *community.ApplyJoinReq, opts ...grpc.CallOption) (*community.ApplyJoinRsp, error)
	// 答复入团申请
	AnswerApply(ctx context.Context, in *community.AnswerApplyReq, opts ...grpc.CallOption) (*community.AnswerApplyRsp, error)
	// 邀请入团
	InviteJoin(ctx context.Context, in *community.InviteJoinReq, opts ...grpc.CallOption) (*community.InviteJoinRsp, error)
	// 答复入团邀请
	AnswerInvite(ctx context.Context, in *community.AnswerInviteReq, opts ...grpc.CallOption) (*community.AnswerInviteRsp, error)
	// 口令,答题,自由方式加入社团
	JoinCommunity(ctx context.Context, in *community.JoinCommunityReq, opts ...grpc.CallOption) (*community.JoinCommunityRsp, error)
	// 退出社团
	QuitCommunity(ctx context.Context, in *community.QuitCommunityReq, opts ...grpc.CallOption) (*community.QuitCommunityRsp, error)
	// 更新成员
	UpdateMember(ctx context.Context, in *community.UpdateMemberReq, opts ...grpc.CallOption) (*community.UpdateMemberRsp, error)
	// 添加话题
	AddTopic(ctx context.Context, in *community.AddTopicReq, opts ...grpc.CallOption) (*community.AddTopicRsp, error)
	// 添加礼物配置
	AddGift(ctx context.Context, in *community.AddGiftReq, opts ...grpc.CallOption) (*community.AddGiftRsp, error)
	// 发帖子
	Post(ctx context.Context, in *community.PostReq, opts ...grpc.CallOption) (*community.PostRsp, error)
	// 发评论
	Comment(ctx context.Context, in *community.CommentReq, opts ...grpc.CallOption) (*community.CommentRsp, error)
	// 发回复
	Reply(ctx context.Context, in *community.ReplyReq, opts ...grpc.CallOption) (*community.ReplyRsp, error)
	// 顶或踩
	Like(ctx context.Context, in *community.LikeReq, opts ...grpc.CallOption) (*community.LikeRsp, error)
	// 取消顶或踩
	Unlike(ctx context.Context, in *community.UnlikeReq, opts ...grpc.CallOption) (*community.UnlikeRsp, error)
	// 分享
	Share(ctx context.Context, in *community.ShareReq, opts ...grpc.CallOption) (*community.ShareRsp, error)
	// 投票
	Vote(ctx context.Context, in *community.VoteReq, opts ...grpc.CallOption) (*community.VoteRsp, error)
	// 插眼
	Watch(ctx context.Context, in *community.WatchReq, opts ...grpc.CallOption) (*community.WatchRsp, error)
	// 取消插眼
	Unwatch(ctx context.Context, in *community.UnwatchReq, opts ...grpc.CallOption) (*community.UnwatchRsp, error)
	// 打赏
	Award(ctx context.Context, in *community.AwardReq, opts ...grpc.CallOption) (*community.AwardRsp, error)
	// 收藏
	Favorite(ctx context.Context, in *community.FavoriteReq, opts ...grpc.CallOption) (*community.FavoriteRsp, error)
	// 取消收藏
	Unfavorite(ctx context.Context, in *community.UnfavoriteReq, opts ...grpc.CallOption) (*community.UnfavoriteRsp, error)
	// 发弹幕
	Shoot(ctx context.Context, in *community.ShootReq, opts ...grpc.CallOption) (*community.ShootRsp, error)
	// 关注他人
	Follow(ctx context.Context, in *community.FollowReq, opts ...grpc.CallOption) (*community.FollowRsp, error)
	// 取消关注
	Unfollow(ctx context.Context, in *community.UnfollowReq, opts ...grpc.CallOption) (*community.UnfollowRsp, error)
	// 加入话题
	Participate(ctx context.Context, in *community.ParticipateReq, opts ...grpc.CallOption) (*community.ParticipateRsp, error)
	// 退出话题
	Unparticipate(ctx context.Context, in *community.UnparticipateReq, opts ...grpc.CallOption) (*community.UnparticipateRsp, error)
	// 社团成员列表
	Members(ctx context.Context, in *community.MembersReq, opts ...grpc.CallOption) (*community.MembersRsp, error)
	// 社团详情
	CommunityDetail(ctx context.Context, in *community.CommunityDetailReq, opts ...grpc.CallOption) (*community.CommunityDetailRsp, error)
	// 获取帖子列表
	Posts(ctx context.Context, in *community.PostsReq, opts ...grpc.CallOption) (*community.PostsRsp, error)
	// 帖子详情
	PostDetail(ctx context.Context, in *community.PostDetailReq, opts ...grpc.CallOption) (*community.PostDetailRsp, error)
	// 评论列表
	Comments(ctx context.Context, in *community.CommentsReq, opts ...grpc.CallOption) (*community.CommentsRsp, error)
	// 评论详情
	CommentDetail(ctx context.Context, in *community.CommentDetailReq, opts ...grpc.CallOption) (*community.CommentDetailRsp, error)
	// 回复列表
	Replies(ctx context.Context, in *community.RepliesReq, opts ...grpc.CallOption) (*community.RepliesRsp, error)
	// 弹幕列表
	Barrages(ctx context.Context, in *community.BarragesReq, opts ...grpc.CallOption) (*community.BarragesRsp, error)
	// 用户的社团
	UserCommunities(ctx context.Context, in *community.UserCommunitiesReq, opts ...grpc.CallOption) (*community.UserCommunitiesRsp, error)
	// 社团列表
	AllCommunities(ctx context.Context, in *community.AllCommunitiesReq, opts ...grpc.CallOption) (*community.AllCommunitiesRsp, error)
	// 用户的帖子
	UserPosts(ctx context.Context, in *community.UserPostsReq, opts ...grpc.CallOption) (*community.UserPostsRsp, error)
	// 用户的评论
	UserComments(ctx context.Context, in *community.UserCommentsReq, opts ...grpc.CallOption) (*community.UserCommentsRsp, error)
	// 用户的插眼
	UserWatchs(ctx context.Context, in *community.UserWatchsReq, opts ...grpc.CallOption) (*community.UserWatchsRsp, error)
	// 用户的点赞
	UserLikes(ctx context.Context, in *community.UserLikesReq, opts ...grpc.CallOption) (*community.UserLikesRsp, error)
	// 关注用户的
	UserFollowers(ctx context.Context, in *community.UserFollowersReq, opts ...grpc.CallOption) (*community.UserFollowersRsp, error)
	// 用户的关注
	UserFollowees(ctx context.Context, in *community.UserFolloweesReq, opts ...grpc.CallOption) (*community.UserFolloweesRsp, error)
	// 我的收藏
	UserFavorites(ctx context.Context, in *community.UserFavoritesReq, opts ...grpc.CallOption) (*community.UserFavoritesRsp, error)
	// 用户参与的话题
	UserParticipates(ctx context.Context, in *community.UserParticipatesReq, opts ...grpc.CallOption) (*community.UserParticipatesRsp, error)
	// 用户的投票
	UserBallots(ctx context.Context, in *community.UserBallotsReq, opts ...grpc.CallOption) (*community.UserBallotsRsp, error)
	// 用户的文件
	UserFiles(ctx context.Context, in *community.UserFilesReq, opts ...grpc.CallOption) (*community.UserFilesRsp, error)
	// 用户的打赏
	UserAwards(ctx context.Context, in *community.UserAwardsReq, opts ...grpc.CallOption) (*community.UserAwardsRsp, error)
	// 用户的信息
	UserInfo(ctx context.Context, in *community.UserInfoReq, opts ...grpc.CallOption) (*community.UserInfoRsp, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) CreateCommunity(ctx context.Context, in *community.CreateCommunityReq, opts ...grpc.CallOption) (*community.CreateCommunityRsp, error) {
	out := new(community.CreateCommunityRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/CreateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateCommunity(ctx context.Context, in *community.UpdateCommunityReq, opts ...grpc.CallOption) (*community.UpdateCommunityRsp, error) {
	out := new(community.UpdateCommunityRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UpdateCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ApplyJoin(ctx context.Context, in *community.ApplyJoinReq, opts ...grpc.CallOption) (*community.ApplyJoinRsp, error) {
	out := new(community.ApplyJoinRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/ApplyJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AnswerApply(ctx context.Context, in *community.AnswerApplyReq, opts ...grpc.CallOption) (*community.AnswerApplyRsp, error) {
	out := new(community.AnswerApplyRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/AnswerApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) InviteJoin(ctx context.Context, in *community.InviteJoinReq, opts ...grpc.CallOption) (*community.InviteJoinRsp, error) {
	out := new(community.InviteJoinRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/InviteJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AnswerInvite(ctx context.Context, in *community.AnswerInviteReq, opts ...grpc.CallOption) (*community.AnswerInviteRsp, error) {
	out := new(community.AnswerInviteRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/AnswerInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) JoinCommunity(ctx context.Context, in *community.JoinCommunityReq, opts ...grpc.CallOption) (*community.JoinCommunityRsp, error) {
	out := new(community.JoinCommunityRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/JoinCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) QuitCommunity(ctx context.Context, in *community.QuitCommunityReq, opts ...grpc.CallOption) (*community.QuitCommunityRsp, error) {
	out := new(community.QuitCommunityRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/QuitCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateMember(ctx context.Context, in *community.UpdateMemberReq, opts ...grpc.CallOption) (*community.UpdateMemberRsp, error) {
	out := new(community.UpdateMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddTopic(ctx context.Context, in *community.AddTopicReq, opts ...grpc.CallOption) (*community.AddTopicRsp, error) {
	out := new(community.AddTopicRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/AddTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddGift(ctx context.Context, in *community.AddGiftReq, opts ...grpc.CallOption) (*community.AddGiftRsp, error) {
	out := new(community.AddGiftRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/AddGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Post(ctx context.Context, in *community.PostReq, opts ...grpc.CallOption) (*community.PostRsp, error) {
	out := new(community.PostRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Comment(ctx context.Context, in *community.CommentReq, opts ...grpc.CallOption) (*community.CommentRsp, error) {
	out := new(community.CommentRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Reply(ctx context.Context, in *community.ReplyReq, opts ...grpc.CallOption) (*community.ReplyRsp, error) {
	out := new(community.ReplyRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Like(ctx context.Context, in *community.LikeReq, opts ...grpc.CallOption) (*community.LikeRsp, error) {
	out := new(community.LikeRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Unlike(ctx context.Context, in *community.UnlikeReq, opts ...grpc.CallOption) (*community.UnlikeRsp, error) {
	out := new(community.UnlikeRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Unlike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Share(ctx context.Context, in *community.ShareReq, opts ...grpc.CallOption) (*community.ShareRsp, error) {
	out := new(community.ShareRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Vote(ctx context.Context, in *community.VoteReq, opts ...grpc.CallOption) (*community.VoteRsp, error) {
	out := new(community.VoteRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Watch(ctx context.Context, in *community.WatchReq, opts ...grpc.CallOption) (*community.WatchRsp, error) {
	out := new(community.WatchRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Watch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Unwatch(ctx context.Context, in *community.UnwatchReq, opts ...grpc.CallOption) (*community.UnwatchRsp, error) {
	out := new(community.UnwatchRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Unwatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Award(ctx context.Context, in *community.AwardReq, opts ...grpc.CallOption) (*community.AwardRsp, error) {
	out := new(community.AwardRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Award", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Favorite(ctx context.Context, in *community.FavoriteReq, opts ...grpc.CallOption) (*community.FavoriteRsp, error) {
	out := new(community.FavoriteRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Favorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Unfavorite(ctx context.Context, in *community.UnfavoriteReq, opts ...grpc.CallOption) (*community.UnfavoriteRsp, error) {
	out := new(community.UnfavoriteRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Unfavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Shoot(ctx context.Context, in *community.ShootReq, opts ...grpc.CallOption) (*community.ShootRsp, error) {
	out := new(community.ShootRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Shoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Follow(ctx context.Context, in *community.FollowReq, opts ...grpc.CallOption) (*community.FollowRsp, error) {
	out := new(community.FollowRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Unfollow(ctx context.Context, in *community.UnfollowReq, opts ...grpc.CallOption) (*community.UnfollowRsp, error) {
	out := new(community.UnfollowRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Participate(ctx context.Context, in *community.ParticipateReq, opts ...grpc.CallOption) (*community.ParticipateRsp, error) {
	out := new(community.ParticipateRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Participate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Unparticipate(ctx context.Context, in *community.UnparticipateReq, opts ...grpc.CallOption) (*community.UnparticipateRsp, error) {
	out := new(community.UnparticipateRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Unparticipate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Members(ctx context.Context, in *community.MembersReq, opts ...grpc.CallOption) (*community.MembersRsp, error) {
	out := new(community.MembersRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityDetail(ctx context.Context, in *community.CommunityDetailReq, opts ...grpc.CallOption) (*community.CommunityDetailRsp, error) {
	out := new(community.CommunityDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/CommunityDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Posts(ctx context.Context, in *community.PostsReq, opts ...grpc.CallOption) (*community.PostsRsp, error) {
	out := new(community.PostsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Posts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) PostDetail(ctx context.Context, in *community.PostDetailReq, opts ...grpc.CallOption) (*community.PostDetailRsp, error) {
	out := new(community.PostDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/PostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Comments(ctx context.Context, in *community.CommentsReq, opts ...grpc.CallOption) (*community.CommentsRsp, error) {
	out := new(community.CommentsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Comments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommentDetail(ctx context.Context, in *community.CommentDetailReq, opts ...grpc.CallOption) (*community.CommentDetailRsp, error) {
	out := new(community.CommentDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/CommentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Replies(ctx context.Context, in *community.RepliesReq, opts ...grpc.CallOption) (*community.RepliesRsp, error) {
	out := new(community.RepliesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Replies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Barrages(ctx context.Context, in *community.BarragesReq, opts ...grpc.CallOption) (*community.BarragesRsp, error) {
	out := new(community.BarragesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/Barrages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserCommunities(ctx context.Context, in *community.UserCommunitiesReq, opts ...grpc.CallOption) (*community.UserCommunitiesRsp, error) {
	out := new(community.UserCommunitiesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserCommunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AllCommunities(ctx context.Context, in *community.AllCommunitiesReq, opts ...grpc.CallOption) (*community.AllCommunitiesRsp, error) {
	out := new(community.AllCommunitiesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/AllCommunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserPosts(ctx context.Context, in *community.UserPostsReq, opts ...grpc.CallOption) (*community.UserPostsRsp, error) {
	out := new(community.UserPostsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserComments(ctx context.Context, in *community.UserCommentsReq, opts ...grpc.CallOption) (*community.UserCommentsRsp, error) {
	out := new(community.UserCommentsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserWatchs(ctx context.Context, in *community.UserWatchsReq, opts ...grpc.CallOption) (*community.UserWatchsRsp, error) {
	out := new(community.UserWatchsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserWatchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserLikes(ctx context.Context, in *community.UserLikesReq, opts ...grpc.CallOption) (*community.UserLikesRsp, error) {
	out := new(community.UserLikesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserFollowers(ctx context.Context, in *community.UserFollowersReq, opts ...grpc.CallOption) (*community.UserFollowersRsp, error) {
	out := new(community.UserFollowersRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserFollowees(ctx context.Context, in *community.UserFolloweesReq, opts ...grpc.CallOption) (*community.UserFolloweesRsp, error) {
	out := new(community.UserFolloweesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserFollowees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserFavorites(ctx context.Context, in *community.UserFavoritesReq, opts ...grpc.CallOption) (*community.UserFavoritesRsp, error) {
	out := new(community.UserFavoritesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserParticipates(ctx context.Context, in *community.UserParticipatesReq, opts ...grpc.CallOption) (*community.UserParticipatesRsp, error) {
	out := new(community.UserParticipatesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserParticipates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserBallots(ctx context.Context, in *community.UserBallotsReq, opts ...grpc.CallOption) (*community.UserBallotsRsp, error) {
	out := new(community.UserBallotsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserBallots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserFiles(ctx context.Context, in *community.UserFilesReq, opts ...grpc.CallOption) (*community.UserFilesRsp, error) {
	out := new(community.UserFilesRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserAwards(ctx context.Context, in *community.UserAwardsReq, opts ...grpc.CallOption) (*community.UserAwardsRsp, error) {
	out := new(community.UserAwardsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserAwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UserInfo(ctx context.Context, in *community.UserInfoReq, opts ...grpc.CallOption) (*community.UserInfoRsp, error) {
	out := new(community.UserInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_community.Community/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
type CommunityServer interface {
	// 创建社团
	CreateCommunity(context.Context, *community.CreateCommunityReq) (*community.CreateCommunityRsp, error)
	// 更新社团
	UpdateCommunity(context.Context, *community.UpdateCommunityReq) (*community.UpdateCommunityRsp, error)
	// 申请入团
	ApplyJoin(context.Context, *community.ApplyJoinReq) (*community.ApplyJoinRsp, error)
	// 答复入团申请
	AnswerApply(context.Context, *community.AnswerApplyReq) (*community.AnswerApplyRsp, error)
	// 邀请入团
	InviteJoin(context.Context, *community.InviteJoinReq) (*community.InviteJoinRsp, error)
	// 答复入团邀请
	AnswerInvite(context.Context, *community.AnswerInviteReq) (*community.AnswerInviteRsp, error)
	// 口令,答题,自由方式加入社团
	JoinCommunity(context.Context, *community.JoinCommunityReq) (*community.JoinCommunityRsp, error)
	// 退出社团
	QuitCommunity(context.Context, *community.QuitCommunityReq) (*community.QuitCommunityRsp, error)
	// 更新成员
	UpdateMember(context.Context, *community.UpdateMemberReq) (*community.UpdateMemberRsp, error)
	// 添加话题
	AddTopic(context.Context, *community.AddTopicReq) (*community.AddTopicRsp, error)
	// 添加礼物配置
	AddGift(context.Context, *community.AddGiftReq) (*community.AddGiftRsp, error)
	// 发帖子
	Post(context.Context, *community.PostReq) (*community.PostRsp, error)
	// 发评论
	Comment(context.Context, *community.CommentReq) (*community.CommentRsp, error)
	// 发回复
	Reply(context.Context, *community.ReplyReq) (*community.ReplyRsp, error)
	// 顶或踩
	Like(context.Context, *community.LikeReq) (*community.LikeRsp, error)
	// 取消顶或踩
	Unlike(context.Context, *community.UnlikeReq) (*community.UnlikeRsp, error)
	// 分享
	Share(context.Context, *community.ShareReq) (*community.ShareRsp, error)
	// 投票
	Vote(context.Context, *community.VoteReq) (*community.VoteRsp, error)
	// 插眼
	Watch(context.Context, *community.WatchReq) (*community.WatchRsp, error)
	// 取消插眼
	Unwatch(context.Context, *community.UnwatchReq) (*community.UnwatchRsp, error)
	// 打赏
	Award(context.Context, *community.AwardReq) (*community.AwardRsp, error)
	// 收藏
	Favorite(context.Context, *community.FavoriteReq) (*community.FavoriteRsp, error)
	// 取消收藏
	Unfavorite(context.Context, *community.UnfavoriteReq) (*community.UnfavoriteRsp, error)
	// 发弹幕
	Shoot(context.Context, *community.ShootReq) (*community.ShootRsp, error)
	// 关注他人
	Follow(context.Context, *community.FollowReq) (*community.FollowRsp, error)
	// 取消关注
	Unfollow(context.Context, *community.UnfollowReq) (*community.UnfollowRsp, error)
	// 加入话题
	Participate(context.Context, *community.ParticipateReq) (*community.ParticipateRsp, error)
	// 退出话题
	Unparticipate(context.Context, *community.UnparticipateReq) (*community.UnparticipateRsp, error)
	// 社团成员列表
	Members(context.Context, *community.MembersReq) (*community.MembersRsp, error)
	// 社团详情
	CommunityDetail(context.Context, *community.CommunityDetailReq) (*community.CommunityDetailRsp, error)
	// 获取帖子列表
	Posts(context.Context, *community.PostsReq) (*community.PostsRsp, error)
	// 帖子详情
	PostDetail(context.Context, *community.PostDetailReq) (*community.PostDetailRsp, error)
	// 评论列表
	Comments(context.Context, *community.CommentsReq) (*community.CommentsRsp, error)
	// 评论详情
	CommentDetail(context.Context, *community.CommentDetailReq) (*community.CommentDetailRsp, error)
	// 回复列表
	Replies(context.Context, *community.RepliesReq) (*community.RepliesRsp, error)
	// 弹幕列表
	Barrages(context.Context, *community.BarragesReq) (*community.BarragesRsp, error)
	// 用户的社团
	UserCommunities(context.Context, *community.UserCommunitiesReq) (*community.UserCommunitiesRsp, error)
	// 社团列表
	AllCommunities(context.Context, *community.AllCommunitiesReq) (*community.AllCommunitiesRsp, error)
	// 用户的帖子
	UserPosts(context.Context, *community.UserPostsReq) (*community.UserPostsRsp, error)
	// 用户的评论
	UserComments(context.Context, *community.UserCommentsReq) (*community.UserCommentsRsp, error)
	// 用户的插眼
	UserWatchs(context.Context, *community.UserWatchsReq) (*community.UserWatchsRsp, error)
	// 用户的点赞
	UserLikes(context.Context, *community.UserLikesReq) (*community.UserLikesRsp, error)
	// 关注用户的
	UserFollowers(context.Context, *community.UserFollowersReq) (*community.UserFollowersRsp, error)
	// 用户的关注
	UserFollowees(context.Context, *community.UserFolloweesReq) (*community.UserFolloweesRsp, error)
	// 我的收藏
	UserFavorites(context.Context, *community.UserFavoritesReq) (*community.UserFavoritesRsp, error)
	// 用户参与的话题
	UserParticipates(context.Context, *community.UserParticipatesReq) (*community.UserParticipatesRsp, error)
	// 用户的投票
	UserBallots(context.Context, *community.UserBallotsReq) (*community.UserBallotsRsp, error)
	// 用户的文件
	UserFiles(context.Context, *community.UserFilesReq) (*community.UserFilesRsp, error)
	// 用户的打赏
	UserAwards(context.Context, *community.UserAwardsReq) (*community.UserAwardsRsp, error)
	// 用户的信息
	UserInfo(context.Context, *community.UserInfoReq) (*community.UserInfoRsp, error)
}

// UnimplementedCommunityServer can be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (*UnimplementedCommunityServer) CreateCommunity(context.Context, *community.CreateCommunityReq) (*community.CreateCommunityRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (*UnimplementedCommunityServer) UpdateCommunity(context.Context, *community.UpdateCommunityReq) (*community.UpdateCommunityRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunity not implemented")
}
func (*UnimplementedCommunityServer) ApplyJoin(context.Context, *community.ApplyJoinReq) (*community.ApplyJoinRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJoin not implemented")
}
func (*UnimplementedCommunityServer) AnswerApply(context.Context, *community.AnswerApplyReq) (*community.AnswerApplyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerApply not implemented")
}
func (*UnimplementedCommunityServer) InviteJoin(context.Context, *community.InviteJoinReq) (*community.InviteJoinRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteJoin not implemented")
}
func (*UnimplementedCommunityServer) AnswerInvite(context.Context, *community.AnswerInviteReq) (*community.AnswerInviteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerInvite not implemented")
}
func (*UnimplementedCommunityServer) JoinCommunity(context.Context, *community.JoinCommunityReq) (*community.JoinCommunityRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCommunity not implemented")
}
func (*UnimplementedCommunityServer) QuitCommunity(context.Context, *community.QuitCommunityReq) (*community.QuitCommunityRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitCommunity not implemented")
}
func (*UnimplementedCommunityServer) UpdateMember(context.Context, *community.UpdateMemberReq) (*community.UpdateMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedCommunityServer) AddTopic(context.Context, *community.AddTopicReq) (*community.AddTopicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (*UnimplementedCommunityServer) AddGift(context.Context, *community.AddGiftReq) (*community.AddGiftRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGift not implemented")
}
func (*UnimplementedCommunityServer) Post(context.Context, *community.PostReq) (*community.PostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedCommunityServer) Comment(context.Context, *community.CommentReq) (*community.CommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (*UnimplementedCommunityServer) Reply(context.Context, *community.ReplyReq) (*community.ReplyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (*UnimplementedCommunityServer) Like(context.Context, *community.LikeReq) (*community.LikeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (*UnimplementedCommunityServer) Unlike(context.Context, *community.UnlikeReq) (*community.UnlikeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (*UnimplementedCommunityServer) Share(context.Context, *community.ShareReq) (*community.ShareRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (*UnimplementedCommunityServer) Vote(context.Context, *community.VoteReq) (*community.VoteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedCommunityServer) Watch(context.Context, *community.WatchReq) (*community.WatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedCommunityServer) Unwatch(context.Context, *community.UnwatchReq) (*community.UnwatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unwatch not implemented")
}
func (*UnimplementedCommunityServer) Award(context.Context, *community.AwardReq) (*community.AwardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Award not implemented")
}
func (*UnimplementedCommunityServer) Favorite(context.Context, *community.FavoriteReq) (*community.FavoriteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (*UnimplementedCommunityServer) Unfavorite(context.Context, *community.UnfavoriteReq) (*community.UnfavoriteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfavorite not implemented")
}
func (*UnimplementedCommunityServer) Shoot(context.Context, *community.ShootReq) (*community.ShootRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shoot not implemented")
}
func (*UnimplementedCommunityServer) Follow(context.Context, *community.FollowReq) (*community.FollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedCommunityServer) Unfollow(context.Context, *community.UnfollowReq) (*community.UnfollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (*UnimplementedCommunityServer) Participate(context.Context, *community.ParticipateReq) (*community.ParticipateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Participate not implemented")
}
func (*UnimplementedCommunityServer) Unparticipate(context.Context, *community.UnparticipateReq) (*community.UnparticipateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unparticipate not implemented")
}
func (*UnimplementedCommunityServer) Members(context.Context, *community.MembersReq) (*community.MembersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (*UnimplementedCommunityServer) CommunityDetail(context.Context, *community.CommunityDetailReq) (*community.CommunityDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityDetail not implemented")
}
func (*UnimplementedCommunityServer) Posts(context.Context, *community.PostsReq) (*community.PostsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Posts not implemented")
}
func (*UnimplementedCommunityServer) PostDetail(context.Context, *community.PostDetailReq) (*community.PostDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDetail not implemented")
}
func (*UnimplementedCommunityServer) Comments(context.Context, *community.CommentsReq) (*community.CommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comments not implemented")
}
func (*UnimplementedCommunityServer) CommentDetail(context.Context, *community.CommentDetailReq) (*community.CommentDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDetail not implemented")
}
func (*UnimplementedCommunityServer) Replies(context.Context, *community.RepliesReq) (*community.RepliesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replies not implemented")
}
func (*UnimplementedCommunityServer) Barrages(context.Context, *community.BarragesReq) (*community.BarragesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Barrages not implemented")
}
func (*UnimplementedCommunityServer) UserCommunities(context.Context, *community.UserCommunitiesReq) (*community.UserCommunitiesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCommunities not implemented")
}
func (*UnimplementedCommunityServer) AllCommunities(context.Context, *community.AllCommunitiesReq) (*community.AllCommunitiesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCommunities not implemented")
}
func (*UnimplementedCommunityServer) UserPosts(context.Context, *community.UserPostsReq) (*community.UserPostsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosts not implemented")
}
func (*UnimplementedCommunityServer) UserComments(context.Context, *community.UserCommentsReq) (*community.UserCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserComments not implemented")
}
func (*UnimplementedCommunityServer) UserWatchs(context.Context, *community.UserWatchsReq) (*community.UserWatchsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWatchs not implemented")
}
func (*UnimplementedCommunityServer) UserLikes(context.Context, *community.UserLikesReq) (*community.UserLikesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLikes not implemented")
}
func (*UnimplementedCommunityServer) UserFollowers(context.Context, *community.UserFollowersReq) (*community.UserFollowersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowers not implemented")
}
func (*UnimplementedCommunityServer) UserFollowees(context.Context, *community.UserFolloweesReq) (*community.UserFolloweesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowees not implemented")
}
func (*UnimplementedCommunityServer) UserFavorites(context.Context, *community.UserFavoritesReq) (*community.UserFavoritesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFavorites not implemented")
}
func (*UnimplementedCommunityServer) UserParticipates(context.Context, *community.UserParticipatesReq) (*community.UserParticipatesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserParticipates not implemented")
}
func (*UnimplementedCommunityServer) UserBallots(context.Context, *community.UserBallotsReq) (*community.UserBallotsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBallots not implemented")
}
func (*UnimplementedCommunityServer) UserFiles(context.Context, *community.UserFilesReq) (*community.UserFilesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFiles not implemented")
}
func (*UnimplementedCommunityServer) UserAwards(context.Context, *community.UserAwardsReq) (*community.UserAwardsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAwards not implemented")
}
func (*UnimplementedCommunityServer) UserInfo(context.Context, *community.UserInfoReq) (*community.UserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}

func RegisterCommunityServer(s *grpc.Server, srv CommunityServer) {
	s.RegisterService(&_Community_serviceDesc, srv)
}

func _Community_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.CreateCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/CreateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CreateCommunity(ctx, req.(*community.CreateCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UpdateCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UpdateCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateCommunity(ctx, req.(*community.UpdateCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ApplyJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.ApplyJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ApplyJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/ApplyJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ApplyJoin(ctx, req.(*community.ApplyJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AnswerApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AnswerApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AnswerApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/AnswerApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AnswerApply(ctx, req.(*community.AnswerApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_InviteJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.InviteJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).InviteJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/InviteJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).InviteJoin(ctx, req.(*community.InviteJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AnswerInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AnswerInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AnswerInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/AnswerInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AnswerInvite(ctx, req.(*community.AnswerInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_JoinCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.JoinCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).JoinCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/JoinCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).JoinCommunity(ctx, req.(*community.JoinCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_QuitCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.QuitCommunityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).QuitCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/QuitCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).QuitCommunity(ctx, req.(*community.QuitCommunityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateMember(ctx, req.(*community.UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AddTopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/AddTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddTopic(ctx, req.(*community.AddTopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AddGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/AddGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddGift(ctx, req.(*community.AddGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.PostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Post(ctx, req.(*community.PostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Comment(ctx, req.(*community.CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.ReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Reply(ctx, req.(*community.ReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Like(ctx, req.(*community.LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UnlikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Unlike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Unlike(ctx, req.(*community.UnlikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.ShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Share(ctx, req.(*community.ShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.VoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Vote(ctx, req.(*community.VoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Watch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.WatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Watch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Watch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Watch(ctx, req.(*community.WatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Unwatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UnwatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Unwatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Unwatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Unwatch(ctx, req.(*community.UnwatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Award_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Award(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Award",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Award(ctx, req.(*community.AwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.FavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Favorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Favorite(ctx, req.(*community.FavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Unfavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UnfavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Unfavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Unfavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Unfavorite(ctx, req.(*community.UnfavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Shoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.ShootReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Shoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Shoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Shoot(ctx, req.(*community.ShootReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Follow(ctx, req.(*community.FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UnfollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Unfollow(ctx, req.(*community.UnfollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Participate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.ParticipateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Participate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Participate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Participate(ctx, req.(*community.ParticipateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Unparticipate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UnparticipateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Unparticipate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Unparticipate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Unparticipate(ctx, req.(*community.UnparticipateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.MembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Members(ctx, req.(*community.MembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.CommunityDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/CommunityDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityDetail(ctx, req.(*community.CommunityDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Posts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.PostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Posts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Posts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Posts(ctx, req.(*community.PostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_PostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.PostDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).PostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/PostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).PostDetail(ctx, req.(*community.PostDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Comments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.CommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Comments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Comments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Comments(ctx, req.(*community.CommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.CommentDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/CommentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommentDetail(ctx, req.(*community.CommentDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Replies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.RepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Replies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Replies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Replies(ctx, req.(*community.RepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Barrages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.BarragesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Barrages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/Barrages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Barrages(ctx, req.(*community.BarragesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserCommunitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserCommunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserCommunities(ctx, req.(*community.UserCommunitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AllCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.AllCommunitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AllCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/AllCommunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AllCommunities(ctx, req.(*community.AllCommunitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserPostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserPosts(ctx, req.(*community.UserPostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserComments(ctx, req.(*community.UserCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserWatchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserWatchsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserWatchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserWatchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserWatchs(ctx, req.(*community.UserWatchsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserLikes(ctx, req.(*community.UserLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserFollowers(ctx, req.(*community.UserFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserFollowees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserFolloweesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserFollowees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserFollowees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserFollowees(ctx, req.(*community.UserFolloweesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserFavorites(ctx, req.(*community.UserFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserParticipates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserParticipatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserParticipates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserParticipates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserParticipates(ctx, req.(*community.UserParticipatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserBallots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserBallotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserBallots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserBallots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserBallots(ctx, req.(*community.UserBallotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserFiles(ctx, req.(*community.UserFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserAwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserAwardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserAwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserAwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserAwards(ctx, req.(*community.UserAwardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(community.UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_community.Community/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UserInfo(ctx, req.(*community.UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Community_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_community.Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunity",
			Handler:    _Community_CreateCommunity_Handler,
		},
		{
			MethodName: "UpdateCommunity",
			Handler:    _Community_UpdateCommunity_Handler,
		},
		{
			MethodName: "ApplyJoin",
			Handler:    _Community_ApplyJoin_Handler,
		},
		{
			MethodName: "AnswerApply",
			Handler:    _Community_AnswerApply_Handler,
		},
		{
			MethodName: "InviteJoin",
			Handler:    _Community_InviteJoin_Handler,
		},
		{
			MethodName: "AnswerInvite",
			Handler:    _Community_AnswerInvite_Handler,
		},
		{
			MethodName: "JoinCommunity",
			Handler:    _Community_JoinCommunity_Handler,
		},
		{
			MethodName: "QuitCommunity",
			Handler:    _Community_QuitCommunity_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Community_UpdateMember_Handler,
		},
		{
			MethodName: "AddTopic",
			Handler:    _Community_AddTopic_Handler,
		},
		{
			MethodName: "AddGift",
			Handler:    _Community_AddGift_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Community_Post_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _Community_Comment_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _Community_Reply_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _Community_Like_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _Community_Unlike_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _Community_Share_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Community_Vote_Handler,
		},
		{
			MethodName: "Watch",
			Handler:    _Community_Watch_Handler,
		},
		{
			MethodName: "Unwatch",
			Handler:    _Community_Unwatch_Handler,
		},
		{
			MethodName: "Award",
			Handler:    _Community_Award_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _Community_Favorite_Handler,
		},
		{
			MethodName: "Unfavorite",
			Handler:    _Community_Unfavorite_Handler,
		},
		{
			MethodName: "Shoot",
			Handler:    _Community_Shoot_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Community_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _Community_Unfollow_Handler,
		},
		{
			MethodName: "Participate",
			Handler:    _Community_Participate_Handler,
		},
		{
			MethodName: "Unparticipate",
			Handler:    _Community_Unparticipate_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Community_Members_Handler,
		},
		{
			MethodName: "CommunityDetail",
			Handler:    _Community_CommunityDetail_Handler,
		},
		{
			MethodName: "Posts",
			Handler:    _Community_Posts_Handler,
		},
		{
			MethodName: "PostDetail",
			Handler:    _Community_PostDetail_Handler,
		},
		{
			MethodName: "Comments",
			Handler:    _Community_Comments_Handler,
		},
		{
			MethodName: "CommentDetail",
			Handler:    _Community_CommentDetail_Handler,
		},
		{
			MethodName: "Replies",
			Handler:    _Community_Replies_Handler,
		},
		{
			MethodName: "Barrages",
			Handler:    _Community_Barrages_Handler,
		},
		{
			MethodName: "UserCommunities",
			Handler:    _Community_UserCommunities_Handler,
		},
		{
			MethodName: "AllCommunities",
			Handler:    _Community_AllCommunities_Handler,
		},
		{
			MethodName: "UserPosts",
			Handler:    _Community_UserPosts_Handler,
		},
		{
			MethodName: "UserComments",
			Handler:    _Community_UserComments_Handler,
		},
		{
			MethodName: "UserWatchs",
			Handler:    _Community_UserWatchs_Handler,
		},
		{
			MethodName: "UserLikes",
			Handler:    _Community_UserLikes_Handler,
		},
		{
			MethodName: "UserFollowers",
			Handler:    _Community_UserFollowers_Handler,
		},
		{
			MethodName: "UserFollowees",
			Handler:    _Community_UserFollowees_Handler,
		},
		{
			MethodName: "UserFavorites",
			Handler:    _Community_UserFavorites_Handler,
		},
		{
			MethodName: "UserParticipates",
			Handler:    _Community_UserParticipates_Handler,
		},
		{
			MethodName: "UserBallots",
			Handler:    _Community_UserBallots_Handler,
		},
		{
			MethodName: "UserFiles",
			Handler:    _Community_UserFiles_Handler,
		},
		{
			MethodName: "UserAwards",
			Handler:    _Community_UserAwards_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Community_UserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/community/community.proto",
}
