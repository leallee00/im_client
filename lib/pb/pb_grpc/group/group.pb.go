// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_grpc/group/group.proto

package group

import (
	context "context"
	group "github.com/leallee00/pb/pb_msg/group"
	pb_pub "github.com/leallee00/pb/pb_pub"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RefreshMemoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshMemoryReq) Reset() {
	*x = RefreshMemoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_group_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMemoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMemoryReq) ProtoMessage() {}

func (x *RefreshMemoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_group_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMemoryReq.ProtoReflect.Descriptor instead.
func (*RefreshMemoryReq) Descriptor() ([]byte, []int) {
	return file_pb_grpc_group_group_proto_rawDescGZIP(), []int{0}
}

type RefreshMemoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshMemoryRsp) Reset() {
	*x = RefreshMemoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_grpc_group_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMemoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMemoryRsp) ProtoMessage() {}

func (x *RefreshMemoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_grpc_group_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMemoryRsp.ProtoReflect.Descriptor instead.
func (*RefreshMemoryRsp) Descriptor() ([]byte, []int) {
	return file_pb_grpc_group_group_proto_rawDescGZIP(), []int{1}
}

var File_pb_grpc_group_group_proto protoreflect.FileDescriptor

var file_pb_grpc_group_group_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x62, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x22, 0x12, 0x0a, 0x10, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x32,
	0xa9, 0x1d, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x17,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x4c, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x37,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x3a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x40,
	0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x73, 0x70,
	0x12, 0x49, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x49, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x08,
	0x45, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x46,
	0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x42, 0x47,
	0x50, 0x69, 0x63, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x42, 0x47, 0x50, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x42, 0x47, 0x50, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x13, 0x45,
	0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12, 0x43,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x55, 0x6e, 0x62, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x52, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x61, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x49,
	0x0a, 0x0b, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x6e, 0x62,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x55, 0x6e, 0x62, 0x61, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x4b, 0x69, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4b, 0x69,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x4f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x44, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x73,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x18, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x4e, 0x65, 0x77, 0x4d,
	0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x4e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x4e,
	0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x52, 0x73, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x22, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x33, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x33, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67,
	0x53, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f,
	0x70, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x55, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x73, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x76, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12,
	0x49, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x48, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_grpc_group_group_proto_rawDescOnce sync.Once
	file_pb_grpc_group_group_proto_rawDescData = file_pb_grpc_group_group_proto_rawDesc
)

func file_pb_grpc_group_group_proto_rawDescGZIP() []byte {
	file_pb_grpc_group_group_proto_rawDescOnce.Do(func() {
		file_pb_grpc_group_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_grpc_group_group_proto_rawDescData)
	})
	return file_pb_grpc_group_group_proto_rawDescData
}

var file_pb_grpc_group_group_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pb_grpc_group_group_proto_goTypes = []interface{}{
	(*RefreshMemoryReq)(nil),                            // 0: pb_grpc_group.RefreshMemoryReq
	(*RefreshMemoryRsp)(nil),                            // 1: pb_grpc_group.RefreshMemoryRsp
	(*group.CreateGroupReq)(nil),                        // 2: pb_msg_group.CreateGroupReq
	(*group.InviteReq)(nil),                             // 3: pb_msg_group.InviteReq
	(*group.InviteAnswerReq)(nil),                       // 4: pb_msg_group.InviteAnswerReq
	(*group.ApplyReq)(nil),                              // 5: pb_msg_group.ApplyReq
	(*group.ApplyAnswerReq)(nil),                        // 6: pb_msg_group.ApplyAnswerReq
	(*group.GroupsReq)(nil),                             // 7: pb_msg_group.GroupsReq
	(*group.GroupIdsReq)(nil),                           // 8: pb_msg_group.GroupIdsReq
	(*group.GroupDetailReq)(nil),                        // 9: pb_msg_group.GroupDetailReq
	(*group.MembersReq)(nil),                            // 10: pb_msg_group.MembersReq
	(*group.FindMembersReq)(nil),                        // 11: pb_msg_group.FindMembersReq
	(*group.MemberDetailReq)(nil),                       // 12: pb_msg_group.MemberDetailReq
	(*group.ApplicationsReq)(nil),                       // 13: pb_msg_group.ApplicationsReq
	(*group.InvitationsReq)(nil),                        // 14: pb_msg_group.InvitationsReq
	(*group.EditNameReq)(nil),                           // 15: pb_msg_group.EditNameReq
	(*group.EditAvatarReq)(nil),                         // 16: pb_msg_group.EditAvatarReq
	(*group.EditNoticeReq)(nil),                         // 17: pb_msg_group.EditNoticeReq
	(*group.EditRemarkReq)(nil),                         // 18: pb_msg_group.EditRemarkReq
	(*group.EditBGPicReq)(nil),                          // 19: pb_msg_group.EditBGPicReq
	(*group.EditInviteRoleLimitReq)(nil),                // 20: pb_msg_group.EditInviteRoleLimitReq
	(*group.AddAdminsReq)(nil),                          // 21: pb_msg_group.AddAdminsReq
	(*group.RemoveAdminsReq)(nil),                       // 22: pb_msg_group.RemoveAdminsReq
	(*group.GroupTransferReq)(nil),                      // 23: pb_msg_group.GroupTransferReq
	(*group.BanGroupsReq)(nil),                          // 24: pb_msg_group.BanGroupsReq
	(*group.UnbanGroupsReq)(nil),                        // 25: pb_msg_group.UnbanGroupsReq
	(*group.DisbandGroupsReq)(nil),                      // 26: pb_msg_group.DisbandGroupsReq
	(*group.QuitReq)(nil),                               // 27: pb_msg_group.QuitReq
	(*group.BanMemberReq)(nil),                          // 28: pb_msg_group.BanMemberReq
	(*group.UnbanMemberReq)(nil),                        // 29: pb_msg_group.UnbanMemberReq
	(*group.KickoutReq)(nil),                            // 30: pb_msg_group.KickoutReq
	(*group.OneGroupHistoryMsgReq)(nil),                 // 31: pb_msg_group.OneGroupHistoryMsgReq
	(*group.DelGroupHistoryMsgReq)(nil),                 // 32: pb_msg_group.DelGroupHistoryMsgReq
	(*group.GroupMsgReadListReq)(nil),                   // 33: pb_msg_group.GroupMsgReadListReq
	(*pb_pub.MsgRecallReq)(nil),                         // 34: pb_pub.MsgRecallReq
	(*pb_pub.MsgChangeReq)(nil),                         // 35: pb_pub.MsgChangeReq
	(*group.ReadyForGroupsNewMsgInfoReq)(nil),           // 36: pb_msg_group.ReadyForGroupsNewMsgInfoReq
	(*group.FetchGroupHistoryMsgReq)(nil),               // 37: pb_msg_group.FetchGroupHistoryMsgReq
	(*group.FetchGroupHistoryMsgFromGroupMsgSnReq)(nil), // 38: pb_msg_group.FetchGroupHistoryMsgFromGroupMsgSnReq
	(*group.GroupTopSetReq)(nil),                        // 39: pb_msg_group.GroupTopSetReq
	(*group.EditGroupRemarkReq)(nil),                    // 40: pb_msg_group.EditGroupRemarkReq
	(*group.EditMemberRemarkReq)(nil),                   // 41: pb_msg_group.EditMemberRemarkReq
	(*group.IsGroupMemberReq)(nil),                      // 42: pb_msg_group.IsGroupMemberReq
	(*group.SetMemberChatBannedStatusReq)(nil),          // 43: pb_msg_group.SetMemberChatBannedStatusReq
	(*group.SetNewMemberRemindReq)(nil),                 // 44: pb_msg_group.SetNewMemberRemindReq
	(*group.SetScanCodeJoinGroupSwitchReq)(nil),         // 45: pb_msg_group.SetScanCodeJoinGroupSwitchReq
	(*group.ClearHisMsgReq)(nil),                        // 46: pb_msg_group.ClearHisMsgReq
	(*group.SetFreeJoinStatusReq)(nil),                  // 47: pb_msg_group.SetFreeJoinStatusReq
	(*group.SetGroupPropReq)(nil),                       // 48: pb_msg_group.SetGroupPropReq
	(*group.CreateGroupRsp)(nil),                        // 49: pb_msg_group.CreateGroupRsp
	(*group.InviteRsp)(nil),                             // 50: pb_msg_group.InviteRsp
	(*group.InviteAnswerRsp)(nil),                       // 51: pb_msg_group.InviteAnswerRsp
	(*group.ApplyRsp)(nil),                              // 52: pb_msg_group.ApplyRsp
	(*group.ApplyAnswerRsp)(nil),                        // 53: pb_msg_group.ApplyAnswerRsp
	(*group.GroupsRsp)(nil),                             // 54: pb_msg_group.GroupsRsp
	(*group.GroupIdsRsp)(nil),                           // 55: pb_msg_group.GroupIdsRsp
	(*group.GroupDetailRsp)(nil),                        // 56: pb_msg_group.GroupDetailRsp
	(*group.MembersRsp)(nil),                            // 57: pb_msg_group.MembersRsp
	(*group.FindMembersRsp)(nil),                        // 58: pb_msg_group.FindMembersRsp
	(*group.MemberDetailRsp)(nil),                       // 59: pb_msg_group.MemberDetailRsp
	(*group.ApplicationsRsp)(nil),                       // 60: pb_msg_group.ApplicationsRsp
	(*group.InvitationsRsp)(nil),                        // 61: pb_msg_group.InvitationsRsp
	(*group.EditNameRsp)(nil),                           // 62: pb_msg_group.EditNameRsp
	(*group.EditAvatarRsp)(nil),                         // 63: pb_msg_group.EditAvatarRsp
	(*group.EditNoticeRsp)(nil),                         // 64: pb_msg_group.EditNoticeRsp
	(*group.EditRemarkRsp)(nil),                         // 65: pb_msg_group.EditRemarkRsp
	(*group.EditBGPicRsp)(nil),                          // 66: pb_msg_group.EditBGPicRsp
	(*group.EditInviteRoleLimitRsp)(nil),                // 67: pb_msg_group.EditInviteRoleLimitRsp
	(*group.AddAdminsRsp)(nil),                          // 68: pb_msg_group.AddAdminsRsp
	(*group.RemoveAdminsRsp)(nil),                       // 69: pb_msg_group.RemoveAdminsRsp
	(*group.GroupTransferRsp)(nil),                      // 70: pb_msg_group.GroupTransferRsp
	(*group.BanGroupsRsp)(nil),                          // 71: pb_msg_group.BanGroupsRsp
	(*group.UnbanGroupsRsp)(nil),                        // 72: pb_msg_group.UnbanGroupsRsp
	(*group.DisbandGroupsRsp)(nil),                      // 73: pb_msg_group.DisbandGroupsRsp
	(*group.QuitRsp)(nil),                               // 74: pb_msg_group.QuitRsp
	(*group.BanMemberRsp)(nil),                          // 75: pb_msg_group.BanMemberRsp
	(*group.UnbanMemberRsp)(nil),                        // 76: pb_msg_group.UnbanMemberRsp
	(*group.KickoutRsp)(nil),                            // 77: pb_msg_group.KickoutRsp
	(*group.OneGroupHistoryMsgRsp)(nil),                 // 78: pb_msg_group.OneGroupHistoryMsgRsp
	(*group.DelGroupHistoryMsgRsp)(nil),                 // 79: pb_msg_group.DelGroupHistoryMsgRsp
	(*group.GroupMsgReadListRsp)(nil),                   // 80: pb_msg_group.GroupMsgReadListRsp
	(*pb_pub.MsgRecallRsp)(nil),                         // 81: pb_pub.MsgRecallRsp
	(*pb_pub.MsgChangeRsp)(nil),                         // 82: pb_pub.MsgChangeRsp
	(*group.ReadyForGroupsNewMsgInfoRsp)(nil),           // 83: pb_msg_group.ReadyForGroupsNewMsgInfoRsp
	(*group.FetchGroupHistoryMsgRsp)(nil),               // 84: pb_msg_group.FetchGroupHistoryMsgRsp
	(*group.FetchGroupHistoryMsgFromGroupMsgSnRsp)(nil), // 85: pb_msg_group.FetchGroupHistoryMsgFromGroupMsgSnRsp
	(*group.GroupTopSetRsp)(nil),                        // 86: pb_msg_group.GroupTopSetRsp
	(*group.EditGroupRemarkRsp)(nil),                    // 87: pb_msg_group.EditGroupRemarkRsp
	(*group.EditMemberRemarkRsp)(nil),                   // 88: pb_msg_group.EditMemberRemarkRsp
	(*group.IsGroupMemberRsp)(nil),                      // 89: pb_msg_group.IsGroupMemberRsp
	(*group.SetMemberChatBannedStatusRsp)(nil),          // 90: pb_msg_group.SetMemberChatBannedStatusRsp
	(*group.SetNewMemberRemindRsp)(nil),                 // 91: pb_msg_group.SetNewMemberRemindRsp
	(*group.SetScanCodeJoinGroupSwitchRsp)(nil),         // 92: pb_msg_group.SetScanCodeJoinGroupSwitchRsp
	(*group.ClearHisMsgRsp)(nil),                        // 93: pb_msg_group.ClearHisMsgRsp
	(*group.SetFreeJoinStatusRsp)(nil),                  // 94: pb_msg_group.SetFreeJoinStatusRsp
	(*pb_pub.CommRsp)(nil),                              // 95: pb_pub.CommRsp
}
var file_pb_grpc_group_group_proto_depIdxs = []int32{
	2,  // 0: pb_grpc_group.Group.CreateGroup:input_type -> pb_msg_group.CreateGroupReq
	3,  // 1: pb_grpc_group.Group.Invite:input_type -> pb_msg_group.InviteReq
	4,  // 2: pb_grpc_group.Group.InviteAnswer:input_type -> pb_msg_group.InviteAnswerReq
	5,  // 3: pb_grpc_group.Group.Apply:input_type -> pb_msg_group.ApplyReq
	6,  // 4: pb_grpc_group.Group.ApplyAnswer:input_type -> pb_msg_group.ApplyAnswerReq
	7,  // 5: pb_grpc_group.Group.Groups:input_type -> pb_msg_group.GroupsReq
	8,  // 6: pb_grpc_group.Group.GroupIds:input_type -> pb_msg_group.GroupIdsReq
	9,  // 7: pb_grpc_group.Group.GroupDetail:input_type -> pb_msg_group.GroupDetailReq
	10, // 8: pb_grpc_group.Group.Members:input_type -> pb_msg_group.MembersReq
	11, // 9: pb_grpc_group.Group.FindMembers:input_type -> pb_msg_group.FindMembersReq
	12, // 10: pb_grpc_group.Group.MemberDetail:input_type -> pb_msg_group.MemberDetailReq
	13, // 11: pb_grpc_group.Group.Applications:input_type -> pb_msg_group.ApplicationsReq
	14, // 12: pb_grpc_group.Group.Invitations:input_type -> pb_msg_group.InvitationsReq
	15, // 13: pb_grpc_group.Group.EditName:input_type -> pb_msg_group.EditNameReq
	16, // 14: pb_grpc_group.Group.EditAvatar:input_type -> pb_msg_group.EditAvatarReq
	17, // 15: pb_grpc_group.Group.EditNotice:input_type -> pb_msg_group.EditNoticeReq
	18, // 16: pb_grpc_group.Group.EditRemark:input_type -> pb_msg_group.EditRemarkReq
	19, // 17: pb_grpc_group.Group.EditBGPic:input_type -> pb_msg_group.EditBGPicReq
	20, // 18: pb_grpc_group.Group.EditInviteRoleLimit:input_type -> pb_msg_group.EditInviteRoleLimitReq
	21, // 19: pb_grpc_group.Group.AddAdmins:input_type -> pb_msg_group.AddAdminsReq
	22, // 20: pb_grpc_group.Group.RemoveAdmins:input_type -> pb_msg_group.RemoveAdminsReq
	23, // 21: pb_grpc_group.Group.GroupTransfer:input_type -> pb_msg_group.GroupTransferReq
	24, // 22: pb_grpc_group.Group.BanGroups:input_type -> pb_msg_group.BanGroupsReq
	25, // 23: pb_grpc_group.Group.UnbanGroups:input_type -> pb_msg_group.UnbanGroupsReq
	26, // 24: pb_grpc_group.Group.DisbandGroups:input_type -> pb_msg_group.DisbandGroupsReq
	27, // 25: pb_grpc_group.Group.Quit:input_type -> pb_msg_group.QuitReq
	28, // 26: pb_grpc_group.Group.BanMember:input_type -> pb_msg_group.BanMemberReq
	29, // 27: pb_grpc_group.Group.UnbanMember:input_type -> pb_msg_group.UnbanMemberReq
	30, // 28: pb_grpc_group.Group.Kickout:input_type -> pb_msg_group.KickoutReq
	31, // 29: pb_grpc_group.Group.GetOneGroupHistoryMsg:input_type -> pb_msg_group.OneGroupHistoryMsgReq
	32, // 30: pb_grpc_group.Group.DelGroupHistoryMsg:input_type -> pb_msg_group.DelGroupHistoryMsgReq
	33, // 31: pb_grpc_group.Group.GetGroupMsgReadList:input_type -> pb_msg_group.GroupMsgReadListReq
	34, // 32: pb_grpc_group.Group.MsgRecall:input_type -> pb_pub.MsgRecallReq
	35, // 33: pb_grpc_group.Group.MsgChange:input_type -> pb_pub.MsgChangeReq
	36, // 34: pb_grpc_group.Group.ReadyForGroupsNewMsgInfo:input_type -> pb_msg_group.ReadyForGroupsNewMsgInfoReq
	37, // 35: pb_grpc_group.Group.FetchGroupHistoryMsg:input_type -> pb_msg_group.FetchGroupHistoryMsgReq
	38, // 36: pb_grpc_group.Group.FetchGroupHistoryMsgFromGroupMsgSn:input_type -> pb_msg_group.FetchGroupHistoryMsgFromGroupMsgSnReq
	39, // 37: pb_grpc_group.Group.GroupTopSet:input_type -> pb_msg_group.GroupTopSetReq
	40, // 38: pb_grpc_group.Group.EditGroupRemark:input_type -> pb_msg_group.EditGroupRemarkReq
	41, // 39: pb_grpc_group.Group.EditMemberRemark:input_type -> pb_msg_group.EditMemberRemarkReq
	42, // 40: pb_grpc_group.Group.IsGroupMember:input_type -> pb_msg_group.IsGroupMemberReq
	43, // 41: pb_grpc_group.Group.SetMemberChatBannedStatus:input_type -> pb_msg_group.SetMemberChatBannedStatusReq
	44, // 42: pb_grpc_group.Group.SetNewMemberRemind:input_type -> pb_msg_group.SetNewMemberRemindReq
	45, // 43: pb_grpc_group.Group.SetScanCodeJoinGroupSwitch:input_type -> pb_msg_group.SetScanCodeJoinGroupSwitchReq
	46, // 44: pb_grpc_group.Group.ClearHisMsg:input_type -> pb_msg_group.ClearHisMsgReq
	47, // 45: pb_grpc_group.Group.SetFreeJoinStatus:input_type -> pb_msg_group.SetFreeJoinStatusReq
	48, // 46: pb_grpc_group.Group.SetGroupProperty:input_type -> pb_msg_group.SetGroupPropReq
	49, // 47: pb_grpc_group.Group.CreateGroup:output_type -> pb_msg_group.CreateGroupRsp
	50, // 48: pb_grpc_group.Group.Invite:output_type -> pb_msg_group.InviteRsp
	51, // 49: pb_grpc_group.Group.InviteAnswer:output_type -> pb_msg_group.InviteAnswerRsp
	52, // 50: pb_grpc_group.Group.Apply:output_type -> pb_msg_group.ApplyRsp
	53, // 51: pb_grpc_group.Group.ApplyAnswer:output_type -> pb_msg_group.ApplyAnswerRsp
	54, // 52: pb_grpc_group.Group.Groups:output_type -> pb_msg_group.GroupsRsp
	55, // 53: pb_grpc_group.Group.GroupIds:output_type -> pb_msg_group.GroupIdsRsp
	56, // 54: pb_grpc_group.Group.GroupDetail:output_type -> pb_msg_group.GroupDetailRsp
	57, // 55: pb_grpc_group.Group.Members:output_type -> pb_msg_group.MembersRsp
	58, // 56: pb_grpc_group.Group.FindMembers:output_type -> pb_msg_group.FindMembersRsp
	59, // 57: pb_grpc_group.Group.MemberDetail:output_type -> pb_msg_group.MemberDetailRsp
	60, // 58: pb_grpc_group.Group.Applications:output_type -> pb_msg_group.ApplicationsRsp
	61, // 59: pb_grpc_group.Group.Invitations:output_type -> pb_msg_group.InvitationsRsp
	62, // 60: pb_grpc_group.Group.EditName:output_type -> pb_msg_group.EditNameRsp
	63, // 61: pb_grpc_group.Group.EditAvatar:output_type -> pb_msg_group.EditAvatarRsp
	64, // 62: pb_grpc_group.Group.EditNotice:output_type -> pb_msg_group.EditNoticeRsp
	65, // 63: pb_grpc_group.Group.EditRemark:output_type -> pb_msg_group.EditRemarkRsp
	66, // 64: pb_grpc_group.Group.EditBGPic:output_type -> pb_msg_group.EditBGPicRsp
	67, // 65: pb_grpc_group.Group.EditInviteRoleLimit:output_type -> pb_msg_group.EditInviteRoleLimitRsp
	68, // 66: pb_grpc_group.Group.AddAdmins:output_type -> pb_msg_group.AddAdminsRsp
	69, // 67: pb_grpc_group.Group.RemoveAdmins:output_type -> pb_msg_group.RemoveAdminsRsp
	70, // 68: pb_grpc_group.Group.GroupTransfer:output_type -> pb_msg_group.GroupTransferRsp
	71, // 69: pb_grpc_group.Group.BanGroups:output_type -> pb_msg_group.BanGroupsRsp
	72, // 70: pb_grpc_group.Group.UnbanGroups:output_type -> pb_msg_group.UnbanGroupsRsp
	73, // 71: pb_grpc_group.Group.DisbandGroups:output_type -> pb_msg_group.DisbandGroupsRsp
	74, // 72: pb_grpc_group.Group.Quit:output_type -> pb_msg_group.QuitRsp
	75, // 73: pb_grpc_group.Group.BanMember:output_type -> pb_msg_group.BanMemberRsp
	76, // 74: pb_grpc_group.Group.UnbanMember:output_type -> pb_msg_group.UnbanMemberRsp
	77, // 75: pb_grpc_group.Group.Kickout:output_type -> pb_msg_group.KickoutRsp
	78, // 76: pb_grpc_group.Group.GetOneGroupHistoryMsg:output_type -> pb_msg_group.OneGroupHistoryMsgRsp
	79, // 77: pb_grpc_group.Group.DelGroupHistoryMsg:output_type -> pb_msg_group.DelGroupHistoryMsgRsp
	80, // 78: pb_grpc_group.Group.GetGroupMsgReadList:output_type -> pb_msg_group.GroupMsgReadListRsp
	81, // 79: pb_grpc_group.Group.MsgRecall:output_type -> pb_pub.MsgRecallRsp
	82, // 80: pb_grpc_group.Group.MsgChange:output_type -> pb_pub.MsgChangeRsp
	83, // 81: pb_grpc_group.Group.ReadyForGroupsNewMsgInfo:output_type -> pb_msg_group.ReadyForGroupsNewMsgInfoRsp
	84, // 82: pb_grpc_group.Group.FetchGroupHistoryMsg:output_type -> pb_msg_group.FetchGroupHistoryMsgRsp
	85, // 83: pb_grpc_group.Group.FetchGroupHistoryMsgFromGroupMsgSn:output_type -> pb_msg_group.FetchGroupHistoryMsgFromGroupMsgSnRsp
	86, // 84: pb_grpc_group.Group.GroupTopSet:output_type -> pb_msg_group.GroupTopSetRsp
	87, // 85: pb_grpc_group.Group.EditGroupRemark:output_type -> pb_msg_group.EditGroupRemarkRsp
	88, // 86: pb_grpc_group.Group.EditMemberRemark:output_type -> pb_msg_group.EditMemberRemarkRsp
	89, // 87: pb_grpc_group.Group.IsGroupMember:output_type -> pb_msg_group.IsGroupMemberRsp
	90, // 88: pb_grpc_group.Group.SetMemberChatBannedStatus:output_type -> pb_msg_group.SetMemberChatBannedStatusRsp
	91, // 89: pb_grpc_group.Group.SetNewMemberRemind:output_type -> pb_msg_group.SetNewMemberRemindRsp
	92, // 90: pb_grpc_group.Group.SetScanCodeJoinGroupSwitch:output_type -> pb_msg_group.SetScanCodeJoinGroupSwitchRsp
	93, // 91: pb_grpc_group.Group.ClearHisMsg:output_type -> pb_msg_group.ClearHisMsgRsp
	94, // 92: pb_grpc_group.Group.SetFreeJoinStatus:output_type -> pb_msg_group.SetFreeJoinStatusRsp
	95, // 93: pb_grpc_group.Group.SetGroupProperty:output_type -> pb_pub.CommRsp
	47, // [47:94] is the sub-list for method output_type
	0,  // [0:47] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_pb_grpc_group_group_proto_init() }
func file_pb_grpc_group_group_proto_init() {
	if File_pb_grpc_group_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_grpc_group_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMemoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_grpc_group_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMemoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_grpc_group_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_grpc_group_group_proto_goTypes,
		DependencyIndexes: file_pb_grpc_group_group_proto_depIdxs,
		MessageInfos:      file_pb_grpc_group_group_proto_msgTypes,
	}.Build()
	File_pb_grpc_group_group_proto = out.File
	file_pb_grpc_group_group_proto_rawDesc = nil
	file_pb_grpc_group_group_proto_goTypes = nil
	file_pb_grpc_group_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupClient interface {
	// 创建群聊
	CreateGroup(ctx context.Context, in *group.CreateGroupReq, opts ...grpc.CallOption) (*group.CreateGroupRsp, error)
	// 邀请入群
	Invite(ctx context.Context, in *group.InviteReq, opts ...grpc.CallOption) (*group.InviteRsp, error)
	// 应答入群邀请
	InviteAnswer(ctx context.Context, in *group.InviteAnswerReq, opts ...grpc.CallOption) (*group.InviteAnswerRsp, error)
	// 申请入群
	Apply(ctx context.Context, in *group.ApplyReq, opts ...grpc.CallOption) (*group.ApplyRsp, error)
	// 应答入群申请
	ApplyAnswer(ctx context.Context, in *group.ApplyAnswerReq, opts ...grpc.CallOption) (*group.ApplyAnswerRsp, error)
	// 获取全部群
	Groups(ctx context.Context, in *group.GroupsReq, opts ...grpc.CallOption) (*group.GroupsRsp, error)
	// @experiment 获取全部群ID
	GroupIds(ctx context.Context, in *group.GroupIdsReq, opts ...grpc.CallOption) (*group.GroupIdsRsp, error)
	// 群详情
	GroupDetail(ctx context.Context, in *group.GroupDetailReq, opts ...grpc.CallOption) (*group.GroupDetailRsp, error)
	// 获取群成员
	Members(ctx context.Context, in *group.MembersReq, opts ...grpc.CallOption) (*group.MembersRsp, error)
	// 为@ 提供搜索服务，为群成员列表提供搜索功能
	FindMembers(ctx context.Context, in *group.FindMembersReq, opts ...grpc.CallOption) (*group.FindMembersRsp, error)
	// 成员详情
	MemberDetail(ctx context.Context, in *group.MemberDetailReq, opts ...grpc.CallOption) (*group.MemberDetailRsp, error)
	// 获取全部申请,我申请的,我审批的
	Applications(ctx context.Context, in *group.ApplicationsReq, opts ...grpc.CallOption) (*group.ApplicationsRsp, error)
	// 获取全部邀请,我邀请的,我应答的
	Invitations(ctx context.Context, in *group.InvitationsReq, opts ...grpc.CallOption) (*group.InvitationsRsp, error)
	// 修改群名
	EditName(ctx context.Context, in *group.EditNameReq, opts ...grpc.CallOption) (*group.EditNameRsp, error)
	// 修改头像
	EditAvatar(ctx context.Context, in *group.EditAvatarReq, opts ...grpc.CallOption) (*group.EditAvatarRsp, error)
	// 编辑公告
	EditNotice(ctx context.Context, in *group.EditNoticeReq, opts ...grpc.CallOption) (*group.EditNoticeRsp, error)
	// 编辑群备注 改自己的
	EditRemark(ctx context.Context, in *group.EditRemarkReq, opts ...grpc.CallOption) (*group.EditRemarkRsp, error)
	// 编辑群背景图
	EditBGPic(ctx context.Context, in *group.EditBGPicReq, opts ...grpc.CallOption) (*group.EditBGPicRsp, error)
	// 设置群邀请限制，管理员才能设置
	EditInviteRoleLimit(ctx context.Context, in *group.EditInviteRoleLimitReq, opts ...grpc.CallOption) (*group.EditInviteRoleLimitRsp, error)
	// 添加管理员
	AddAdmins(ctx context.Context, in *group.AddAdminsReq, opts ...grpc.CallOption) (*group.AddAdminsRsp, error)
	// 移除管理员
	RemoveAdmins(ctx context.Context, in *group.RemoveAdminsReq, opts ...grpc.CallOption) (*group.RemoveAdminsRsp, error)
	// 群主转让
	GroupTransfer(ctx context.Context, in *group.GroupTransferReq, opts ...grpc.CallOption) (*group.GroupTransferRsp, error)
	// 封禁群
	BanGroups(ctx context.Context, in *group.BanGroupsReq, opts ...grpc.CallOption) (*group.BanGroupsRsp, error)
	// 解禁群
	UnbanGroups(ctx context.Context, in *group.UnbanGroupsReq, opts ...grpc.CallOption) (*group.UnbanGroupsRsp, error)
	// 解散群
	DisbandGroups(ctx context.Context, in *group.DisbandGroupsReq, opts ...grpc.CallOption) (*group.DisbandGroupsRsp, error)
	// 退出群
	Quit(ctx context.Context, in *group.QuitReq, opts ...grpc.CallOption) (*group.QuitRsp, error)
	// 封禁成员
	BanMember(ctx context.Context, in *group.BanMemberReq, opts ...grpc.CallOption) (*group.BanMemberRsp, error)
	// 解禁成员
	UnbanMember(ctx context.Context, in *group.UnbanMemberReq, opts ...grpc.CallOption) (*group.UnbanMemberRsp, error)
	// 踢出成员
	Kickout(ctx context.Context, in *group.KickoutReq, opts ...grpc.CallOption) (*group.KickoutRsp, error)
	// 读取单个消息
	GetOneGroupHistoryMsg(ctx context.Context, in *group.OneGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.OneGroupHistoryMsgRsp, error)
	// 删除单个消息
	DelGroupHistoryMsg(ctx context.Context, in *group.DelGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.DelGroupHistoryMsgRsp, error)
	// 已读用户列表
	GetGroupMsgReadList(ctx context.Context, in *group.GroupMsgReadListReq, opts ...grpc.CallOption) (*group.GroupMsgReadListRsp, error)
	// 撤回消息
	MsgRecall(ctx context.Context, in *pb_pub.MsgRecallReq, opts ...grpc.CallOption) (*pb_pub.MsgRecallRsp, error)
	// 更改消息
	MsgChange(ctx context.Context, in *pb_pub.MsgChangeReq, opts ...grpc.CallOption) (*pb_pub.MsgChangeRsp, error)
	// 准备好接收用户相关所有群新消息信息
	ReadyForGroupsNewMsgInfo(ctx context.Context, in *group.ReadyForGroupsNewMsgInfoReq, opts ...grpc.CallOption) (*group.ReadyForGroupsNewMsgInfoRsp, error)
	// 历史消息读取
	FetchGroupHistoryMsg(ctx context.Context, in *group.FetchGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.FetchGroupHistoryMsgRsp, error)
	// 历史消息读取
	FetchGroupHistoryMsgFromGroupMsgSn(ctx context.Context, in *group.FetchGroupHistoryMsgFromGroupMsgSnReq, opts ...grpc.CallOption) (*group.FetchGroupHistoryMsgFromGroupMsgSnRsp, error)
	// 群置顶设置,所有人都可设置，只影响自己的显示
	GroupTopSet(ctx context.Context, in *group.GroupTopSetReq, opts ...grpc.CallOption) (*group.GroupTopSetRsp, error)
	// 编辑群备注,所有人都可设置，只影响自己的显示
	EditGroupRemark(ctx context.Context, in *group.EditGroupRemarkReq, opts ...grpc.CallOption) (*group.EditGroupRemarkRsp, error)
	// 编辑群成员备注,所有人都可设置，只影响自己的显示
	EditMemberRemark(ctx context.Context, in *group.EditMemberRemarkReq, opts ...grpc.CallOption) (*group.EditMemberRemarkRsp, error)
	// 用户是否群成员
	IsGroupMember(ctx context.Context, in *group.IsGroupMemberReq, opts ...grpc.CallOption) (*group.IsGroupMemberRsp, error)
	// 群用户禁言状态，只有管理员才可发言
	SetMemberChatBannedStatus(ctx context.Context, in *group.SetMemberChatBannedStatusReq, opts ...grpc.CallOption) (*group.SetMemberChatBannedStatusRsp, error)
	// 设置新成员提醒开关
	SetNewMemberRemind(ctx context.Context, in *group.SetNewMemberRemindReq, opts ...grpc.CallOption) (*group.SetNewMemberRemindRsp, error)
	// 设置是否允许扫描二维码入群
	SetScanCodeJoinGroupSwitch(ctx context.Context, in *group.SetScanCodeJoinGroupSwitchReq, opts ...grpc.CallOption) (*group.SetScanCodeJoinGroupSwitchRsp, error)
	// 清理历史消息
	ClearHisMsg(ctx context.Context, in *group.ClearHisMsgReq, opts ...grpc.CallOption) (*group.ClearHisMsgRsp, error)
	// 设置是否可以自由加入
	SetFreeJoinStatus(ctx context.Context, in *group.SetFreeJoinStatusReq, opts ...grpc.CallOption) (*group.SetFreeJoinStatusRsp, error)
	// 属性设置统一接口，一个个的写太麻烦了
	SetGroupProperty(ctx context.Context, in *group.SetGroupPropReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateGroup(ctx context.Context, in *group.CreateGroupReq, opts ...grpc.CallOption) (*group.CreateGroupRsp, error) {
	out := new(group.CreateGroupRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Invite(ctx context.Context, in *group.InviteReq, opts ...grpc.CallOption) (*group.InviteRsp, error) {
	out := new(group.InviteRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteAnswer(ctx context.Context, in *group.InviteAnswerReq, opts ...grpc.CallOption) (*group.InviteAnswerRsp, error) {
	out := new(group.InviteAnswerRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/InviteAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Apply(ctx context.Context, in *group.ApplyReq, opts ...grpc.CallOption) (*group.ApplyRsp, error) {
	out := new(group.ApplyRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ApplyAnswer(ctx context.Context, in *group.ApplyAnswerReq, opts ...grpc.CallOption) (*group.ApplyAnswerRsp, error) {
	out := new(group.ApplyAnswerRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/ApplyAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Groups(ctx context.Context, in *group.GroupsReq, opts ...grpc.CallOption) (*group.GroupsRsp, error) {
	out := new(group.GroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Groups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupIds(ctx context.Context, in *group.GroupIdsReq, opts ...grpc.CallOption) (*group.GroupIdsRsp, error) {
	out := new(group.GroupIdsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GroupIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupDetail(ctx context.Context, in *group.GroupDetailReq, opts ...grpc.CallOption) (*group.GroupDetailRsp, error) {
	out := new(group.GroupDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GroupDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Members(ctx context.Context, in *group.MembersReq, opts ...grpc.CallOption) (*group.MembersRsp, error) {
	out := new(group.MembersRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) FindMembers(ctx context.Context, in *group.FindMembersReq, opts ...grpc.CallOption) (*group.FindMembersRsp, error) {
	out := new(group.FindMembersRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/FindMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MemberDetail(ctx context.Context, in *group.MemberDetailReq, opts ...grpc.CallOption) (*group.MemberDetailRsp, error) {
	out := new(group.MemberDetailRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/MemberDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Applications(ctx context.Context, in *group.ApplicationsReq, opts ...grpc.CallOption) (*group.ApplicationsRsp, error) {
	out := new(group.ApplicationsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Invitations(ctx context.Context, in *group.InvitationsReq, opts ...grpc.CallOption) (*group.InvitationsRsp, error) {
	out := new(group.InvitationsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Invitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditName(ctx context.Context, in *group.EditNameReq, opts ...grpc.CallOption) (*group.EditNameRsp, error) {
	out := new(group.EditNameRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditAvatar(ctx context.Context, in *group.EditAvatarReq, opts ...grpc.CallOption) (*group.EditAvatarRsp, error) {
	out := new(group.EditAvatarRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditNotice(ctx context.Context, in *group.EditNoticeReq, opts ...grpc.CallOption) (*group.EditNoticeRsp, error) {
	out := new(group.EditNoticeRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditRemark(ctx context.Context, in *group.EditRemarkReq, opts ...grpc.CallOption) (*group.EditRemarkRsp, error) {
	out := new(group.EditRemarkRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditBGPic(ctx context.Context, in *group.EditBGPicReq, opts ...grpc.CallOption) (*group.EditBGPicRsp, error) {
	out := new(group.EditBGPicRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditBGPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditInviteRoleLimit(ctx context.Context, in *group.EditInviteRoleLimitReq, opts ...grpc.CallOption) (*group.EditInviteRoleLimitRsp, error) {
	out := new(group.EditInviteRoleLimitRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditInviteRoleLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) AddAdmins(ctx context.Context, in *group.AddAdminsReq, opts ...grpc.CallOption) (*group.AddAdminsRsp, error) {
	out := new(group.AddAdminsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/AddAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) RemoveAdmins(ctx context.Context, in *group.RemoveAdminsReq, opts ...grpc.CallOption) (*group.RemoveAdminsRsp, error) {
	out := new(group.RemoveAdminsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/RemoveAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupTransfer(ctx context.Context, in *group.GroupTransferReq, opts ...grpc.CallOption) (*group.GroupTransferRsp, error) {
	out := new(group.GroupTransferRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GroupTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) BanGroups(ctx context.Context, in *group.BanGroupsReq, opts ...grpc.CallOption) (*group.BanGroupsRsp, error) {
	out := new(group.BanGroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/BanGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UnbanGroups(ctx context.Context, in *group.UnbanGroupsReq, opts ...grpc.CallOption) (*group.UnbanGroupsRsp, error) {
	out := new(group.UnbanGroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/UnbanGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DisbandGroups(ctx context.Context, in *group.DisbandGroupsReq, opts ...grpc.CallOption) (*group.DisbandGroupsRsp, error) {
	out := new(group.DisbandGroupsRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/DisbandGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Quit(ctx context.Context, in *group.QuitReq, opts ...grpc.CallOption) (*group.QuitRsp, error) {
	out := new(group.QuitRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) BanMember(ctx context.Context, in *group.BanMemberReq, opts ...grpc.CallOption) (*group.BanMemberRsp, error) {
	out := new(group.BanMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/BanMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) UnbanMember(ctx context.Context, in *group.UnbanMemberReq, opts ...grpc.CallOption) (*group.UnbanMemberRsp, error) {
	out := new(group.UnbanMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/UnbanMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) Kickout(ctx context.Context, in *group.KickoutReq, opts ...grpc.CallOption) (*group.KickoutRsp, error) {
	out := new(group.KickoutRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/Kickout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetOneGroupHistoryMsg(ctx context.Context, in *group.OneGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.OneGroupHistoryMsgRsp, error) {
	out := new(group.OneGroupHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GetOneGroupHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DelGroupHistoryMsg(ctx context.Context, in *group.DelGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.DelGroupHistoryMsgRsp, error) {
	out := new(group.DelGroupHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/DelGroupHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMsgReadList(ctx context.Context, in *group.GroupMsgReadListReq, opts ...grpc.CallOption) (*group.GroupMsgReadListRsp, error) {
	out := new(group.GroupMsgReadListRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GetGroupMsgReadList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MsgRecall(ctx context.Context, in *pb_pub.MsgRecallReq, opts ...grpc.CallOption) (*pb_pub.MsgRecallRsp, error) {
	out := new(pb_pub.MsgRecallRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/MsgRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) MsgChange(ctx context.Context, in *pb_pub.MsgChangeReq, opts ...grpc.CallOption) (*pb_pub.MsgChangeRsp, error) {
	out := new(pb_pub.MsgChangeRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/MsgChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ReadyForGroupsNewMsgInfo(ctx context.Context, in *group.ReadyForGroupsNewMsgInfoReq, opts ...grpc.CallOption) (*group.ReadyForGroupsNewMsgInfoRsp, error) {
	out := new(group.ReadyForGroupsNewMsgInfoRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/ReadyForGroupsNewMsgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) FetchGroupHistoryMsg(ctx context.Context, in *group.FetchGroupHistoryMsgReq, opts ...grpc.CallOption) (*group.FetchGroupHistoryMsgRsp, error) {
	out := new(group.FetchGroupHistoryMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/FetchGroupHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) FetchGroupHistoryMsgFromGroupMsgSn(ctx context.Context, in *group.FetchGroupHistoryMsgFromGroupMsgSnReq, opts ...grpc.CallOption) (*group.FetchGroupHistoryMsgFromGroupMsgSnRsp, error) {
	out := new(group.FetchGroupHistoryMsgFromGroupMsgSnRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/FetchGroupHistoryMsgFromGroupMsgSn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GroupTopSet(ctx context.Context, in *group.GroupTopSetReq, opts ...grpc.CallOption) (*group.GroupTopSetRsp, error) {
	out := new(group.GroupTopSetRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/GroupTopSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditGroupRemark(ctx context.Context, in *group.EditGroupRemarkReq, opts ...grpc.CallOption) (*group.EditGroupRemarkRsp, error) {
	out := new(group.EditGroupRemarkRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditGroupRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) EditMemberRemark(ctx context.Context, in *group.EditMemberRemarkReq, opts ...grpc.CallOption) (*group.EditMemberRemarkRsp, error) {
	out := new(group.EditMemberRemarkRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/EditMemberRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) IsGroupMember(ctx context.Context, in *group.IsGroupMemberReq, opts ...grpc.CallOption) (*group.IsGroupMemberRsp, error) {
	out := new(group.IsGroupMemberRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/IsGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetMemberChatBannedStatus(ctx context.Context, in *group.SetMemberChatBannedStatusReq, opts ...grpc.CallOption) (*group.SetMemberChatBannedStatusRsp, error) {
	out := new(group.SetMemberChatBannedStatusRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/SetMemberChatBannedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetNewMemberRemind(ctx context.Context, in *group.SetNewMemberRemindReq, opts ...grpc.CallOption) (*group.SetNewMemberRemindRsp, error) {
	out := new(group.SetNewMemberRemindRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/SetNewMemberRemind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetScanCodeJoinGroupSwitch(ctx context.Context, in *group.SetScanCodeJoinGroupSwitchReq, opts ...grpc.CallOption) (*group.SetScanCodeJoinGroupSwitchRsp, error) {
	out := new(group.SetScanCodeJoinGroupSwitchRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/SetScanCodeJoinGroupSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ClearHisMsg(ctx context.Context, in *group.ClearHisMsgReq, opts ...grpc.CallOption) (*group.ClearHisMsgRsp, error) {
	out := new(group.ClearHisMsgRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/ClearHisMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetFreeJoinStatus(ctx context.Context, in *group.SetFreeJoinStatusReq, opts ...grpc.CallOption) (*group.SetFreeJoinStatusRsp, error) {
	out := new(group.SetFreeJoinStatusRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/SetFreeJoinStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupProperty(ctx context.Context, in *group.SetGroupPropReq, opts ...grpc.CallOption) (*pb_pub.CommRsp, error) {
	out := new(pb_pub.CommRsp)
	err := c.cc.Invoke(ctx, "/pb_grpc_group.Group/SetGroupProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
type GroupServer interface {
	// 创建群聊
	CreateGroup(context.Context, *group.CreateGroupReq) (*group.CreateGroupRsp, error)
	// 邀请入群
	Invite(context.Context, *group.InviteReq) (*group.InviteRsp, error)
	// 应答入群邀请
	InviteAnswer(context.Context, *group.InviteAnswerReq) (*group.InviteAnswerRsp, error)
	// 申请入群
	Apply(context.Context, *group.ApplyReq) (*group.ApplyRsp, error)
	// 应答入群申请
	ApplyAnswer(context.Context, *group.ApplyAnswerReq) (*group.ApplyAnswerRsp, error)
	// 获取全部群
	Groups(context.Context, *group.GroupsReq) (*group.GroupsRsp, error)
	// @experiment 获取全部群ID
	GroupIds(context.Context, *group.GroupIdsReq) (*group.GroupIdsRsp, error)
	// 群详情
	GroupDetail(context.Context, *group.GroupDetailReq) (*group.GroupDetailRsp, error)
	// 获取群成员
	Members(context.Context, *group.MembersReq) (*group.MembersRsp, error)
	// 为@ 提供搜索服务，为群成员列表提供搜索功能
	FindMembers(context.Context, *group.FindMembersReq) (*group.FindMembersRsp, error)
	// 成员详情
	MemberDetail(context.Context, *group.MemberDetailReq) (*group.MemberDetailRsp, error)
	// 获取全部申请,我申请的,我审批的
	Applications(context.Context, *group.ApplicationsReq) (*group.ApplicationsRsp, error)
	// 获取全部邀请,我邀请的,我应答的
	Invitations(context.Context, *group.InvitationsReq) (*group.InvitationsRsp, error)
	// 修改群名
	EditName(context.Context, *group.EditNameReq) (*group.EditNameRsp, error)
	// 修改头像
	EditAvatar(context.Context, *group.EditAvatarReq) (*group.EditAvatarRsp, error)
	// 编辑公告
	EditNotice(context.Context, *group.EditNoticeReq) (*group.EditNoticeRsp, error)
	// 编辑群备注 改自己的
	EditRemark(context.Context, *group.EditRemarkReq) (*group.EditRemarkRsp, error)
	// 编辑群背景图
	EditBGPic(context.Context, *group.EditBGPicReq) (*group.EditBGPicRsp, error)
	// 设置群邀请限制，管理员才能设置
	EditInviteRoleLimit(context.Context, *group.EditInviteRoleLimitReq) (*group.EditInviteRoleLimitRsp, error)
	// 添加管理员
	AddAdmins(context.Context, *group.AddAdminsReq) (*group.AddAdminsRsp, error)
	// 移除管理员
	RemoveAdmins(context.Context, *group.RemoveAdminsReq) (*group.RemoveAdminsRsp, error)
	// 群主转让
	GroupTransfer(context.Context, *group.GroupTransferReq) (*group.GroupTransferRsp, error)
	// 封禁群
	BanGroups(context.Context, *group.BanGroupsReq) (*group.BanGroupsRsp, error)
	// 解禁群
	UnbanGroups(context.Context, *group.UnbanGroupsReq) (*group.UnbanGroupsRsp, error)
	// 解散群
	DisbandGroups(context.Context, *group.DisbandGroupsReq) (*group.DisbandGroupsRsp, error)
	// 退出群
	Quit(context.Context, *group.QuitReq) (*group.QuitRsp, error)
	// 封禁成员
	BanMember(context.Context, *group.BanMemberReq) (*group.BanMemberRsp, error)
	// 解禁成员
	UnbanMember(context.Context, *group.UnbanMemberReq) (*group.UnbanMemberRsp, error)
	// 踢出成员
	Kickout(context.Context, *group.KickoutReq) (*group.KickoutRsp, error)
	// 读取单个消息
	GetOneGroupHistoryMsg(context.Context, *group.OneGroupHistoryMsgReq) (*group.OneGroupHistoryMsgRsp, error)
	// 删除单个消息
	DelGroupHistoryMsg(context.Context, *group.DelGroupHistoryMsgReq) (*group.DelGroupHistoryMsgRsp, error)
	// 已读用户列表
	GetGroupMsgReadList(context.Context, *group.GroupMsgReadListReq) (*group.GroupMsgReadListRsp, error)
	// 撤回消息
	MsgRecall(context.Context, *pb_pub.MsgRecallReq) (*pb_pub.MsgRecallRsp, error)
	// 更改消息
	MsgChange(context.Context, *pb_pub.MsgChangeReq) (*pb_pub.MsgChangeRsp, error)
	// 准备好接收用户相关所有群新消息信息
	ReadyForGroupsNewMsgInfo(context.Context, *group.ReadyForGroupsNewMsgInfoReq) (*group.ReadyForGroupsNewMsgInfoRsp, error)
	// 历史消息读取
	FetchGroupHistoryMsg(context.Context, *group.FetchGroupHistoryMsgReq) (*group.FetchGroupHistoryMsgRsp, error)
	// 历史消息读取
	FetchGroupHistoryMsgFromGroupMsgSn(context.Context, *group.FetchGroupHistoryMsgFromGroupMsgSnReq) (*group.FetchGroupHistoryMsgFromGroupMsgSnRsp, error)
	// 群置顶设置,所有人都可设置，只影响自己的显示
	GroupTopSet(context.Context, *group.GroupTopSetReq) (*group.GroupTopSetRsp, error)
	// 编辑群备注,所有人都可设置，只影响自己的显示
	EditGroupRemark(context.Context, *group.EditGroupRemarkReq) (*group.EditGroupRemarkRsp, error)
	// 编辑群成员备注,所有人都可设置，只影响自己的显示
	EditMemberRemark(context.Context, *group.EditMemberRemarkReq) (*group.EditMemberRemarkRsp, error)
	// 用户是否群成员
	IsGroupMember(context.Context, *group.IsGroupMemberReq) (*group.IsGroupMemberRsp, error)
	// 群用户禁言状态，只有管理员才可发言
	SetMemberChatBannedStatus(context.Context, *group.SetMemberChatBannedStatusReq) (*group.SetMemberChatBannedStatusRsp, error)
	// 设置新成员提醒开关
	SetNewMemberRemind(context.Context, *group.SetNewMemberRemindReq) (*group.SetNewMemberRemindRsp, error)
	// 设置是否允许扫描二维码入群
	SetScanCodeJoinGroupSwitch(context.Context, *group.SetScanCodeJoinGroupSwitchReq) (*group.SetScanCodeJoinGroupSwitchRsp, error)
	// 清理历史消息
	ClearHisMsg(context.Context, *group.ClearHisMsgReq) (*group.ClearHisMsgRsp, error)
	// 设置是否可以自由加入
	SetFreeJoinStatus(context.Context, *group.SetFreeJoinStatusReq) (*group.SetFreeJoinStatusRsp, error)
	// 属性设置统一接口，一个个的写太麻烦了
	SetGroupProperty(context.Context, *group.SetGroupPropReq) (*pb_pub.CommRsp, error)
}

// UnimplementedGroupServer can be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (*UnimplementedGroupServer) CreateGroup(context.Context, *group.CreateGroupReq) (*group.CreateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedGroupServer) Invite(context.Context, *group.InviteReq) (*group.InviteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (*UnimplementedGroupServer) InviteAnswer(context.Context, *group.InviteAnswerReq) (*group.InviteAnswerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAnswer not implemented")
}
func (*UnimplementedGroupServer) Apply(context.Context, *group.ApplyReq) (*group.ApplyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedGroupServer) ApplyAnswer(context.Context, *group.ApplyAnswerReq) (*group.ApplyAnswerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAnswer not implemented")
}
func (*UnimplementedGroupServer) Groups(context.Context, *group.GroupsReq) (*group.GroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Groups not implemented")
}
func (*UnimplementedGroupServer) GroupIds(context.Context, *group.GroupIdsReq) (*group.GroupIdsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupIds not implemented")
}
func (*UnimplementedGroupServer) GroupDetail(context.Context, *group.GroupDetailReq) (*group.GroupDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDetail not implemented")
}
func (*UnimplementedGroupServer) Members(context.Context, *group.MembersReq) (*group.MembersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (*UnimplementedGroupServer) FindMembers(context.Context, *group.FindMembersReq) (*group.FindMembersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMembers not implemented")
}
func (*UnimplementedGroupServer) MemberDetail(context.Context, *group.MemberDetailReq) (*group.MemberDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberDetail not implemented")
}
func (*UnimplementedGroupServer) Applications(context.Context, *group.ApplicationsReq) (*group.ApplicationsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applications not implemented")
}
func (*UnimplementedGroupServer) Invitations(context.Context, *group.InvitationsReq) (*group.InvitationsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invitations not implemented")
}
func (*UnimplementedGroupServer) EditName(context.Context, *group.EditNameReq) (*group.EditNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditName not implemented")
}
func (*UnimplementedGroupServer) EditAvatar(context.Context, *group.EditAvatarReq) (*group.EditAvatarRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAvatar not implemented")
}
func (*UnimplementedGroupServer) EditNotice(context.Context, *group.EditNoticeReq) (*group.EditNoticeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNotice not implemented")
}
func (*UnimplementedGroupServer) EditRemark(context.Context, *group.EditRemarkReq) (*group.EditRemarkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditRemark not implemented")
}
func (*UnimplementedGroupServer) EditBGPic(context.Context, *group.EditBGPicReq) (*group.EditBGPicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBGPic not implemented")
}
func (*UnimplementedGroupServer) EditInviteRoleLimit(context.Context, *group.EditInviteRoleLimitReq) (*group.EditInviteRoleLimitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInviteRoleLimit not implemented")
}
func (*UnimplementedGroupServer) AddAdmins(context.Context, *group.AddAdminsReq) (*group.AddAdminsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmins not implemented")
}
func (*UnimplementedGroupServer) RemoveAdmins(context.Context, *group.RemoveAdminsReq) (*group.RemoveAdminsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmins not implemented")
}
func (*UnimplementedGroupServer) GroupTransfer(context.Context, *group.GroupTransferReq) (*group.GroupTransferRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTransfer not implemented")
}
func (*UnimplementedGroupServer) BanGroups(context.Context, *group.BanGroupsReq) (*group.BanGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanGroups not implemented")
}
func (*UnimplementedGroupServer) UnbanGroups(context.Context, *group.UnbanGroupsReq) (*group.UnbanGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanGroups not implemented")
}
func (*UnimplementedGroupServer) DisbandGroups(context.Context, *group.DisbandGroupsReq) (*group.DisbandGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandGroups not implemented")
}
func (*UnimplementedGroupServer) Quit(context.Context, *group.QuitReq) (*group.QuitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (*UnimplementedGroupServer) BanMember(context.Context, *group.BanMemberReq) (*group.BanMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanMember not implemented")
}
func (*UnimplementedGroupServer) UnbanMember(context.Context, *group.UnbanMemberReq) (*group.UnbanMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanMember not implemented")
}
func (*UnimplementedGroupServer) Kickout(context.Context, *group.KickoutReq) (*group.KickoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kickout not implemented")
}
func (*UnimplementedGroupServer) GetOneGroupHistoryMsg(context.Context, *group.OneGroupHistoryMsgReq) (*group.OneGroupHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneGroupHistoryMsg not implemented")
}
func (*UnimplementedGroupServer) DelGroupHistoryMsg(context.Context, *group.DelGroupHistoryMsgReq) (*group.DelGroupHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGroupHistoryMsg not implemented")
}
func (*UnimplementedGroupServer) GetGroupMsgReadList(context.Context, *group.GroupMsgReadListReq) (*group.GroupMsgReadListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMsgReadList not implemented")
}
func (*UnimplementedGroupServer) MsgRecall(context.Context, *pb_pub.MsgRecallReq) (*pb_pub.MsgRecallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgRecall not implemented")
}
func (*UnimplementedGroupServer) MsgChange(context.Context, *pb_pub.MsgChangeReq) (*pb_pub.MsgChangeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgChange not implemented")
}
func (*UnimplementedGroupServer) ReadyForGroupsNewMsgInfo(context.Context, *group.ReadyForGroupsNewMsgInfoReq) (*group.ReadyForGroupsNewMsgInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyForGroupsNewMsgInfo not implemented")
}
func (*UnimplementedGroupServer) FetchGroupHistoryMsg(context.Context, *group.FetchGroupHistoryMsgReq) (*group.FetchGroupHistoryMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupHistoryMsg not implemented")
}
func (*UnimplementedGroupServer) FetchGroupHistoryMsgFromGroupMsgSn(context.Context, *group.FetchGroupHistoryMsgFromGroupMsgSnReq) (*group.FetchGroupHistoryMsgFromGroupMsgSnRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroupHistoryMsgFromGroupMsgSn not implemented")
}
func (*UnimplementedGroupServer) GroupTopSet(context.Context, *group.GroupTopSetReq) (*group.GroupTopSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTopSet not implemented")
}
func (*UnimplementedGroupServer) EditGroupRemark(context.Context, *group.EditGroupRemarkReq) (*group.EditGroupRemarkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroupRemark not implemented")
}
func (*UnimplementedGroupServer) EditMemberRemark(context.Context, *group.EditMemberRemarkReq) (*group.EditMemberRemarkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMemberRemark not implemented")
}
func (*UnimplementedGroupServer) IsGroupMember(context.Context, *group.IsGroupMemberReq) (*group.IsGroupMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGroupMember not implemented")
}
func (*UnimplementedGroupServer) SetMemberChatBannedStatus(context.Context, *group.SetMemberChatBannedStatusReq) (*group.SetMemberChatBannedStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemberChatBannedStatus not implemented")
}
func (*UnimplementedGroupServer) SetNewMemberRemind(context.Context, *group.SetNewMemberRemindReq) (*group.SetNewMemberRemindRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewMemberRemind not implemented")
}
func (*UnimplementedGroupServer) SetScanCodeJoinGroupSwitch(context.Context, *group.SetScanCodeJoinGroupSwitchReq) (*group.SetScanCodeJoinGroupSwitchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScanCodeJoinGroupSwitch not implemented")
}
func (*UnimplementedGroupServer) ClearHisMsg(context.Context, *group.ClearHisMsgReq) (*group.ClearHisMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHisMsg not implemented")
}
func (*UnimplementedGroupServer) SetFreeJoinStatus(context.Context, *group.SetFreeJoinStatusReq) (*group.SetFreeJoinStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFreeJoinStatus not implemented")
}
func (*UnimplementedGroupServer) SetGroupProperty(context.Context, *group.SetGroupPropReq) (*pb_pub.CommRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupProperty not implemented")
}

func RegisterGroupServer(s *grpc.Server, srv GroupServer) {
	s.RegisterService(&_Group_serviceDesc, srv)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*group.CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.InviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Invite(ctx, req.(*group.InviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.InviteAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/InviteAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteAnswer(ctx, req.(*group.InviteAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.ApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Apply(ctx, req.(*group.ApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ApplyAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.ApplyAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ApplyAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/ApplyAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ApplyAnswer(ctx, req.(*group.ApplyAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Groups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Groups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Groups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Groups(ctx, req.(*group.GroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GroupIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupIds(ctx, req.(*group.GroupIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GroupDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupDetail(ctx, req.(*group.GroupDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.MembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Members(ctx, req.(*group.MembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_FindMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.FindMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).FindMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/FindMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).FindMembers(ctx, req.(*group.FindMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MemberDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.MemberDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MemberDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/MemberDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MemberDetail(ctx, req.(*group.MemberDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.ApplicationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Applications(ctx, req.(*group.ApplicationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Invitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.InvitationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Invitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Invitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Invitations(ctx, req.(*group.InvitationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditName(ctx, req.(*group.EditNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditAvatar(ctx, req.(*group.EditAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditNotice(ctx, req.(*group.EditNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditRemark(ctx, req.(*group.EditRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditBGPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditBGPicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditBGPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditBGPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditBGPic(ctx, req.(*group.EditBGPicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditInviteRoleLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditInviteRoleLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditInviteRoleLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditInviteRoleLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditInviteRoleLimit(ctx, req.(*group.EditInviteRoleLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_AddAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.AddAdminsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).AddAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/AddAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).AddAdmins(ctx, req.(*group.AddAdminsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_RemoveAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.RemoveAdminsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).RemoveAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/RemoveAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).RemoveAdmins(ctx, req.(*group.RemoveAdminsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GroupTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupTransfer(ctx, req.(*group.GroupTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_BanGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.BanGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).BanGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/BanGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).BanGroups(ctx, req.(*group.BanGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UnbanGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.UnbanGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UnbanGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/UnbanGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UnbanGroups(ctx, req.(*group.UnbanGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DisbandGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.DisbandGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DisbandGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/DisbandGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DisbandGroups(ctx, req.(*group.DisbandGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Quit(ctx, req.(*group.QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_BanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.BanMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).BanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/BanMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).BanMember(ctx, req.(*group.BanMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_UnbanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.UnbanMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).UnbanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/UnbanMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).UnbanMember(ctx, req.(*group.UnbanMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_Kickout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.KickoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).Kickout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/Kickout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).Kickout(ctx, req.(*group.KickoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetOneGroupHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.OneGroupHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetOneGroupHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GetOneGroupHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetOneGroupHistoryMsg(ctx, req.(*group.OneGroupHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DelGroupHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.DelGroupHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DelGroupHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/DelGroupHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DelGroupHistoryMsg(ctx, req.(*group.DelGroupHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMsgReadList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupMsgReadListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMsgReadList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GetGroupMsgReadList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMsgReadList(ctx, req.(*group.GroupMsgReadListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MsgRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.MsgRecallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MsgRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/MsgRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MsgRecall(ctx, req.(*pb_pub.MsgRecallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_MsgChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb_pub.MsgChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).MsgChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/MsgChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).MsgChange(ctx, req.(*pb_pub.MsgChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ReadyForGroupsNewMsgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.ReadyForGroupsNewMsgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ReadyForGroupsNewMsgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/ReadyForGroupsNewMsgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ReadyForGroupsNewMsgInfo(ctx, req.(*group.ReadyForGroupsNewMsgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_FetchGroupHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.FetchGroupHistoryMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).FetchGroupHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/FetchGroupHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).FetchGroupHistoryMsg(ctx, req.(*group.FetchGroupHistoryMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_FetchGroupHistoryMsgFromGroupMsgSn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.FetchGroupHistoryMsgFromGroupMsgSnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).FetchGroupHistoryMsgFromGroupMsgSn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/FetchGroupHistoryMsgFromGroupMsgSn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).FetchGroupHistoryMsgFromGroupMsgSn(ctx, req.(*group.FetchGroupHistoryMsgFromGroupMsgSnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GroupTopSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupTopSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GroupTopSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/GroupTopSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GroupTopSet(ctx, req.(*group.GroupTopSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditGroupRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditGroupRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditGroupRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditGroupRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditGroupRemark(ctx, req.(*group.EditGroupRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_EditMemberRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.EditMemberRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).EditMemberRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/EditMemberRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).EditMemberRemark(ctx, req.(*group.EditMemberRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_IsGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.IsGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).IsGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/IsGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).IsGroupMember(ctx, req.(*group.IsGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetMemberChatBannedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.SetMemberChatBannedStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetMemberChatBannedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/SetMemberChatBannedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetMemberChatBannedStatus(ctx, req.(*group.SetMemberChatBannedStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetNewMemberRemind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.SetNewMemberRemindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetNewMemberRemind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/SetNewMemberRemind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetNewMemberRemind(ctx, req.(*group.SetNewMemberRemindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetScanCodeJoinGroupSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.SetScanCodeJoinGroupSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetScanCodeJoinGroupSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/SetScanCodeJoinGroupSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetScanCodeJoinGroupSwitch(ctx, req.(*group.SetScanCodeJoinGroupSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ClearHisMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.ClearHisMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ClearHisMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/ClearHisMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ClearHisMsg(ctx, req.(*group.ClearHisMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetFreeJoinStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.SetFreeJoinStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetFreeJoinStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/SetFreeJoinStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetFreeJoinStatus(ctx, req.(*group.SetFreeJoinStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.SetGroupPropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_grpc_group.Group/SetGroupProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupProperty(ctx, req.(*group.SetGroupPropReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Group_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb_grpc_group.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Group_Invite_Handler,
		},
		{
			MethodName: "InviteAnswer",
			Handler:    _Group_InviteAnswer_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Group_Apply_Handler,
		},
		{
			MethodName: "ApplyAnswer",
			Handler:    _Group_ApplyAnswer_Handler,
		},
		{
			MethodName: "Groups",
			Handler:    _Group_Groups_Handler,
		},
		{
			MethodName: "GroupIds",
			Handler:    _Group_GroupIds_Handler,
		},
		{
			MethodName: "GroupDetail",
			Handler:    _Group_GroupDetail_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Group_Members_Handler,
		},
		{
			MethodName: "FindMembers",
			Handler:    _Group_FindMembers_Handler,
		},
		{
			MethodName: "MemberDetail",
			Handler:    _Group_MemberDetail_Handler,
		},
		{
			MethodName: "Applications",
			Handler:    _Group_Applications_Handler,
		},
		{
			MethodName: "Invitations",
			Handler:    _Group_Invitations_Handler,
		},
		{
			MethodName: "EditName",
			Handler:    _Group_EditName_Handler,
		},
		{
			MethodName: "EditAvatar",
			Handler:    _Group_EditAvatar_Handler,
		},
		{
			MethodName: "EditNotice",
			Handler:    _Group_EditNotice_Handler,
		},
		{
			MethodName: "EditRemark",
			Handler:    _Group_EditRemark_Handler,
		},
		{
			MethodName: "EditBGPic",
			Handler:    _Group_EditBGPic_Handler,
		},
		{
			MethodName: "EditInviteRoleLimit",
			Handler:    _Group_EditInviteRoleLimit_Handler,
		},
		{
			MethodName: "AddAdmins",
			Handler:    _Group_AddAdmins_Handler,
		},
		{
			MethodName: "RemoveAdmins",
			Handler:    _Group_RemoveAdmins_Handler,
		},
		{
			MethodName: "GroupTransfer",
			Handler:    _Group_GroupTransfer_Handler,
		},
		{
			MethodName: "BanGroups",
			Handler:    _Group_BanGroups_Handler,
		},
		{
			MethodName: "UnbanGroups",
			Handler:    _Group_UnbanGroups_Handler,
		},
		{
			MethodName: "DisbandGroups",
			Handler:    _Group_DisbandGroups_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Group_Quit_Handler,
		},
		{
			MethodName: "BanMember",
			Handler:    _Group_BanMember_Handler,
		},
		{
			MethodName: "UnbanMember",
			Handler:    _Group_UnbanMember_Handler,
		},
		{
			MethodName: "Kickout",
			Handler:    _Group_Kickout_Handler,
		},
		{
			MethodName: "GetOneGroupHistoryMsg",
			Handler:    _Group_GetOneGroupHistoryMsg_Handler,
		},
		{
			MethodName: "DelGroupHistoryMsg",
			Handler:    _Group_DelGroupHistoryMsg_Handler,
		},
		{
			MethodName: "GetGroupMsgReadList",
			Handler:    _Group_GetGroupMsgReadList_Handler,
		},
		{
			MethodName: "MsgRecall",
			Handler:    _Group_MsgRecall_Handler,
		},
		{
			MethodName: "MsgChange",
			Handler:    _Group_MsgChange_Handler,
		},
		{
			MethodName: "ReadyForGroupsNewMsgInfo",
			Handler:    _Group_ReadyForGroupsNewMsgInfo_Handler,
		},
		{
			MethodName: "FetchGroupHistoryMsg",
			Handler:    _Group_FetchGroupHistoryMsg_Handler,
		},
		{
			MethodName: "FetchGroupHistoryMsgFromGroupMsgSn",
			Handler:    _Group_FetchGroupHistoryMsgFromGroupMsgSn_Handler,
		},
		{
			MethodName: "GroupTopSet",
			Handler:    _Group_GroupTopSet_Handler,
		},
		{
			MethodName: "EditGroupRemark",
			Handler:    _Group_EditGroupRemark_Handler,
		},
		{
			MethodName: "EditMemberRemark",
			Handler:    _Group_EditMemberRemark_Handler,
		},
		{
			MethodName: "IsGroupMember",
			Handler:    _Group_IsGroupMember_Handler,
		},
		{
			MethodName: "SetMemberChatBannedStatus",
			Handler:    _Group_SetMemberChatBannedStatus_Handler,
		},
		{
			MethodName: "SetNewMemberRemind",
			Handler:    _Group_SetNewMemberRemind_Handler,
		},
		{
			MethodName: "SetScanCodeJoinGroupSwitch",
			Handler:    _Group_SetScanCodeJoinGroupSwitch_Handler,
		},
		{
			MethodName: "ClearHisMsg",
			Handler:    _Group_ClearHisMsg_Handler,
		},
		{
			MethodName: "SetFreeJoinStatus",
			Handler:    _Group_SetFreeJoinStatus_Handler,
		},
		{
			MethodName: "SetGroupProperty",
			Handler:    _Group_SetGroupProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_grpc/group/group.proto",
}
