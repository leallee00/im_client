// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_msg/gate/gate.proto

package gate

import (
	pb_pub "github.com/leallee00/pb/pb_pub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LOGIN_TOCKEN_TYPE int32

const (
	LOGIN_TOCKEN_TYPE_LOGIN_TOCKEN_TYPE_JAVA     LOGIN_TOCKEN_TYPE = 0 // java下发的token
	LOGIN_TOCKEN_TYPE_LOGIN_TOCKEN_TYPE_IM       LOGIN_TOCKEN_TYPE = 1 // im下发的token 重新登录用
	LOGIN_TOCKEN_TYPE_LOGIN_TOCKEN_TYPE_UNI_USER LOGIN_TOCKEN_TYPE = 2 //一致性认证
)

// Enum value maps for LOGIN_TOCKEN_TYPE.
var (
	LOGIN_TOCKEN_TYPE_name = map[int32]string{
		0: "LOGIN_TOCKEN_TYPE_JAVA",
		1: "LOGIN_TOCKEN_TYPE_IM",
		2: "LOGIN_TOCKEN_TYPE_UNI_USER",
	}
	LOGIN_TOCKEN_TYPE_value = map[string]int32{
		"LOGIN_TOCKEN_TYPE_JAVA":     0,
		"LOGIN_TOCKEN_TYPE_IM":       1,
		"LOGIN_TOCKEN_TYPE_UNI_USER": 2,
	}
)

func (x LOGIN_TOCKEN_TYPE) Enum() *LOGIN_TOCKEN_TYPE {
	p := new(LOGIN_TOCKEN_TYPE)
	*p = x
	return p
}

func (x LOGIN_TOCKEN_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LOGIN_TOCKEN_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_gate_gate_proto_enumTypes[0].Descriptor()
}

func (LOGIN_TOCKEN_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_gate_gate_proto_enumTypes[0]
}

func (x LOGIN_TOCKEN_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LOGIN_TOCKEN_TYPE.Descriptor instead.
func (LOGIN_TOCKEN_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{0}
}

type BUSINESS_TYPE int32

const (
	BUSINESS_TYPE_UNKNOWN     BUSINESS_TYPE = 0
	BUSINESS_TYPE_SECRET_ROOM BUSINESS_TYPE = 1
)

// Enum value maps for BUSINESS_TYPE.
var (
	BUSINESS_TYPE_name = map[int32]string{
		0: "UNKNOWN",
		1: "SECRET_ROOM",
	}
	BUSINESS_TYPE_value = map[string]int32{
		"UNKNOWN":     0,
		"SECRET_ROOM": 1,
	}
)

func (x BUSINESS_TYPE) Enum() *BUSINESS_TYPE {
	p := new(BUSINESS_TYPE)
	*p = x
	return p
}

func (x BUSINESS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BUSINESS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_gate_gate_proto_enumTypes[1].Descriptor()
}

func (BUSINESS_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_gate_gate_proto_enumTypes[1]
}

func (x BUSINESS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BUSINESS_TYPE.Descriptor instead.
func (BUSINESS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{1}
}

// 客户端登录请求
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pb_pub.CHead msg_head = 1;
	Token       string            `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TokenType   LOGIN_TOCKEN_TYPE `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3,enum=pb_msg_gate.LOGIN_TOCKEN_TYPE" json:"token_type,omitempty"`
	GateAddrNew string            `protobuf:"bytes,4,opt,name=gate_addr_new,json=gateAddrNew,proto3" json:"gate_addr_new,omitempty"` // 新的gateaddr
	ClientInfo  *ClientInfo       `protobuf:"bytes,6,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`                        // 客户端信息
	Version     int32             `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`                             // 客户端当前支持的IM版本 版本号枚举见 pb_pub/version.proto
	DeviceToken string            `protobuf:"bytes,8,opt,name=deviceToken,proto3" json:"deviceToken,omitempty"`                      // 设备Id,im通过loginRsp下发的, 客户端登录时携带
	ForceLogin  bool              `protobuf:"varint,9,opt,name=forceLogin,proto3" json:"forceLogin,omitempty"`                       // 是否强制登录(账号密码登录时填true, 静默登录时填false)
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReq) GetTokenType() LOGIN_TOCKEN_TYPE {
	if x != nil {
		return x.TokenType
	}
	return LOGIN_TOCKEN_TYPE_LOGIN_TOCKEN_TYPE_JAVA
}

func (x *LoginReq) GetGateAddrNew() string {
	if x != nil {
		return x.GateAddrNew
	}
	return ""
}

func (x *LoginReq) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *LoginReq) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LoginReq) GetDeviceToken() string {
	if x != nil {
		return x.DeviceToken
	}
	return ""
}

func (x *LoginReq) GetForceLogin() bool {
	if x != nil {
		return x.ForceLogin
	}
	return false
}

// 第三方app登录
type ThirdLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 多app登录，如果这两项设置了则使用统一登录认证
	AppId        string            `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`                                                              // IM为app下发的app唯一标识
	AppSecret    string            `protobuf:"bytes,2,opt,name=AppSecret,proto3" json:"AppSecret,omitempty"`                                                      // IM下发的app标识对应的秘钥
	AppUserId    int64             `protobuf:"varint,3,opt,name=AppUserId,proto3" json:"AppUserId,omitempty"`                                                     // app对应的用户id，登录成功的话 AppId+AppUserId 兑换 IMUserId
	Token        string            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                                                              // 认证使用的token
	TokenType    LOGIN_TOCKEN_TYPE `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3,enum=pb_msg_gate.LOGIN_TOCKEN_TYPE" json:"token_type,omitempty"` // token 类型
	GateAddrNew  string            `protobuf:"bytes,6,opt,name=gate_addr_new,json=gateAddrNew,proto3" json:"gate_addr_new,omitempty"`                             // 新的gateaddr 客户端忽略
	IMSdkVersion int32             `protobuf:"varint,7,opt,name=IMSdkVersion,proto3" json:"IMSdkVersion,omitempty"`                                               // 客户端sdk版本，根据版本判断新功能是否支持，一般使用日期可是即可 如: 20200116
	ClientInfo   *ClientInfo       `protobuf:"bytes,8,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`                                                    // 客户端信息
}

func (x *ThirdLoginReq) Reset() {
	*x = ThirdLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdLoginReq) ProtoMessage() {}

func (x *ThirdLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdLoginReq.ProtoReflect.Descriptor instead.
func (*ThirdLoginReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{1}
}

func (x *ThirdLoginReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ThirdLoginReq) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *ThirdLoginReq) GetAppUserId() int64 {
	if x != nil {
		return x.AppUserId
	}
	return 0
}

func (x *ThirdLoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ThirdLoginReq) GetTokenType() LOGIN_TOCKEN_TYPE {
	if x != nil {
		return x.TokenType
	}
	return LOGIN_TOCKEN_TYPE_LOGIN_TOCKEN_TYPE_JAVA
}

func (x *ThirdLoginReq) GetGateAddrNew() string {
	if x != nil {
		return x.GateAddrNew
	}
	return ""
}

func (x *ThirdLoginReq) GetIMSdkVersion() int32 {
	if x != nil {
		return x.IMSdkVersion
	}
	return 0
}

func (x *ThirdLoginReq) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType         pb_pub.MODEL_TYPE `protobuf:"varint,1,opt,name=modelType,proto3,enum=pb_pub.MODEL_TYPE" json:"modelType,omitempty"` // 推送厂商类型
	PackageName       string            `protobuf:"bytes,2,opt,name=packageName,proto3" json:"packageName,omitempty"`                     // 包名
	SystemVersion     string            `protobuf:"bytes,3,opt,name=systemVersion,proto3" json:"systemVersion,omitempty"`                 // 手机操作系统版本号    12.2
	PhoneModels       string            `protobuf:"bytes,4,opt,name=phoneModels,proto3" json:"phoneModels,omitempty"`                     // 手机型号             iPhone 7
	AppVersion        string            `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`                       // 来往app应用版本号           2.2.5/debug2.5.6(build256)
	SystemName        string            `protobuf:"bytes,6,opt,name=systemName,proto3" json:"systemName,omitempty"`                       // android/iOS
	Identifier        string            `protobuf:"bytes,7,opt,name=identifier,proto3" json:"identifier,omitempty"`                       // 手机设备号
	XChannel          string            `protobuf:"bytes,8,opt,name=xChannel,proto3" json:"xChannel,omitempty"`                           // 渠道号               default_1....
	PushPlatformAppId string            `protobuf:"bytes,9,opt,name=pushPlatformAppId,proto3" json:"pushPlatformAppId,omitempty"`         // 应用id，厂商开发者平台获取，每个包唯一
	Odid              string            `protobuf:"bytes,10,opt,name=odid,proto3" json:"odid,omitempty"`                                  // 开放设备标识符，开发者级别的非永久性设备标志符，同一设备上同一开发者的多个应用ODID取值相同，可用作设备唯一标识符
	Aaid              string            `protobuf:"bytes,11,opt,name=aaid,proto3" json:"aaid,omitempty"`                                  // 应用的匿名设备标识，标识运行在移动智能终端设备上的应用实例，同一开发者相同设备不同应用不同，用作实例唯一标识
	Token             string            `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`                                // 推送token，每个实例都不同, 有些平台叫  Registration ID
	Expired           int64             `protobuf:"varint,13,opt,name=expired,proto3" json:"expired,omitempty"`                           // token失效时间，token失效必须重新获取，一般卸载重装或系统清理数据时失效
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{2}
}

func (x *ClientInfo) GetModelType() pb_pub.MODEL_TYPE {
	if x != nil {
		return x.ModelType
	}
	return pb_pub.MODEL_TYPE(0)
}

func (x *ClientInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ClientInfo) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *ClientInfo) GetPhoneModels() string {
	if x != nil {
		return x.PhoneModels
	}
	return ""
}

func (x *ClientInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ClientInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *ClientInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ClientInfo) GetXChannel() string {
	if x != nil {
		return x.XChannel
	}
	return ""
}

func (x *ClientInfo) GetPushPlatformAppId() string {
	if x != nil {
		return x.PushPlatformAppId
	}
	return ""
}

func (x *ClientInfo) GetOdid() string {
	if x != nil {
		return x.Odid
	}
	return ""
}

func (x *ClientInfo) GetAaid() string {
	if x != nil {
		return x.Aaid
	}
	return ""
}

func (x *ClientInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClientInfo) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

// 登录结果返回
type LoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pb_pub.CHead msg_head = 1;
	Result          int32       `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 错误号 //pb_pub.ErrCode result = 2; // 0 成功，其他为错误号
	ReconnectToken  string      `protobuf:"bytes,3,opt,name=reconnectToken,proto3" json:"reconnectToken,omitempty"`
	GateAddrOld     string      `protobuf:"bytes,4,opt,name=gate_addr_old,json=gateAddrOld,proto3" json:"gate_addr_old,omitempty"` // 旧的addr
	MsgSn           int64       `protobuf:"varint,5,opt,name=msg_sn,json=msgSn,proto3" json:"msg_sn,omitempty"`
	AppUserIdOld    int64       `protobuf:"varint,6,opt,name=app_user_id_old,json=appUserIdOld,proto3" json:"app_user_id_old,omitempty"` // 原app_user_id
	AppId           int64       `protobuf:"varint,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppUserId       string      `protobuf:"bytes,8,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"` // app_user_id改为string类型
	DeviceToken     string      `protobuf:"bytes,9,opt,name=deviceToken,proto3" json:"deviceToken,omitempty"`                // im分配的设备id, 如果loginReq.deviceToken = 0, im生成一个并返回, 否则 loginRsp.deviceToken = loginReq.deviceToken
	OtherClientInfo *ClientInfo `protobuf:"bytes,10,opt,name=otherClientInfo,proto3" json:"otherClientInfo,omitempty"`       // 登录异常为(21,22时有效)
	Reason          string      `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`                         //原因
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRsp) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *LoginRsp) GetReconnectToken() string {
	if x != nil {
		return x.ReconnectToken
	}
	return ""
}

func (x *LoginRsp) GetGateAddrOld() string {
	if x != nil {
		return x.GateAddrOld
	}
	return ""
}

func (x *LoginRsp) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *LoginRsp) GetAppUserIdOld() int64 {
	if x != nil {
		return x.AppUserIdOld
	}
	return 0
}

func (x *LoginRsp) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *LoginRsp) GetAppUserId() string {
	if x != nil {
		return x.AppUserId
	}
	return ""
}

func (x *LoginRsp) GetDeviceToken() string {
	if x != nil {
		return x.DeviceToken
	}
	return ""
}

func (x *LoginRsp) GetOtherClientInfo() *ClientInfo {
	if x != nil {
		return x.OtherClientInfo
	}
	return nil
}

func (x *LoginRsp) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 发送单聊文字
type ChatText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pb_pub.CHead msg_head = 1;
	AimUserId        int64               `protobuf:"varint,2,opt,name=aim_user_id,json=aimUserId,proto3" json:"aim_user_id,omitempty"`                                                         // 对方id
	ChatType         pb_pub.TextChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,proto3,enum=pb_pub.TextChatType" json:"chat_type,omitempty"`                                     // 聊天类型
	Data             string              `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                                                       // 携带数据，如：图片地址，视频地址，礼物地址，id等
	Text             string              `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                                                                       // 聊天文字
	Exp              map[string]string   `protobuf:"bytes,6,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	AimUserAppId     int64               `protobuf:"varint,7,opt,name=aimUserAppId,proto3" json:"aimUserAppId,omitempty"`
	AimUserAppUserId string              `protobuf:"bytes,8,opt,name=aimUserAppUserId,proto3" json:"aimUserAppUserId,omitempty"`
}

func (x *ChatText) Reset() {
	*x = ChatText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatText) ProtoMessage() {}

func (x *ChatText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatText.ProtoReflect.Descriptor instead.
func (*ChatText) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{4}
}

func (x *ChatText) GetAimUserId() int64 {
	if x != nil {
		return x.AimUserId
	}
	return 0
}

func (x *ChatText) GetChatType() pb_pub.TextChatType {
	if x != nil {
		return x.ChatType
	}
	return pb_pub.TextChatType(0)
}

func (x *ChatText) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ChatText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatText) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ChatText) GetAimUserAppId() int64 {
	if x != nil {
		return x.AimUserAppId
	}
	return 0
}

func (x *ChatText) GetAimUserAppUserId() string {
	if x != nil {
		return x.AimUserAppUserId
	}
	return ""
}

// 新的私信类型,更通用
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessType BUSINESS_TYPE `protobuf:"varint,1,opt,name=businessType,proto3,enum=pb_msg_gate.BUSINESS_TYPE" json:"businessType,omitempty"` // 业务类型
	Text         *ChatText     `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMessage) GetBusinessType() BUSINESS_TYPE {
	if x != nil {
		return x.BusinessType
	}
	return BUSINESS_TYPE_UNKNOWN
}

func (x *ChatMessage) GetText() *ChatText {
	if x != nil {
		return x.Text
	}
	return nil
}

type KickOffUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptUId          int64       `protobuf:"varint,1,opt,name=optUId,proto3" json:"optUId,omitempty"`                   // 操作者id，可能是客服，把客服号记录下来
	AimUId          int64       `protobuf:"varint,2,opt,name=aimUId,proto3" json:"aimUId,omitempty"`                   // 踢出的目标用户
	Reason          int32       `protobuf:"varint,3,opt,name=reason,proto3" json:"reason,omitempty"`                   // 踢出原因
	Desc            string      `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`                        // 原因描述
	OtherClientInfo *ClientInfo `protobuf:"bytes,10,opt,name=otherClientInfo,proto3" json:"otherClientInfo,omitempty"` //
}

func (x *KickOffUser) Reset() {
	*x = KickOffUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickOffUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickOffUser) ProtoMessage() {}

func (x *KickOffUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickOffUser.ProtoReflect.Descriptor instead.
func (*KickOffUser) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{6}
}

func (x *KickOffUser) GetOptUId() int64 {
	if x != nil {
		return x.OptUId
	}
	return 0
}

func (x *KickOffUser) GetAimUId() int64 {
	if x != nil {
		return x.AimUId
	}
	return 0
}

func (x *KickOffUser) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *KickOffUser) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *KickOffUser) GetOtherClientInfo() *ClientInfo {
	if x != nil {
		return x.OtherClientInfo
	}
	return nil
}

// 通知gate该用户不在群中，gate从群中剔除该用户的转发
// 只能从服务端发送，客户端来的不处理
type RemoveUserFromGateRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GroupId int64 `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *RemoveUserFromGateRoomReq) Reset() {
	*x = RemoveUserFromGateRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_gate_gate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserFromGateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserFromGateRoomReq) ProtoMessage() {}

func (x *RemoveUserFromGateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_gate_gate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserFromGateRoomReq.ProtoReflect.Descriptor instead.
func (*RemoveUserFromGateRoomReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_gate_gate_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveUserFromGateRoomReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemoveUserFromGateRoomReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

var File_pb_msg_gate_gate_proto protoreflect.FileDescriptor

var file_pb_msg_gate_gate_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x54, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4e, 0x65, 0x77,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x4d, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x49, 0x4d, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x03,
	0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x61, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4f, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x53, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbf, 0x02,
	0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x69,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x69, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61,
	0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x78, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x66, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x55, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x55, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x69, 0x6d, 0x55, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x69, 0x6d, 0x55, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x69, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x5f, 0x54, 0x4f, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x43, 0x4b,
	0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10,
	0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_msg_gate_gate_proto_rawDescOnce sync.Once
	file_pb_msg_gate_gate_proto_rawDescData = file_pb_msg_gate_gate_proto_rawDesc
)

func file_pb_msg_gate_gate_proto_rawDescGZIP() []byte {
	file_pb_msg_gate_gate_proto_rawDescOnce.Do(func() {
		file_pb_msg_gate_gate_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_msg_gate_gate_proto_rawDescData)
	})
	return file_pb_msg_gate_gate_proto_rawDescData
}

var file_pb_msg_gate_gate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_msg_gate_gate_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pb_msg_gate_gate_proto_goTypes = []interface{}{
	(LOGIN_TOCKEN_TYPE)(0),            // 0: pb_msg_gate.LOGIN_TOCKEN_TYPE
	(BUSINESS_TYPE)(0),                // 1: pb_msg_gate.BUSINESS_TYPE
	(*LoginReq)(nil),                  // 2: pb_msg_gate.LoginReq
	(*ThirdLoginReq)(nil),             // 3: pb_msg_gate.ThirdLoginReq
	(*ClientInfo)(nil),                // 4: pb_msg_gate.ClientInfo
	(*LoginRsp)(nil),                  // 5: pb_msg_gate.LoginRsp
	(*ChatText)(nil),                  // 6: pb_msg_gate.ChatText
	(*ChatMessage)(nil),               // 7: pb_msg_gate.ChatMessage
	(*KickOffUser)(nil),               // 8: pb_msg_gate.KickOffUser
	(*RemoveUserFromGateRoomReq)(nil), // 9: pb_msg_gate.RemoveUserFromGateRoomReq
	nil,                               // 10: pb_msg_gate.ChatText.ExpEntry
	(pb_pub.MODEL_TYPE)(0),            // 11: pb_pub.MODEL_TYPE
	(pb_pub.TextChatType)(0),          // 12: pb_pub.TextChatType
}
var file_pb_msg_gate_gate_proto_depIdxs = []int32{
	0,  // 0: pb_msg_gate.LoginReq.token_type:type_name -> pb_msg_gate.LOGIN_TOCKEN_TYPE
	4,  // 1: pb_msg_gate.LoginReq.clientInfo:type_name -> pb_msg_gate.ClientInfo
	0,  // 2: pb_msg_gate.ThirdLoginReq.token_type:type_name -> pb_msg_gate.LOGIN_TOCKEN_TYPE
	4,  // 3: pb_msg_gate.ThirdLoginReq.clientInfo:type_name -> pb_msg_gate.ClientInfo
	11, // 4: pb_msg_gate.ClientInfo.modelType:type_name -> pb_pub.MODEL_TYPE
	4,  // 5: pb_msg_gate.LoginRsp.otherClientInfo:type_name -> pb_msg_gate.ClientInfo
	12, // 6: pb_msg_gate.ChatText.chat_type:type_name -> pb_pub.TextChatType
	10, // 7: pb_msg_gate.ChatText.exp:type_name -> pb_msg_gate.ChatText.ExpEntry
	1,  // 8: pb_msg_gate.ChatMessage.businessType:type_name -> pb_msg_gate.BUSINESS_TYPE
	6,  // 9: pb_msg_gate.ChatMessage.text:type_name -> pb_msg_gate.ChatText
	4,  // 10: pb_msg_gate.KickOffUser.otherClientInfo:type_name -> pb_msg_gate.ClientInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pb_msg_gate_gate_proto_init() }
func file_pb_msg_gate_gate_proto_init() {
	if File_pb_msg_gate_gate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_msg_gate_gate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickOffUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_gate_gate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserFromGateRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_msg_gate_gate_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_msg_gate_gate_proto_goTypes,
		DependencyIndexes: file_pb_msg_gate_gate_proto_depIdxs,
		EnumInfos:         file_pb_msg_gate_gate_proto_enumTypes,
		MessageInfos:      file_pb_msg_gate_gate_proto_msgTypes,
	}.Build()
	File_pb_msg_gate_gate_proto = out.File
	file_pb_msg_gate_gate_proto_rawDesc = nil
	file_pb_msg_gate_gate_proto_goTypes = nil
	file_pb_msg_gate_gate_proto_depIdxs = nil
}
