syntax = "proto3";
option go_package = "github.com/leallee00/pb/pb_msg/live_room";
package pb_msg_live_room;

import "pb_msg/live_room/live_room.proto";
import "pb_pub/error_code.proto";
// 结构定义
/* 邀请列表已转由客户端维护
enum INVITATION_STATE {
    APPLIED = 0;
    CANCELED = 1;
    AGREED = 2;
    REFUSED = 3;
    EXPIRED = 4;
}

message Invitation {
    int64 userId = 1;
    int64 interval = 2; // 计费间隔
    int64 price = 3; // 间隔单价
    int64 deadline = 4; // 过期时间
    INVITATION_STATE state = 5; // 当前状态
}
*/

// 聊天室用户
message Chatter {
    UserProp userProp = 1;
    int32 videoState = 4; // 视频状态
    int32 audioState = 5; // 音频状态
    int64 leaveState = 6; // 暂离状态
}

// 聊天室结构
message ChatRoomInfo {
    Chatter caller = 1; // 邀请方
    Chatter callee = 2; // 被邀请方
    int64 interval = 3; // 计费间隔
    int64 price = 4; // 单位间隔话费
    int64 deadline = 5; // 结束时间点
    bool autoRenewal = 6; // 自动续费状态
    bool oneMore = 7; // 再聊一场状态
    string channelId = 8; // 频道号
}


// 消息定义 ////////////////////////////////////////////////////

// 设置连麦付费规则,持久化到redis, 转发到全房间
message UpdateChatPrice {
    int64 interval = 1;
    int64 price = 2; 
}

// 用户申请
message ChatApplyReq {
    int64 calleeId = 1; // 必填
    int64 callerId = 2;
    string callerName = 3;
    string callerHeaderImage = 4;
    int64 inviteTime = 5;
}
message ChatApplyRsp {
    pb_pub.ErrCode errCode = 1;
    string errDesc = 2;
    int64 callerId = 3;
    int64 calleeId = 4; // 必填
}

// 用户取消
message ChatCancelReq {
    int64 calleeId = 1; // 被邀请方id
}
message ChatCancelRsp {
    pb_pub.ErrCode errCode = 1;
    string errDesc = 2;
    int64 callerId = 3;
    int64 calleeId = 4; // 必填
}

// 主播应答
message ChatAnswerReq {
    int64 callerId = 1; // 邀请方id
    CHAT_ANSWER answer = 2; // 同意还是拒绝
}
enum CHAT_ANSWER {
    REFUSE = 0;
    AGREE = 1;
}
message ChatAnswerRsp {
    pb_pub.ErrCode errCode = 1;
    string errDesc = 2;
    int64 callerId = 3;
    int64 calleeId = 4; // 必填
}


// 用户关房
message ChatCloseReq {
    int64 callerId = 1;
    int64 calleeId = 2;
}
message ChatCloseRsp {}

// 不要了,使用setLeaveState代替
// 主播或用户暂离后又回来
// message ChatEnterReq {
//     int64 callerId = 1;
//     int64 calleeId = 2;
// }
// message ChatEnterRsp {
//     ChatRoomInfo roomInfo = 1;
// }

// 用户关闭麦克风: 1. 同步到对方
message SetMicrophoneState {
    int64 callerId = 1;
    int64 calleeId = 2;
    int32 state = 3; // 0 开 1 关
}

// 设置暂离状态: 1. 同步给对方
message SetLeaveState {
    int64 callerId = 1;
    int64 calleeId = 2;
    int32 state = 3; // 0:在线 1:暂离
}

// 用户是否同意继续畅聊
message SetOneMore {
    int64 callerId = 1;
    int64 calleeId = 2;
    bool state = 3; // 0: 到期结束 1:再来一场
}

// 用户开启或关闭自动续费
message SetAutoRenewal {
    int64 callerId = 1;
    int64 calleeId = 2;
    bool state = 3; // true:已开启 false:未开启
}

// IM产生的消息 ////////////////////////////////////////////////////

// 小黑屋挂件状态,当前有几个小黑屋在畅聊,用户进房就推
message ChatCountChangeNotify {
    int32 count = 1;
}

// 获取小黑屋列表 1. 用户调起时去IM拉, 2. 在用户调起的情况下收到ChatCountChangeNotify后客户端再拉
message FetchChatRoomsReq {}
message FetchChatRoomsRsp {
    repeated ChatRoomSummery rooms = 1;
}
message ChatRoomSummery {
    int64 callerId = 1;
    int64 calleeId = 2;
    string callerUsername = 3;
    string calleeUsername = 4;
    string callerHeadimage = 5;
    string calleeheadimage = 6;
}

// 被邀方同意,小黑屋建立
// 客户端收到此消息要给im发自动续费设置消息SetAutoRenewal
message ChatStartNotify {
    ChatRoomInfo info = 1;
}

// 发送到房间内所有人,用以触发小黑屋创建动画
message ChatCreateNotify {
    ChatRoomSummery room = 1;
}

// 房间自动续费或再聊一场 IM推送此消息更新房间到期时间
message DeadlineChangeNotify {
    int64 deadline = 1;
}

// 小黑屋关闭
message ChatCloseNotify {
    int64 callerId = 1;
    int64 calleeId = 2;
    CHAT_CLOSE_TYPE closeType = 3;
}
enum CHAT_CLOSE_TYPE {
    TIMEOUT = 0; // 因为时间到结束
    MANUAL = 1;  // 邀请房主动关闭
    BY_HOST = 2; // 由于派对房关闭导致的小黑屋关闭
}

// 扣费成功,更新用户余额
message BalanceChangeNotify {
    int64 coinBalance = 1;
}

// 派对房主持位没人,30秒后房间关闭
message HostCloseSoonNotify {}

// 小黑屋礼物消息
message SecretGift {
    int64 senderId = 1;
    int64 receiverId = 2;
    LiveGift gift = 3;
}

/*
其他相关
    1. 邀请成功公屏消息，使用系统消息
*/
