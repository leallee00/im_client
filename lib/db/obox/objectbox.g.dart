// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../db/obox/model/conversation_model.dart';
import '../../db/obox/model/group_model.dart';
import '../../db/obox/model/group_msg_model.dart';
import '../../db/obox/model/private_msg_model.dart';
import '../../db/obox/model/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2644016744761677130),
      name: 'ConversationModel',
      lastPropertyId: const obx_int.IdUid(19, 7024178048851163765),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3186887931902879872),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 464506414335905605),
            name: 'lastMsgState',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4254913614690855771),
            name: 'msgSn',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 894450733669715726),
            name: 'groupId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2992895854386620655),
            name: 'groupMsgSn',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7417438008530487397),
            name: 'pbName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2227899548231880159),
            name: 'pbData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 444074780648395750),
            name: 'pbCommData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5728432200745646306),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3663284626053663703),
            name: 'updatedAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7831462642967632106),
            name: 'newMsgCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4628908384878715410),
            name: 'sessionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 750161903097678248),
            name: 'srcId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3239393812413946727),
            name: 'userId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7024178048851163765),
            name: 'top',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6985379824611990168),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(14, 1913464924183239998),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7761333964377348942),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3895261183863361582),
            name: 'appId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7257959668631191343),
            name: 'appUid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6812799171745311079),
            name: 'nickName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5837403397424403513),
            name: 'avatar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3946226168876984672),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5593552018773510090),
            name: 'signName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5557832791989812824),
            name: 'sourceVersion',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5481042207621055922),
            name: 'appUserId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7394832211723758745),
            name: 'role',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4736731212344259418),
            name: 'gender',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4232244197810250934),
            name: 'banned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1913464924183239998),
            name: 'sign',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2630896730349722055),
      name: 'GroupModel',
      lastPropertyId: const obx_int.IdUid(23, 6188113686647627609),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5279167629014491761),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2339165285626043197),
            name: 'ownerId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 561123973928834459),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8220841831581071037),
            name: 'top',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1935602098587349586),
            name: 'inviteRoleLimit',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8258395343134785435),
            name: 'memberCountLimit',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8330841447693010663),
            name: 'notice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4371241921704658770),
            name: 'avatar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3902287821997926568),
            name: 'disbanded',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7532589375875232573),
            name: 'remark',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7213882897636420209),
            name: 'memberChatBannedStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1752013993317365052),
            name: 'newMemberRemindClosed',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5619177206831151937),
            name: 'scanCodeJoinGroupSwitchStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7669488215757093412),
            name: 'scanCodeJoinGroupParam',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6249888050394308025),
            name: 'banned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 569066934154129069),
            name: 'memberCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5152476120197891184),
            name: 'noticeVersion',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8788442068483902090),
            name: 'freeJoin',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 1512359777983357286),
            name: 'groupType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 8232551338813902788),
            name: 'backPic',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5958628714639887299),
            name: 'freeJoinStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 2720988400549224032),
            name: 'forbiddenAddFriends',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6188113686647627609),
            name: 'noDisturb',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8543185602428974020),
      name: 'PrivateMsgModel',
      lastPropertyId: const obx_int.IdUid(11, 7922658146098183659),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 73627898881425519),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8238531657732370236),
            name: 'userId',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(3, 7264112656437498046)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2967582693194550335),
            name: 'pbData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8686420074459739649),
            name: 'pbCommData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5114872858425355232),
            name: 'msgState',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 783532494647758430),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1138293800794134806),
            name: 'updatedAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2865937722322006352),
            name: 'msgSn',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(2, 360375205270064065)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3857453620345335765),
            name: 'pbName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1737478543207266203),
            name: 'recallUid',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7922658146098183659),
            name: 'srcId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8528186532186973279),
      name: 'GroupMsgModel',
      lastPropertyId: const obx_int.IdUid(13, 80215469905011931),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3512430516184943877),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4339176280384078698),
            name: 'groupId',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(4, 6423443115482747096)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8502637317838454518),
            name: 'userId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8454406879431447342),
            name: 'pbData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 222467531209603994),
            name: 'pbCommData',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7326896761166605883),
            name: 'msgState',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6800425878737886668),
            name: 'createdAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4674736260834111041),
            name: 'updatedAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4872411187477092399),
            name: 'msgSn',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8819050080387037148),
            name: 'groupMsgSn',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3928116355260531759),
            name: 'pbName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4263371246979100412),
            name: 'recallUid',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 80215469905011931),
            name: 'srcId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 8528186532186973279),
      lastIndexId: const obx_int.IdUid(4, 6423443115482747096),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2415870110730081565],
      retiredIndexUids: const [2342696760867410422],
      retiredPropertyUids: const [
        7804465090109120135,
        1730289077766302880,
        815513132141896722,
        5696908434907912014,
        3463337453984363506,
        7569681043270222476,
        2710325214763456025,
        5464231486763207664,
        4966880287562781000,
        6934238353207842431,
        7727535342583579806,
        408795556469242754,
        4952909420340049911,
        6354096686649866996,
        7863116134622552382
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ConversationModel: obx_int.EntityDefinition<ConversationModel>(
        model: _entities[0],
        toOneRelations: (ConversationModel object) => [],
        toManyRelations: (ConversationModel object) => {},
        getId: (ConversationModel object) => object.id,
        setId: (ConversationModel object, int id) {
          object.id = id;
        },
        objectToFB: (ConversationModel object, fb.Builder fbb) {
          final pbNameOffset = fbb.writeString(object.pbName);
          final pbDataOffset = fbb.writeListInt8(object.pbData);
          final pbCommDataOffset = fbb.writeListInt8(object.pbCommData);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.lastMsgState);
          fbb.addInt64(3, object.msgSn);
          fbb.addInt64(4, object.groupId);
          fbb.addInt64(5, object.groupMsgSn);
          fbb.addOffset(6, pbNameOffset);
          fbb.addOffset(7, pbDataOffset);
          fbb.addOffset(8, pbCommDataOffset);
          fbb.addInt64(9, object.createdAt);
          fbb.addInt64(10, object.updatedAt);
          fbb.addInt64(11, object.newMsgCount);
          fbb.addInt64(14, object.sessionType);
          fbb.addInt64(15, object.srcId);
          fbb.addInt64(17, object.userId);
          fbb.addInt64(18, object.top);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ConversationModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..lastMsgState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..msgSn =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..groupId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..groupMsgSn =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..pbName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..pbData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 18, Uint8List(0)) as Uint8List
            ..pbCommData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 20, Uint8List(0)) as Uint8List
            ..createdAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..updatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..newMsgCount =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26)
            ..sessionType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0)
            ..srcId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0)
            ..top = const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);

          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[1],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final appUidOffset = fbb.writeString(object.appUid);
          final nickNameOffset = fbb.writeString(object.nickName);
          final avatarOffset = fbb.writeString(object.avatar);
          final signNameOffset = fbb.writeString(object.signName);
          final appUserIdOffset = fbb.writeString(object.appUserId);
          final signOffset = fbb.writeString(object.sign);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.appId);
          fbb.addOffset(2, appUidOffset);
          fbb.addOffset(3, nickNameOffset);
          fbb.addOffset(4, avatarOffset);
          fbb.addInt64(5, object.level);
          fbb.addOffset(6, signNameOffset);
          fbb.addInt64(8, object.sourceVersion);
          fbb.addOffset(9, appUserIdOffset);
          fbb.addInt64(10, object.role);
          fbb.addInt64(11, object.gender);
          fbb.addBool(12, object.banned);
          fbb.addOffset(13, signOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..appUid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..nickName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..avatar = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..level =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..signName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..sourceVersion =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..appUserId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..role = const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..gender =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..banned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false)
            ..sign = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '');

          return object;
        }),
    GroupModel: obx_int.EntityDefinition<GroupModel>(
        model: _entities[2],
        toOneRelations: (GroupModel object) => [],
        toManyRelations: (GroupModel object) => {},
        getId: (GroupModel object) => object.id,
        setId: (GroupModel object, int id) {
          object.id = id;
        },
        objectToFB: (GroupModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final noticeOffset =
              object.notice == null ? null : fbb.writeString(object.notice!);
          final avatarOffset =
              object.avatar == null ? null : fbb.writeString(object.avatar!);
          final remarkOffset =
              object.remark == null ? null : fbb.writeString(object.remark!);
          final scanCodeJoinGroupParamOffset =
              object.scanCodeJoinGroupParam == null
                  ? null
                  : fbb.writeString(object.scanCodeJoinGroupParam!);
          final backPicOffset =
              object.backPic == null ? null : fbb.writeString(object.backPic!);
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.ownerId);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.top);
          fbb.addInt64(4, object.inviteRoleLimit);
          fbb.addInt64(5, object.memberCountLimit);
          fbb.addOffset(6, noticeOffset);
          fbb.addOffset(7, avatarOffset);
          fbb.addBool(8, object.disbanded);
          fbb.addOffset(9, remarkOffset);
          fbb.addInt64(10, object.memberChatBannedStatus);
          fbb.addInt64(11, object.newMemberRemindClosed);
          fbb.addInt64(12, object.scanCodeJoinGroupSwitchStatus);
          fbb.addOffset(13, scanCodeJoinGroupParamOffset);
          fbb.addBool(14, object.banned);
          fbb.addInt64(15, object.memberCount);
          fbb.addInt64(16, object.noticeVersion);
          fbb.addBool(17, object.freeJoin);
          fbb.addInt64(18, object.groupType);
          fbb.addOffset(19, backPicOffset);
          fbb.addInt64(20, object.freeJoinStatus);
          fbb.addInt64(21, object.forbiddenAddFriends);
          fbb.addInt64(22, object.noDisturb);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final ownerIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final inviteRoleLimitParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final memberCountLimitParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final memberChatBannedStatusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final newMemberRemindClosedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final scanCodeJoinGroupSwitchStatusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final memberCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          final noticeVersionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final groupTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final freeJoinStatusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          final forbiddenAddFriendsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          final noDisturbParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final object = GroupModel(
              id: idParam,
              ownerId: ownerIdParam,
              inviteRoleLimit: inviteRoleLimitParam,
              memberCountLimit: memberCountLimitParam,
              memberChatBannedStatus: memberChatBannedStatusParam,
              newMemberRemindClosed: newMemberRemindClosedParam,
              scanCodeJoinGroupSwitchStatus: scanCodeJoinGroupSwitchStatusParam,
              memberCount: memberCountParam,
              noticeVersion: noticeVersionParam,
              groupType: groupTypeParam,
              freeJoinStatus: freeJoinStatusParam,
              forbiddenAddFriends: forbiddenAddFriendsParam,
              noDisturb: noDisturbParam)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..top =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10)
            ..notice = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..avatar = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..disbanded =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..remark = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..scanCodeJoinGroupParam =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 30)
            ..banned =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32)
            ..freeJoin =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38)
            ..backPic = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 42);

          return object;
        }),
    PrivateMsgModel: obx_int.EntityDefinition<PrivateMsgModel>(
        model: _entities[3],
        toOneRelations: (PrivateMsgModel object) => [],
        toManyRelations: (PrivateMsgModel object) => {},
        getId: (PrivateMsgModel object) => object.id,
        setId: (PrivateMsgModel object, int id) {
          object.id = id;
        },
        objectToFB: (PrivateMsgModel object, fb.Builder fbb) {
          final pbDataOffset = fbb.writeListInt8(object.pbData);
          final pbCommDataOffset = fbb.writeListInt8(object.pbCommData);
          final pbNameOffset = fbb.writeString(object.pbName);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, pbDataOffset);
          fbb.addOffset(3, pbCommDataOffset);
          fbb.addInt64(4, object.msgState);
          fbb.addInt64(5, object.createdAt);
          fbb.addInt64(6, object.updatedAt);
          fbb.addInt64(7, object.msgSn);
          fbb.addOffset(8, pbNameOffset);
          fbb.addInt64(9, object.recallUid);
          fbb.addInt64(10, object.srcId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = PrivateMsgModel(id: idParam)
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..pbData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 8, Uint8List(0)) as Uint8List
            ..pbCommData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 10, Uint8List(0)) as Uint8List
            ..msgState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..createdAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..updatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..msgSn =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..pbName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..recallUid =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22)
            ..srcId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);

          return object;
        }),
    GroupMsgModel: obx_int.EntityDefinition<GroupMsgModel>(
        model: _entities[4],
        toOneRelations: (GroupMsgModel object) => [],
        toManyRelations: (GroupMsgModel object) => {},
        getId: (GroupMsgModel object) => object.id,
        setId: (GroupMsgModel object, int id) {
          object.id = id;
        },
        objectToFB: (GroupMsgModel object, fb.Builder fbb) {
          final pbDataOffset = fbb.writeListInt8(object.pbData);
          final pbCommDataOffset = fbb.writeListInt8(object.pbCommData);
          final pbNameOffset = fbb.writeString(object.pbName);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.groupId);
          fbb.addInt64(2, object.userId);
          fbb.addOffset(3, pbDataOffset);
          fbb.addOffset(4, pbCommDataOffset);
          fbb.addInt64(5, object.msgState);
          fbb.addInt64(6, object.createdAt);
          fbb.addInt64(7, object.updatedAt);
          fbb.addInt64(8, object.msgSn);
          fbb.addInt64(9, object.groupMsgSn);
          fbb.addOffset(10, pbNameOffset);
          fbb.addInt64(11, object.recallUid);
          fbb.addInt64(12, object.srcId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = GroupMsgModel(id: idParam)
            ..groupId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..pbData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 10, Uint8List(0)) as Uint8List
            ..pbCommData = const fb.Uint8ListReader(lazy: false)
                .vTableGet(buffer, rootOffset, 12, Uint8List(0)) as Uint8List
            ..msgState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..createdAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..updatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..msgSn =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..groupMsgSn =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..pbName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..recallUid =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26)
            ..srcId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ConversationModel] entity fields to define ObjectBox queries.
class ConversationModel_ {
  /// See [ConversationModel.id].
  static final id =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[0]);

  /// See [ConversationModel.lastMsgState].
  static final lastMsgState =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[1]);

  /// See [ConversationModel.msgSn].
  static final msgSn =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[2]);

  /// See [ConversationModel.groupId].
  static final groupId =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[3]);

  /// See [ConversationModel.groupMsgSn].
  static final groupMsgSn =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[4]);

  /// See [ConversationModel.pbName].
  static final pbName =
      obx.QueryStringProperty<ConversationModel>(_entities[0].properties[5]);

  /// See [ConversationModel.pbData].
  static final pbData = obx.QueryByteVectorProperty<ConversationModel>(
      _entities[0].properties[6]);

  /// See [ConversationModel.pbCommData].
  static final pbCommData = obx.QueryByteVectorProperty<ConversationModel>(
      _entities[0].properties[7]);

  /// See [ConversationModel.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[8]);

  /// See [ConversationModel.updatedAt].
  static final updatedAt =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[9]);

  /// See [ConversationModel.newMsgCount].
  static final newMsgCount =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[10]);

  /// See [ConversationModel.sessionType].
  static final sessionType =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[11]);

  /// See [ConversationModel.srcId].
  static final srcId =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[12]);

  /// See [ConversationModel.userId].
  static final userId =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[13]);

  /// See [ConversationModel.top].
  static final top =
      obx.QueryIntegerProperty<ConversationModel>(_entities[0].properties[14]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[0]);

  /// See [UserModel.appId].
  static final appId =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[1]);

  /// See [UserModel.appUid].
  static final appUid =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[2]);

  /// See [UserModel.nickName].
  static final nickName =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[3]);

  /// See [UserModel.avatar].
  static final avatar =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[4]);

  /// See [UserModel.level].
  static final level =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[5]);

  /// See [UserModel.signName].
  static final signName =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[6]);

  /// See [UserModel.sourceVersion].
  static final sourceVersion =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[7]);

  /// See [UserModel.appUserId].
  static final appUserId =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[8]);

  /// See [UserModel.role].
  static final role =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[9]);

  /// See [UserModel.gender].
  static final gender =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[10]);

  /// See [UserModel.banned].
  static final banned =
      obx.QueryBooleanProperty<UserModel>(_entities[1].properties[11]);

  /// See [UserModel.sign].
  static final sign =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[12]);
}

/// [GroupModel] entity fields to define ObjectBox queries.
class GroupModel_ {
  /// See [GroupModel.id].
  static final id =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[0]);

  /// See [GroupModel.ownerId].
  static final ownerId =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[1]);

  /// See [GroupModel.name].
  static final name =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[2]);

  /// See [GroupModel.top].
  static final top =
      obx.QueryBooleanProperty<GroupModel>(_entities[2].properties[3]);

  /// See [GroupModel.inviteRoleLimit].
  static final inviteRoleLimit =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[4]);

  /// See [GroupModel.memberCountLimit].
  static final memberCountLimit =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[5]);

  /// See [GroupModel.notice].
  static final notice =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[6]);

  /// See [GroupModel.avatar].
  static final avatar =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[7]);

  /// See [GroupModel.disbanded].
  static final disbanded =
      obx.QueryBooleanProperty<GroupModel>(_entities[2].properties[8]);

  /// See [GroupModel.remark].
  static final remark =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[9]);

  /// See [GroupModel.memberChatBannedStatus].
  static final memberChatBannedStatus =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[10]);

  /// See [GroupModel.newMemberRemindClosed].
  static final newMemberRemindClosed =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[11]);

  /// See [GroupModel.scanCodeJoinGroupSwitchStatus].
  static final scanCodeJoinGroupSwitchStatus =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[12]);

  /// See [GroupModel.scanCodeJoinGroupParam].
  static final scanCodeJoinGroupParam =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[13]);

  /// See [GroupModel.banned].
  static final banned =
      obx.QueryBooleanProperty<GroupModel>(_entities[2].properties[14]);

  /// See [GroupModel.memberCount].
  static final memberCount =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[15]);

  /// See [GroupModel.noticeVersion].
  static final noticeVersion =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[16]);

  /// See [GroupModel.freeJoin].
  static final freeJoin =
      obx.QueryBooleanProperty<GroupModel>(_entities[2].properties[17]);

  /// See [GroupModel.groupType].
  static final groupType =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[18]);

  /// See [GroupModel.backPic].
  static final backPic =
      obx.QueryStringProperty<GroupModel>(_entities[2].properties[19]);

  /// See [GroupModel.freeJoinStatus].
  static final freeJoinStatus =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[20]);

  /// See [GroupModel.forbiddenAddFriends].
  static final forbiddenAddFriends =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[21]);

  /// See [GroupModel.noDisturb].
  static final noDisturb =
      obx.QueryIntegerProperty<GroupModel>(_entities[2].properties[22]);
}

/// [PrivateMsgModel] entity fields to define ObjectBox queries.
class PrivateMsgModel_ {
  /// See [PrivateMsgModel.id].
  static final id =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[0]);

  /// See [PrivateMsgModel.userId].
  static final userId =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[1]);

  /// See [PrivateMsgModel.pbData].
  static final pbData =
      obx.QueryByteVectorProperty<PrivateMsgModel>(_entities[3].properties[2]);

  /// See [PrivateMsgModel.pbCommData].
  static final pbCommData =
      obx.QueryByteVectorProperty<PrivateMsgModel>(_entities[3].properties[3]);

  /// See [PrivateMsgModel.msgState].
  static final msgState =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[4]);

  /// See [PrivateMsgModel.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[5]);

  /// See [PrivateMsgModel.updatedAt].
  static final updatedAt =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[6]);

  /// See [PrivateMsgModel.msgSn].
  static final msgSn =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[7]);

  /// See [PrivateMsgModel.pbName].
  static final pbName =
      obx.QueryStringProperty<PrivateMsgModel>(_entities[3].properties[8]);

  /// See [PrivateMsgModel.recallUid].
  static final recallUid =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[9]);

  /// See [PrivateMsgModel.srcId].
  static final srcId =
      obx.QueryIntegerProperty<PrivateMsgModel>(_entities[3].properties[10]);
}

/// [GroupMsgModel] entity fields to define ObjectBox queries.
class GroupMsgModel_ {
  /// See [GroupMsgModel.id].
  static final id =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[0]);

  /// See [GroupMsgModel.groupId].
  static final groupId =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[1]);

  /// See [GroupMsgModel.userId].
  static final userId =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[2]);

  /// See [GroupMsgModel.pbData].
  static final pbData =
      obx.QueryByteVectorProperty<GroupMsgModel>(_entities[4].properties[3]);

  /// See [GroupMsgModel.pbCommData].
  static final pbCommData =
      obx.QueryByteVectorProperty<GroupMsgModel>(_entities[4].properties[4]);

  /// See [GroupMsgModel.msgState].
  static final msgState =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[5]);

  /// See [GroupMsgModel.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[6]);

  /// See [GroupMsgModel.updatedAt].
  static final updatedAt =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[7]);

  /// See [GroupMsgModel.msgSn].
  static final msgSn =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[8]);

  /// See [GroupMsgModel.groupMsgSn].
  static final groupMsgSn =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[9]);

  /// See [GroupMsgModel.pbName].
  static final pbName =
      obx.QueryStringProperty<GroupMsgModel>(_entities[4].properties[10]);

  /// See [GroupMsgModel.recallUid].
  static final recallUid =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[11]);

  /// See [GroupMsgModel.srcId].
  static final srcId =
      obx.QueryIntegerProperty<GroupMsgModel>(_entities[4].properties[12]);
}
