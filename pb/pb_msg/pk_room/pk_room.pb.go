// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_msg/pk_room/pk_room.proto

package pk_room

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ANSWER int32

const (
	ANSWER_REFUSE ANSWER = 0 // 拒绝连麦
	ANSWER_AGREE  ANSWER = 1 // 同意连麦
)

// Enum value maps for ANSWER.
var (
	ANSWER_name = map[int32]string{
		0: "REFUSE",
		1: "AGREE",
	}
	ANSWER_value = map[string]int32{
		"REFUSE": 0,
		"AGREE":  1,
	}
)

func (x ANSWER) Enum() *ANSWER {
	p := new(ANSWER)
	*p = x
	return p
}

func (x ANSWER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ANSWER) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_pk_room_pk_room_proto_enumTypes[0].Descriptor()
}

func (ANSWER) Type() protoreflect.EnumType {
	return &file_pb_msg_pk_room_pk_room_proto_enumTypes[0]
}

func (x ANSWER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ANSWER.Descriptor instead.
func (ANSWER) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{0}
}

type PK_TYPE int32

const (
	PK_TYPE_RANDOM       PK_TYPE = 0
	PK_TYPE_RANK         PK_TYPE = 1
	PK_TYPE_INVITE       PK_TYPE = 2
	PK_TYPE_GRAND_RANK   PK_TYPE = 3
	PK_TYPE_SUMMIT_FINAL PK_TYPE = 4 // 巅峰决赛PK类型
)

// Enum value maps for PK_TYPE.
var (
	PK_TYPE_name = map[int32]string{
		0: "RANDOM",
		1: "RANK",
		2: "INVITE",
		3: "GRAND_RANK",
		4: "SUMMIT_FINAL",
	}
	PK_TYPE_value = map[string]int32{
		"RANDOM":       0,
		"RANK":         1,
		"INVITE":       2,
		"GRAND_RANK":   3,
		"SUMMIT_FINAL": 4,
	}
)

func (x PK_TYPE) Enum() *PK_TYPE {
	p := new(PK_TYPE)
	*p = x
	return p
}

func (x PK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_pk_room_pk_room_proto_enumTypes[1].Descriptor()
}

func (PK_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_pk_room_pk_room_proto_enumTypes[1]
}

func (x PK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PK_TYPE.Descriptor instead.
func (PK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{1}
}

// PKGameOverNotify 中 END_TYPE
type END_TYPE int32

const (
	END_TYPE_NATURAL END_TYPE = 0 // 自然结束
	END_TYPE_MANUAL  END_TYPE = 1 // 手动结束
)

// Enum value maps for END_TYPE.
var (
	END_TYPE_name = map[int32]string{
		0: "NATURAL",
		1: "MANUAL",
	}
	END_TYPE_value = map[string]int32{
		"NATURAL": 0,
		"MANUAL":  1,
	}
)

func (x END_TYPE) Enum() *END_TYPE {
	p := new(END_TYPE)
	*p = x
	return p
}

func (x END_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (END_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_pk_room_pk_room_proto_enumTypes[2].Descriptor()
}

func (END_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_pk_room_pk_room_proto_enumTypes[2]
}

func (x END_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use END_TYPE.Descriptor instead.
func (END_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{2}
}

type PK_STATUS int32

const (
	PK_STATUS_IDLING     PK_STATUS = 0 // 空闲中
	PK_STATUS_QUEUING    PK_STATUS = 1 // 排队中
	PK_STATUS_RINGING    PK_STATUS = 2 // 响铃中
	PK_STATUS_WAITING    PK_STATUS = 3 // 等待对方表态中
	PK_STATUS_COMPETING  PK_STATUS = 4 // 比赛中
	PK_STATUS_PENALIZING PK_STATUS = 5 // 惩罚中
)

// Enum value maps for PK_STATUS.
var (
	PK_STATUS_name = map[int32]string{
		0: "IDLING",
		1: "QUEUING",
		2: "RINGING",
		3: "WAITING",
		4: "COMPETING",
		5: "PENALIZING",
	}
	PK_STATUS_value = map[string]int32{
		"IDLING":     0,
		"QUEUING":    1,
		"RINGING":    2,
		"WAITING":    3,
		"COMPETING":  4,
		"PENALIZING": 5,
	}
)

func (x PK_STATUS) Enum() *PK_STATUS {
	p := new(PK_STATUS)
	*p = x
	return p
}

func (x PK_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PK_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_pk_room_pk_room_proto_enumTypes[3].Descriptor()
}

func (PK_STATUS) Type() protoreflect.EnumType {
	return &file_pb_msg_pk_room_pk_room_proto_enumTypes[3]
}

func (x PK_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PK_STATUS.Descriptor instead.
func (PK_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{3}
}

// 主播申请加入随机PK请求
type PKEnqueueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkType PK_TYPE `protobuf:"varint,1,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"` // 0 随机PK 1 段位PK 2 邀请PK(此处禁用)
	Rank   int64   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                                 // 段位积分
}

func (x *PKEnqueueReq) Reset() {
	*x = PKEnqueueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKEnqueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKEnqueueReq) ProtoMessage() {}

func (x *PKEnqueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKEnqueueReq.ProtoReflect.Descriptor instead.
func (*PKEnqueueReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{0}
}

func (x *PKEnqueueReq) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

func (x *PKEnqueueReq) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type PKEnqueueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKEnqueueRsp) Reset() {
	*x = PKEnqueueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKEnqueueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKEnqueueRsp) ProtoMessage() {}

func (x *PKEnqueueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKEnqueueRsp.ProtoReflect.Descriptor instead.
func (*PKEnqueueRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{1}
}

// 从PK队列中移除
type PKDequeueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkType PK_TYPE `protobuf:"varint,1,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"` // 0 随机PK 1 段位PK 2 邀请PK(此处禁用)
}

func (x *PKDequeueReq) Reset() {
	*x = PKDequeueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDequeueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDequeueReq) ProtoMessage() {}

func (x *PKDequeueReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDequeueReq.ProtoReflect.Descriptor instead.
func (*PKDequeueReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{2}
}

func (x *PKDequeueReq) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

type PKDequeueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKDequeueRsp) Reset() {
	*x = PKDequeueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDequeueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDequeueRsp) ProtoMessage() {}

func (x *PKDequeueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDequeueRsp.ProtoReflect.Descriptor instead.
func (*PKDequeueRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{3}
}

// 主播响应是否接受随机创建的PK
type PKAnswerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer ANSWER `protobuf:"varint,1,opt,name=answer,proto3,enum=pb_msg_pk_room.ANSWER" json:"answer,omitempty"`
}

func (x *PKAnswerReq) Reset() {
	*x = PKAnswerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKAnswerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKAnswerReq) ProtoMessage() {}

func (x *PKAnswerReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKAnswerReq.ProtoReflect.Descriptor instead.
func (*PKAnswerReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{4}
}

func (x *PKAnswerReq) GetAnswer() ANSWER {
	if x != nil {
		return x.Answer
	}
	return ANSWER_REFUSE
}

type PKAnswerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKAnswerRsp) Reset() {
	*x = PKAnswerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKAnswerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKAnswerRsp) ProtoMessage() {}

func (x *PKAnswerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKAnswerRsp.ProtoReflect.Descriptor instead.
func (*PKAnswerRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{5}
}

// 主动结束PK,逃兵
type PKEscapeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKEscapeReq) Reset() {
	*x = PKEscapeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKEscapeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKEscapeReq) ProtoMessage() {}

func (x *PKEscapeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKEscapeReq.ProtoReflect.Descriptor instead.
func (*PKEscapeReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{6}
}

type PKEscapeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKEscapeRsp) Reset() {
	*x = PKEscapeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKEscapeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKEscapeRsp) ProtoMessage() {}

func (x *PKEscapeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKEscapeRsp.ProtoReflect.Descriptor instead.
func (*PKEscapeRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{7}
}

// 主播A邀请主播B进行PK
type PKInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkTopic string `protobuf:"bytes,1,opt,name=pkTopic,proto3" json:"pkTopic,omitempty"`
}

func (x *PKInviteReq) Reset() {
	*x = PKInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKInviteReq) ProtoMessage() {}

func (x *PKInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKInviteReq.ProtoReflect.Descriptor instead.
func (*PKInviteReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{8}
}

func (x *PKInviteReq) GetPkTopic() string {
	if x != nil {
		return x.PkTopic
	}
	return ""
}

type PKInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKInviteRsp) Reset() {
	*x = PKInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKInviteRsp) ProtoMessage() {}

func (x *PKInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKInviteRsp.ProtoReflect.Descriptor instead.
func (*PKInviteRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{9}
}

// 邀请方取消PK邀请
type PKInviteStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKInviteStopReq) Reset() {
	*x = PKInviteStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKInviteStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKInviteStopReq) ProtoMessage() {}

func (x *PKInviteStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKInviteStopReq.ProtoReflect.Descriptor instead.
func (*PKInviteStopReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{10}
}

type PKInviteStopRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKInviteStopRsp) Reset() {
	*x = PKInviteStopRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKInviteStopRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKInviteStopRsp) ProtoMessage() {}

func (x *PKInviteStopRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKInviteStopRsp.ProtoReflect.Descriptor instead.
func (*PKInviteStopRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{11}
}

type PKRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkStatus PK_STATUS `protobuf:"varint,1,opt,name=pkStatus,proto3,enum=pb_msg_pk_room.PK_STATUS" json:"pkStatus,omitempty"` // pk状态
	EndTime  int64     `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`                                 // 比赛截止时间
	PkType   PK_TYPE   `protobuf:"varint,3,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"`       // PK类型
	PkTopic  string    `protobuf:"bytes,4,opt,name=pkTopic,proto3" json:"pkTopic,omitempty"`                                  // pk主题
	PkScore  int64     `protobuf:"varint,5,opt,name=pkScore,proto3" json:"pkScore,omitempty"`                                 // 我方PK值
	Peer     *PKUser   `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`                                        // 对方信息
	EndType  END_TYPE  `protobuf:"varint,7,opt,name=endType,proto3,enum=pb_msg_pk_room.END_TYPE" json:"endType,omitempty"`
	WinnerId int64     `protobuf:"varint,8,opt,name=winnerId,proto3" json:"winnerId,omitempty"`
	Mvp      *MVP      `protobuf:"bytes,9,opt,name=mvp,proto3" json:"mvp,omitempty"`
}

func (x *PKRoomInfo) Reset() {
	*x = PKRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKRoomInfo) ProtoMessage() {}

func (x *PKRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKRoomInfo.ProtoReflect.Descriptor instead.
func (*PKRoomInfo) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{12}
}

func (x *PKRoomInfo) GetPkStatus() PK_STATUS {
	if x != nil {
		return x.PkStatus
	}
	return PK_STATUS_IDLING
}

func (x *PKRoomInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PKRoomInfo) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

func (x *PKRoomInfo) GetPkTopic() string {
	if x != nil {
		return x.PkTopic
	}
	return ""
}

func (x *PKRoomInfo) GetPkScore() int64 {
	if x != nil {
		return x.PkScore
	}
	return 0
}

func (x *PKRoomInfo) GetPeer() *PKUser {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *PKRoomInfo) GetEndType() END_TYPE {
	if x != nil {
		return x.EndType
	}
	return END_TYPE_NATURAL
}

func (x *PKRoomInfo) GetWinnerId() int64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *PKRoomInfo) GetMvp() *MVP {
	if x != nil {
		return x.Mvp
	}
	return nil
}

// PKUser, 强烈建议大佬们看下在下面涉及peer的消息中复用此结构可好
type PKUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 对方ID
	Username            string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                       // 对方用户名
	HeaderImageOriginal string `protobuf:"bytes,3,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"` // 对方头像
	Rank                int64  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                              // 对方段位
	VictoryTimes        int64  `protobuf:"varint,5,opt,name=victoryTimes,proto3" json:"victoryTimes,omitempty"`              // 对方连胜次数
	PullStreamAddress   string `protobuf:"bytes,6,opt,name=pullStreamAddress,proto3" json:"pullStreamAddress,omitempty"`     // 对方拉流地址
	PkScore             int64  `protobuf:"varint,7,opt,name=pkScore,proto3" json:"pkScore,omitempty"`                        // 对方PK值
}

func (x *PKUser) Reset() {
	*x = PKUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKUser) ProtoMessage() {}

func (x *PKUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKUser.ProtoReflect.Descriptor instead.
func (*PKUser) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{13}
}

func (x *PKUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PKUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PKUser) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *PKUser) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PKUser) GetVictoryTimes() int64 {
	if x != nil {
		return x.VictoryTimes
	}
	return 0
}

func (x *PKUser) GetPullStreamAddress() string {
	if x != nil {
		return x.PullStreamAddress
	}
	return ""
}

func (x *PKUser) GetPkScore() int64 {
	if x != nil {
		return x.PkScore
	}
	return 0
}

// 房间PK状态更新通知
type PKStatusChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32    roomStatus   = 1; // 房间状态更新
	PkStatus PK_STATUS `protobuf:"varint,1,opt,name=pkStatus,proto3,enum=pb_msg_pk_room.PK_STATUS" json:"pkStatus,omitempty"` // pk状态
}

func (x *PKStatusChangeNotify) Reset() {
	*x = PKStatusChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKStatusChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKStatusChangeNotify) ProtoMessage() {}

func (x *PKStatusChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKStatusChangeNotify.ProtoReflect.Descriptor instead.
func (*PKStatusChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{14}
}

func (x *PKStatusChangeNotify) GetPkStatus() PK_STATUS {
	if x != nil {
		return x.PkStatus
	}
	return PK_STATUS_IDLING
}

// 匹配成功通知消息
type PKMatchedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime                 int64   `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`                                // 等待截止时间
	PkType                  PK_TYPE `protobuf:"varint,2,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"`      // PK类型
	PkTopic                 string  `protobuf:"bytes,3,opt,name=pkTopic,proto3" json:"pkTopic,omitempty"`                                 // pk主题
	PeerId                  int64   `protobuf:"varint,4,opt,name=peerId,proto3" json:"peerId,omitempty"`                                  // 对方ID
	PeerUsername            string  `protobuf:"bytes,5,opt,name=peerUsername,proto3" json:"peerUsername,omitempty"`                       // 对方用户名
	PeerHeaderImageOriginal string  `protobuf:"bytes,6,opt,name=peerHeaderImageOriginal,proto3" json:"peerHeaderImageOriginal,omitempty"` // 对方头像
	PeerRank                int64   `protobuf:"varint,7,opt,name=peerRank,proto3" json:"peerRank,omitempty"`                              // 对方段位
	PeerVictoryTimes        int64   `protobuf:"varint,8,opt,name=peerVictoryTimes,proto3" json:"peerVictoryTimes,omitempty"`              // 对方连胜次数
	PeerPullStreamAddress   string  `protobuf:"bytes,9,opt,name=peerPullStreamAddress,proto3" json:"peerPullStreamAddress,omitempty"`     // 对方拉流地址
}

func (x *PKMatchedNotify) Reset() {
	*x = PKMatchedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKMatchedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKMatchedNotify) ProtoMessage() {}

func (x *PKMatchedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKMatchedNotify.ProtoReflect.Descriptor instead.
func (*PKMatchedNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{15}
}

func (x *PKMatchedNotify) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PKMatchedNotify) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

func (x *PKMatchedNotify) GetPkTopic() string {
	if x != nil {
		return x.PkTopic
	}
	return ""
}

func (x *PKMatchedNotify) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *PKMatchedNotify) GetPeerUsername() string {
	if x != nil {
		return x.PeerUsername
	}
	return ""
}

func (x *PKMatchedNotify) GetPeerHeaderImageOriginal() string {
	if x != nil {
		return x.PeerHeaderImageOriginal
	}
	return ""
}

func (x *PKMatchedNotify) GetPeerRank() int64 {
	if x != nil {
		return x.PeerRank
	}
	return 0
}

func (x *PKMatchedNotify) GetPeerVictoryTimes() int64 {
	if x != nil {
		return x.PeerVictoryTimes
	}
	return 0
}

func (x *PKMatchedNotify) GetPeerPullStreamAddress() string {
	if x != nil {
		return x.PeerPullStreamAddress
	}
	return ""
}

// 对方已拒绝
type PKPeerRefusedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PKPeerRefusedNotify) Reset() {
	*x = PKPeerRefusedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKPeerRefusedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKPeerRefusedNotify) ProtoMessage() {}

func (x *PKPeerRefusedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKPeerRefusedNotify.ProtoReflect.Descriptor instead.
func (*PKPeerRefusedNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{16}
}

// PK开始
type PKStartNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime                 int64   `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`                                // 比赛截止时间
	PkType                  PK_TYPE `protobuf:"varint,2,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"`      // PK类型
	PkTopic                 string  `protobuf:"bytes,3,opt,name=pkTopic,proto3" json:"pkTopic,omitempty"`                                 // pk主题
	PeerId                  int64   `protobuf:"varint,4,opt,name=peerId,proto3" json:"peerId,omitempty"`                                  // 对方ID
	PeerUsername            string  `protobuf:"bytes,5,opt,name=peerUsername,proto3" json:"peerUsername,omitempty"`                       // 对方用户名
	PeerHeaderImageOriginal string  `protobuf:"bytes,6,opt,name=peerHeaderImageOriginal,proto3" json:"peerHeaderImageOriginal,omitempty"` // 对方头像
	PeerRank                int64   `protobuf:"varint,7,opt,name=peerRank,proto3" json:"peerRank,omitempty"`                              // 对方段位
	PeerVictoryTimes        int64   `protobuf:"varint,8,opt,name=peerVictoryTimes,proto3" json:"peerVictoryTimes,omitempty"`              // 对方连胜次数
	PeerPullStreamAddress   string  `protobuf:"bytes,9,opt,name=peerPullStreamAddress,proto3" json:"peerPullStreamAddress,omitempty"`     // 对方拉流地址
}

func (x *PKStartNotify) Reset() {
	*x = PKStartNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKStartNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKStartNotify) ProtoMessage() {}

func (x *PKStartNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKStartNotify.ProtoReflect.Descriptor instead.
func (*PKStartNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{17}
}

func (x *PKStartNotify) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PKStartNotify) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

func (x *PKStartNotify) GetPkTopic() string {
	if x != nil {
		return x.PkTopic
	}
	return ""
}

func (x *PKStartNotify) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *PKStartNotify) GetPeerUsername() string {
	if x != nil {
		return x.PeerUsername
	}
	return ""
}

func (x *PKStartNotify) GetPeerHeaderImageOriginal() string {
	if x != nil {
		return x.PeerHeaderImageOriginal
	}
	return ""
}

func (x *PKStartNotify) GetPeerRank() int64 {
	if x != nil {
		return x.PeerRank
	}
	return 0
}

func (x *PKStartNotify) GetPeerVictoryTimes() int64 {
	if x != nil {
		return x.PeerVictoryTimes
	}
	return 0
}

func (x *PKStartNotify) GetPeerPullStreamAddress() string {
	if x != nil {
		return x.PeerPullStreamAddress
	}
	return ""
}

// PK比赛阶段结束
type PKGameOverNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime          int64    `protobuf:"varint,1,opt,name=endTime,proto3" json:"endTime,omitempty"`                              // 惩罚截止时间, endType为自然结束时有效
	EndType          END_TYPE `protobuf:"varint,2,opt,name=endType,proto3,enum=pb_msg_pk_room.END_TYPE" json:"endType,omitempty"` // 结束类型
	PkScore          int64    `protobuf:"varint,3,opt,name=pkScore,proto3" json:"pkScore,omitempty"`                              // 我方PK值
	Rank             int64    `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                    // 我方段位
	VictoryTimes     int64    `protobuf:"varint,5,opt,name=victoryTimes,proto3" json:"victoryTimes,omitempty"`                    // 我方连胜次数
	PeerPKScore      int64    `protobuf:"varint,11,opt,name=peerPKScore,proto3" json:"peerPKScore,omitempty"`                     // 对方PK值
	PeerRank         int64    `protobuf:"varint,12,opt,name=peerRank,proto3" json:"peerRank,omitempty"`                           // 对方段位
	PeerVictoryTimes int64    `protobuf:"varint,13,opt,name=peerVictoryTimes,proto3" json:"peerVictoryTimes,omitempty"`           // 对方连胜次数
	WinnerId         int64    `protobuf:"varint,21,opt,name=winnerId,proto3" json:"winnerId,omitempty"`                           // 胜方ID
	Mvp              *MVP     `protobuf:"bytes,22,opt,name=mvp,proto3" json:"mvp,omitempty"`                                      // MVP
}

func (x *PKGameOverNotify) Reset() {
	*x = PKGameOverNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKGameOverNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKGameOverNotify) ProtoMessage() {}

func (x *PKGameOverNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKGameOverNotify.ProtoReflect.Descriptor instead.
func (*PKGameOverNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{18}
}

func (x *PKGameOverNotify) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PKGameOverNotify) GetEndType() END_TYPE {
	if x != nil {
		return x.EndType
	}
	return END_TYPE_NATURAL
}

func (x *PKGameOverNotify) GetPkScore() int64 {
	if x != nil {
		return x.PkScore
	}
	return 0
}

func (x *PKGameOverNotify) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PKGameOverNotify) GetVictoryTimes() int64 {
	if x != nil {
		return x.VictoryTimes
	}
	return 0
}

func (x *PKGameOverNotify) GetPeerPKScore() int64 {
	if x != nil {
		return x.PeerPKScore
	}
	return 0
}

func (x *PKGameOverNotify) GetPeerRank() int64 {
	if x != nil {
		return x.PeerRank
	}
	return 0
}

func (x *PKGameOverNotify) GetPeerVictoryTimes() int64 {
	if x != nil {
		return x.PeerVictoryTimes
	}
	return 0
}

func (x *PKGameOverNotify) GetWinnerId() int64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *PKGameOverNotify) GetMvp() *MVP {
	if x != nil {
		return x.Mvp
	}
	return nil
}

// PKGameOverNotify 中 MVP 信息
type MVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorGrade          int32  `protobuf:"varint,1,opt,name=actorGrade,proto3" json:"actorGrade,omitempty"`
	BigImageOriginal    string `protobuf:"bytes,2,opt,name=bigImageOriginal,proto3" json:"bigImageOriginal,omitempty"`
	HeaderImageOriginal string `protobuf:"bytes,3,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`
	IsLiving            bool   `protobuf:"varint,4,opt,name=isLiving,proto3" json:"isLiving,omitempty"`
	LevelPrivilegeOpen  bool   `protobuf:"varint,5,opt,name=levelPrivilegeOpen,proto3" json:"levelPrivilegeOpen,omitempty"`
	NickName            string `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	UserID              int64  `protobuf:"varint,7,opt,name=userID,proto3" json:"userID,omitempty"`
	UserLevel           string `protobuf:"bytes,8,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
}

func (x *MVP) Reset() {
	*x = MVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MVP) ProtoMessage() {}

func (x *MVP) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MVP.ProtoReflect.Descriptor instead.
func (*MVP) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{19}
}

func (x *MVP) GetActorGrade() int32 {
	if x != nil {
		return x.ActorGrade
	}
	return 0
}

func (x *MVP) GetBigImageOriginal() string {
	if x != nil {
		return x.BigImageOriginal
	}
	return ""
}

func (x *MVP) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *MVP) GetIsLiving() bool {
	if x != nil {
		return x.IsLiving
	}
	return false
}

func (x *MVP) GetLevelPrivilegeOpen() bool {
	if x != nil {
		return x.LevelPrivilegeOpen
	}
	return false
}

func (x *MVP) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *MVP) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MVP) GetUserLevel() string {
	if x != nil {
		return x.UserLevel
	}
	return ""
}

type PKOverNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkStatus PK_STATUS `protobuf:"varint,1,opt,name=pkStatus,proto3,enum=pb_msg_pk_room.PK_STATUS" json:"pkStatus,omitempty"` // 结束时状态
}

func (x *PKOverNotify) Reset() {
	*x = PKOverNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKOverNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKOverNotify) ProtoMessage() {}

func (x *PKOverNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKOverNotify.ProtoReflect.Descriptor instead.
func (*PKOverNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{20}
}

func (x *PKOverNotify) GetPkStatus() PK_STATUS {
	if x != nil {
		return x.PkStatus
	}
	return PK_STATUS_IDLING
}

type PassivePKRefuseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpponentId int64  `protobuf:"varint,1,opt,name=opponentId,proto3" json:"opponentId,omitempty"`
	RefuseId   int64  `protobuf:"varint,2,opt,name=refuseId,proto3" json:"refuseId,omitempty"`
	Topic      string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *PassivePKRefuseReq) Reset() {
	*x = PassivePKRefuseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassivePKRefuseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassivePKRefuseReq) ProtoMessage() {}

func (x *PassivePKRefuseReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassivePKRefuseReq.ProtoReflect.Descriptor instead.
func (*PassivePKRefuseReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{21}
}

func (x *PassivePKRefuseReq) GetOpponentId() int64 {
	if x != nil {
		return x.OpponentId
	}
	return 0
}

func (x *PassivePKRefuseReq) GetRefuseId() int64 {
	if x != nil {
		return x.RefuseId
	}
	return 0
}

func (x *PassivePKRefuseReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// 主动普通pk切换为被动段位pk
type PKSwitchPassiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int64 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Rank   int64 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *PKSwitchPassiveReq) Reset() {
	*x = PKSwitchPassiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKSwitchPassiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKSwitchPassiveReq) ProtoMessage() {}

func (x *PKSwitchPassiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKSwitchPassiveReq.ProtoReflect.Descriptor instead.
func (*PKSwitchPassiveReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{22}
}

func (x *PKSwitchPassiveReq) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *PKSwitchPassiveReq) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// 被动PK通知
type PassivePkNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkType PK_TYPE `protobuf:"varint,1,opt,name=pkType,proto3,enum=pb_msg_pk_room.PK_TYPE" json:"pkType,omitempty"` // 被动pk类型，1为段位pk，3为大奖赛段位pk
}

func (x *PassivePkNotify) Reset() {
	*x = PassivePkNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassivePkNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassivePkNotify) ProtoMessage() {}

func (x *PassivePkNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassivePkNotify.ProtoReflect.Descriptor instead.
func (*PassivePkNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{23}
}

func (x *PassivePkNotify) GetPkType() PK_TYPE {
	if x != nil {
		return x.PkType
	}
	return PK_TYPE_RANDOM
}

// 大奖赛权限变更通知
type PKTournamentChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsQualifiedPkTournament bool   `protobuf:"varint,1,opt,name=isQualifiedPkTournament,proto3" json:"isQualifiedPkTournament,omitempty"` // 是否参加大奖赛,true->可参加
	PkTournamentBeginTime   string `protobuf:"bytes,2,opt,name=pkTournamentBeginTime,proto3" json:"pkTournamentBeginTime,omitempty"`      // 大奖赛开始时间
	PkTounamentTip          string `protobuf:"bytes,3,opt,name=pkTounamentTip,proto3" json:"pkTounamentTip,omitempty"`                    // 大奖赛展示
}

func (x *PKTournamentChangeNotify) Reset() {
	*x = PKTournamentChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKTournamentChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKTournamentChangeNotify) ProtoMessage() {}

func (x *PKTournamentChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKTournamentChangeNotify.ProtoReflect.Descriptor instead.
func (*PKTournamentChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{24}
}

func (x *PKTournamentChangeNotify) GetIsQualifiedPkTournament() bool {
	if x != nil {
		return x.IsQualifiedPkTournament
	}
	return false
}

func (x *PKTournamentChangeNotify) GetPkTournamentBeginTime() string {
	if x != nil {
		return x.PkTournamentBeginTime
	}
	return ""
}

func (x *PKTournamentChangeNotify) GetPkTounamentTip() string {
	if x != nil {
		return x.PkTounamentTip
	}
	return ""
}

type CanJoinPkTournamentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CanJoinPkTournamentReq) Reset() {
	*x = CanJoinPkTournamentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanJoinPkTournamentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanJoinPkTournamentReq) ProtoMessage() {}

func (x *CanJoinPkTournamentReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanJoinPkTournamentReq.ProtoReflect.Descriptor instead.
func (*CanJoinPkTournamentReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{25}
}

type CanJoinPkTournamentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsQualifiedPkTournament bool   `protobuf:"varint,1,opt,name=isQualifiedPkTournament,proto3" json:"isQualifiedPkTournament,omitempty"`
	PkTournamentBeginTime   string `protobuf:"bytes,2,opt,name=PkTournamentBeginTime,proto3" json:"PkTournamentBeginTime,omitempty"`
	PkTounamentTip          string `protobuf:"bytes,3,opt,name=PkTounamentTip,proto3" json:"PkTounamentTip,omitempty"`
}

func (x *CanJoinPkTournamentRsp) Reset() {
	*x = CanJoinPkTournamentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanJoinPkTournamentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanJoinPkTournamentRsp) ProtoMessage() {}

func (x *CanJoinPkTournamentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_pk_room_pk_room_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanJoinPkTournamentRsp.ProtoReflect.Descriptor instead.
func (*CanJoinPkTournamentRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_pk_room_pk_room_proto_rawDescGZIP(), []int{26}
}

func (x *CanJoinPkTournamentRsp) GetIsQualifiedPkTournament() bool {
	if x != nil {
		return x.IsQualifiedPkTournament
	}
	return false
}

func (x *CanJoinPkTournamentRsp) GetPkTournamentBeginTime() string {
	if x != nil {
		return x.PkTournamentBeginTime
	}
	return ""
}

func (x *CanJoinPkTournamentRsp) GetPkTounamentTip() string {
	if x != nil {
		return x.PkTounamentTip
	}
	return ""
}

var File_pb_msg_pk_room_pk_room_proto protoreflect.FileDescriptor

var file_pb_msg_pk_room_pk_room_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x2f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x53,
	0x0a, 0x0c, 0x50, 0x4b, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x4b, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x73, 0x70, 0x22, 0x3f, 0x0a, 0x0c, 0x50, 0x4b, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x70, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x4b, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x4b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x27, 0x0a, 0x0b, 0x50, 0x4b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x4b, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x4b, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x22, 0x11, 0x0a, 0x0f, 0x50,
	0x4b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x73, 0x70, 0x22, 0xe5,
	0x02, 0x0a, 0x0a, 0x50, 0x4b, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x50, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x56,
	0x50, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x50, 0x4b, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x4d, 0x0a, 0x14, 0x50, 0x4b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea,
	0x02, 0x0a, 0x0f, 0x50, 0x4b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x65,
	0x72, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x50,
	0x4b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x22, 0xe8, 0x02, 0x0a, 0x0d, 0x50, 0x4b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x65, 0x65, 0x72, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x65, 0x65, 0x72, 0x50,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdf, 0x02,
	0x0a, 0x10, 0x50, 0x4b, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x45,
	0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x50, 0x4b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x50, 0x4b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72,
	0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x76, 0x70, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70,
	0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x56, 0x50, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x22,
	0xa1, 0x02, 0x0a, 0x03, 0x4d, 0x56, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0c, 0x50, 0x4b, 0x4f, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70,
	0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x08, 0x70, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x12, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x4b, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x22, 0x40, 0x0a, 0x12, 0x50, 0x4b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x22, 0x42, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x06, 0x70, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x50, 0x4b, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6b, 0x54, 0x6f, 0x75, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6b, 0x54, 0x6f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x22, 0x18, 0x0a,
	0x16, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x50, 0x6b, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6b, 0x54, 0x6f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6b, 0x54, 0x6f,
	0x75, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x2a, 0x1f, 0x0a, 0x06, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x07, 0x50,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x23, 0x0a, 0x08, 0x45, 0x4e,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x2a,
	0x5d, 0x0a, 0x09, 0x50, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x55,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x42, 0x28,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2f, 0x70, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_msg_pk_room_pk_room_proto_rawDescOnce sync.Once
	file_pb_msg_pk_room_pk_room_proto_rawDescData = file_pb_msg_pk_room_pk_room_proto_rawDesc
)

func file_pb_msg_pk_room_pk_room_proto_rawDescGZIP() []byte {
	file_pb_msg_pk_room_pk_room_proto_rawDescOnce.Do(func() {
		file_pb_msg_pk_room_pk_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_msg_pk_room_pk_room_proto_rawDescData)
	})
	return file_pb_msg_pk_room_pk_room_proto_rawDescData
}

var file_pb_msg_pk_room_pk_room_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pb_msg_pk_room_pk_room_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pb_msg_pk_room_pk_room_proto_goTypes = []interface{}{
	(ANSWER)(0),                      // 0: pb_msg_pk_room.ANSWER
	(PK_TYPE)(0),                     // 1: pb_msg_pk_room.PK_TYPE
	(END_TYPE)(0),                    // 2: pb_msg_pk_room.END_TYPE
	(PK_STATUS)(0),                   // 3: pb_msg_pk_room.PK_STATUS
	(*PKEnqueueReq)(nil),             // 4: pb_msg_pk_room.PKEnqueueReq
	(*PKEnqueueRsp)(nil),             // 5: pb_msg_pk_room.PKEnqueueRsp
	(*PKDequeueReq)(nil),             // 6: pb_msg_pk_room.PKDequeueReq
	(*PKDequeueRsp)(nil),             // 7: pb_msg_pk_room.PKDequeueRsp
	(*PKAnswerReq)(nil),              // 8: pb_msg_pk_room.PKAnswerReq
	(*PKAnswerRsp)(nil),              // 9: pb_msg_pk_room.PKAnswerRsp
	(*PKEscapeReq)(nil),              // 10: pb_msg_pk_room.PKEscapeReq
	(*PKEscapeRsp)(nil),              // 11: pb_msg_pk_room.PKEscapeRsp
	(*PKInviteReq)(nil),              // 12: pb_msg_pk_room.PKInviteReq
	(*PKInviteRsp)(nil),              // 13: pb_msg_pk_room.PKInviteRsp
	(*PKInviteStopReq)(nil),          // 14: pb_msg_pk_room.PKInviteStopReq
	(*PKInviteStopRsp)(nil),          // 15: pb_msg_pk_room.PKInviteStopRsp
	(*PKRoomInfo)(nil),               // 16: pb_msg_pk_room.PKRoomInfo
	(*PKUser)(nil),                   // 17: pb_msg_pk_room.PKUser
	(*PKStatusChangeNotify)(nil),     // 18: pb_msg_pk_room.PKStatusChangeNotify
	(*PKMatchedNotify)(nil),          // 19: pb_msg_pk_room.PKMatchedNotify
	(*PKPeerRefusedNotify)(nil),      // 20: pb_msg_pk_room.PKPeerRefusedNotify
	(*PKStartNotify)(nil),            // 21: pb_msg_pk_room.PKStartNotify
	(*PKGameOverNotify)(nil),         // 22: pb_msg_pk_room.PKGameOverNotify
	(*MVP)(nil),                      // 23: pb_msg_pk_room.MVP
	(*PKOverNotify)(nil),             // 24: pb_msg_pk_room.PKOverNotify
	(*PassivePKRefuseReq)(nil),       // 25: pb_msg_pk_room.PassivePKRefuseReq
	(*PKSwitchPassiveReq)(nil),       // 26: pb_msg_pk_room.PKSwitchPassiveReq
	(*PassivePkNotify)(nil),          // 27: pb_msg_pk_room.PassivePkNotify
	(*PKTournamentChangeNotify)(nil), // 28: pb_msg_pk_room.PKTournamentChangeNotify
	(*CanJoinPkTournamentReq)(nil),   // 29: pb_msg_pk_room.CanJoinPkTournamentReq
	(*CanJoinPkTournamentRsp)(nil),   // 30: pb_msg_pk_room.CanJoinPkTournamentRsp
}
var file_pb_msg_pk_room_pk_room_proto_depIdxs = []int32{
	1,  // 0: pb_msg_pk_room.PKEnqueueReq.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	1,  // 1: pb_msg_pk_room.PKDequeueReq.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	0,  // 2: pb_msg_pk_room.PKAnswerReq.answer:type_name -> pb_msg_pk_room.ANSWER
	3,  // 3: pb_msg_pk_room.PKRoomInfo.pkStatus:type_name -> pb_msg_pk_room.PK_STATUS
	1,  // 4: pb_msg_pk_room.PKRoomInfo.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	17, // 5: pb_msg_pk_room.PKRoomInfo.peer:type_name -> pb_msg_pk_room.PKUser
	2,  // 6: pb_msg_pk_room.PKRoomInfo.endType:type_name -> pb_msg_pk_room.END_TYPE
	23, // 7: pb_msg_pk_room.PKRoomInfo.mvp:type_name -> pb_msg_pk_room.MVP
	3,  // 8: pb_msg_pk_room.PKStatusChangeNotify.pkStatus:type_name -> pb_msg_pk_room.PK_STATUS
	1,  // 9: pb_msg_pk_room.PKMatchedNotify.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	1,  // 10: pb_msg_pk_room.PKStartNotify.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	2,  // 11: pb_msg_pk_room.PKGameOverNotify.endType:type_name -> pb_msg_pk_room.END_TYPE
	23, // 12: pb_msg_pk_room.PKGameOverNotify.mvp:type_name -> pb_msg_pk_room.MVP
	3,  // 13: pb_msg_pk_room.PKOverNotify.pkStatus:type_name -> pb_msg_pk_room.PK_STATUS
	1,  // 14: pb_msg_pk_room.PassivePkNotify.pkType:type_name -> pb_msg_pk_room.PK_TYPE
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pb_msg_pk_room_pk_room_proto_init() }
func file_pb_msg_pk_room_pk_room_proto_init() {
	if File_pb_msg_pk_room_pk_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_msg_pk_room_pk_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKEnqueueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKEnqueueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDequeueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDequeueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKAnswerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKAnswerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKEscapeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKEscapeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKInviteStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKInviteStopRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKStatusChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKMatchedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKPeerRefusedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKStartNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKGameOverNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKOverNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassivePKRefuseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKSwitchPassiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassivePkNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKTournamentChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanJoinPkTournamentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_pk_room_pk_room_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanJoinPkTournamentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_msg_pk_room_pk_room_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_msg_pk_room_pk_room_proto_goTypes,
		DependencyIndexes: file_pb_msg_pk_room_pk_room_proto_depIdxs,
		EnumInfos:         file_pb_msg_pk_room_pk_room_proto_enumTypes,
		MessageInfos:      file_pb_msg_pk_room_pk_room_proto_msgTypes,
	}.Build()
	File_pb_msg_pk_room_pk_room_proto = out.File
	file_pb_msg_pk_room_pk_room_proto_rawDesc = nil
	file_pb_msg_pk_room_pk_room_proto_goTypes = nil
	file_pb_msg_pk_room_pk_room_proto_depIdxs = nil
}
