// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_msg/live_room/live_room.proto

package live_room

import (
	pb_pub "github.com/leallee00/pb/pb_pub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartyType int32

const (
	PartyType_Six   PartyType = 0
	PartyType_Eight PartyType = 1
)

// Enum value maps for PartyType.
var (
	PartyType_name = map[int32]string{
		0: "Six",
		1: "Eight",
	}
	PartyType_value = map[string]int32{
		"Six":   0,
		"Eight": 1,
	}
)

func (x PartyType) Enum() *PartyType {
	p := new(PartyType)
	*p = x
	return p
}

func (x PartyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[0].Descriptor()
}

func (PartyType) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[0]
}

func (x PartyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyType.Descriptor instead.
func (PartyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{0}
}

type RoomTheme int32

const (
	RoomTheme_UNKNOWN_THEME RoomTheme = 0
	RoomTheme_BLIND_DATE    RoomTheme = 2 // 相亲
	RoomTheme_SONG_TABLE    RoomTheme = 3 // 点歌台
	RoomTheme_RADIO         RoomTheme = 4 // 电台
	RoomTheme_GAME          RoomTheme = 5 // 游戏
)

// Enum value maps for RoomTheme.
var (
	RoomTheme_name = map[int32]string{
		0: "UNKNOWN_THEME",
		2: "BLIND_DATE",
		3: "SONG_TABLE",
		4: "RADIO",
		5: "GAME",
	}
	RoomTheme_value = map[string]int32{
		"UNKNOWN_THEME": 0,
		"BLIND_DATE":    2,
		"SONG_TABLE":    3,
		"RADIO":         4,
		"GAME":          5,
	}
)

func (x RoomTheme) Enum() *RoomTheme {
	p := new(RoomTheme)
	*p = x
	return p
}

func (x RoomTheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomTheme) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[1].Descriptor()
}

func (RoomTheme) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[1]
}

func (x RoomTheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomTheme.Descriptor instead.
func (RoomTheme) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{1}
}

// 房间相关消息
// 房间状态
type RoomStatus int32

const (
	RoomStatus_NORMAL    RoomStatus = 0 //正常 （预留）
	RoomStatus_LIVE_STOP RoomStatus = 1 //主播下播
)

// Enum value maps for RoomStatus.
var (
	RoomStatus_name = map[int32]string{
		0: "NORMAL",
		1: "LIVE_STOP",
	}
	RoomStatus_value = map[string]int32{
		"NORMAL":    0,
		"LIVE_STOP": 1,
	}
)

func (x RoomStatus) Enum() *RoomStatus {
	p := new(RoomStatus)
	*p = x
	return p
}

func (x RoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[2].Descriptor()
}

func (RoomStatus) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[2]
}

func (x RoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStatus.Descriptor instead.
func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{2}
}

type ACTION_TYPE int32

const (
	ACTION_TYPE_UNKNOWN ACTION_TYPE = 0
	ACTION_TYPE_GIFT    ACTION_TYPE = 1
	ACTION_TYPE_FOLLOW  ACTION_TYPE = 2
	ACTION_TYPE_SHARE   ACTION_TYPE = 3
	ACTION_TYPE_LIGHT   ACTION_TYPE = 4
	ACTION_TYPE_UPGRADE ACTION_TYPE = 5
	// JOIN_FANS_CARD  = 6;
	// JOIN_GUARD      = 7;
	// JOIN_NOBLE      = 8;
	ACTION_TYPE_FISH    ACTION_TYPE = 9
	ACTION_TYPE_REENTER ACTION_TYPE = 10 // 连续进入
)

// Enum value maps for ACTION_TYPE.
var (
	ACTION_TYPE_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GIFT",
		2:  "FOLLOW",
		3:  "SHARE",
		4:  "LIGHT",
		5:  "UPGRADE",
		9:  "FISH",
		10: "REENTER",
	}
	ACTION_TYPE_value = map[string]int32{
		"UNKNOWN": 0,
		"GIFT":    1,
		"FOLLOW":  2,
		"SHARE":   3,
		"LIGHT":   4,
		"UPGRADE": 5,
		"FISH":    9,
		"REENTER": 10,
	}
)

func (x ACTION_TYPE) Enum() *ACTION_TYPE {
	p := new(ACTION_TYPE)
	*p = x
	return p
}

func (x ACTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[3].Descriptor()
}

func (ACTION_TYPE) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[3]
}

func (x ACTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION_TYPE.Descriptor instead.
func (ACTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{3}
}

// 已经移到 pb_msg/pk_room包中
//
// /////////
// // PK相关
// /////////
//
// // 匹配PK
//
// // 主播申请加入随机PK请求
// message PKEnqueueReq
// {}
//
// message PKEnqueueRsp
// {}
//
// // 从PK队列中移除
// message PKDequeueReq
// {}
//
// message PKDequeueRsp
// {}
//
// // 主播响应是否接受随机创建的PK
// message PKAnswerReq{
// ANSWER answer = 1;
// }
// message PKAnswerRsp
// {}
//
// // 主动结束PK,逃兵
// message PKOverReq  // srcid 主退主播 aimid 被退主播
// {}
// message PKOverRsp
// {}
//
// // 邀请PK
//
// // 主播A邀请主播B进行PK
// message PKInviteReq  // srcid 邀请方 aimid 被邀方
// {
// int32 pkType = 1;
// }
// message PKInviteRsp
// {}
//
// // 邀请方取消PK邀请
// message PKInviteStopReq
// {}
// message PKInviteStopRsp
// {}
//
// // 被邀请方响应是否接受邀请
// message InvitePKAnswerReq
// {
// ANSWER answer = 1;
// }
//
// message InvitePKAnswerRsp
// {}
//
// // PK心跳
// message PKHeartBeat
// {}
//
// enum ANSWER
// {
// REFUSE = 0;  // 拒绝连麦
// AGREE  = 1;  // 同意连麦
// }
type RoomType int32

const (
	RoomType_Unknow RoomType = 0
	RoomType_Video  RoomType = 1 // 视频房
	RoomType_Audio  RoomType = 2 // 语音房
	RoomType_Party  RoomType = 3 // 派对房
)

// Enum value maps for RoomType.
var (
	RoomType_name = map[int32]string{
		0: "Unknow",
		1: "Video",
		2: "Audio",
		3: "Party",
	}
	RoomType_value = map[string]int32{
		"Unknow": 0,
		"Video":  1,
		"Audio":  2,
		"Party":  3,
	}
)

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}

func (x RoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[4].Descriptor()
}

func (RoomType) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[4]
}

func (x RoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomType.Descriptor instead.
func (RoomType) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{4}
}

type MAnchorRole int32

const (
	MAnchorRole_Audience MAnchorRole = 0
	MAnchorRole_Anchor   MAnchorRole = 1
	MAnchorRole_Owner    MAnchorRole = 2
	MAnchorRole_Manager  MAnchorRole = 3
)

// Enum value maps for MAnchorRole.
var (
	MAnchorRole_name = map[int32]string{
		0: "Audience",
		1: "Anchor",
		2: "Owner",
		3: "Manager",
	}
	MAnchorRole_value = map[string]int32{
		"Audience": 0,
		"Anchor":   1,
		"Owner":    2,
		"Manager":  3,
	}
)

func (x MAnchorRole) Enum() *MAnchorRole {
	p := new(MAnchorRole)
	*p = x
	return p
}

func (x MAnchorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MAnchorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[5].Descriptor()
}

func (MAnchorRole) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[5]
}

func (x MAnchorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MAnchorRole.Descriptor instead.
func (MAnchorRole) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{5}
}

type AnswerType int32

const (
	AnswerType_Agree  AnswerType = 0
	AnswerType_Refuse AnswerType = 1
)

// Enum value maps for AnswerType.
var (
	AnswerType_name = map[int32]string{
		0: "Agree",
		1: "Refuse",
	}
	AnswerType_value = map[string]int32{
		"Agree":  0,
		"Refuse": 1,
	}
)

func (x AnswerType) Enum() *AnswerType {
	p := new(AnswerType)
	*p = x
	return p
}

func (x AnswerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[6].Descriptor()
}

func (AnswerType) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[6]
}

func (x AnswerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnswerType.Descriptor instead.
func (AnswerType) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{6}
}

type STREAM_STATE int32

const (
	STREAM_STATE_CLOSED  STREAM_STATE = 0
	STREAM_STATE_CREATED STREAM_STATE = 1
)

// Enum value maps for STREAM_STATE.
var (
	STREAM_STATE_name = map[int32]string{
		0: "CLOSED",
		1: "CREATED",
	}
	STREAM_STATE_value = map[string]int32{
		"CLOSED":  0,
		"CREATED": 1,
	}
)

func (x STREAM_STATE) Enum() *STREAM_STATE {
	p := new(STREAM_STATE)
	*p = x
	return p
}

func (x STREAM_STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STREAM_STATE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[7].Descriptor()
}

func (STREAM_STATE) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[7]
}

func (x STREAM_STATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STREAM_STATE.Descriptor instead.
func (STREAM_STATE) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{7}
}

type LiveGiftNotify_SendType int32

const (
	LiveGiftNotify_SINGLE LiveGiftNotify_SendType = 0
	LiveGiftNotify_MULTI  LiveGiftNotify_SendType = 1
)

// Enum value maps for LiveGiftNotify_SendType.
var (
	LiveGiftNotify_SendType_name = map[int32]string{
		0: "SINGLE",
		1: "MULTI",
	}
	LiveGiftNotify_SendType_value = map[string]int32{
		"SINGLE": 0,
		"MULTI":  1,
	}
)

func (x LiveGiftNotify_SendType) Enum() *LiveGiftNotify_SendType {
	p := new(LiveGiftNotify_SendType)
	*p = x
	return p
}

func (x LiveGiftNotify_SendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveGiftNotify_SendType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[8].Descriptor()
}

func (LiveGiftNotify_SendType) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[8]
}

func (x LiveGiftNotify_SendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveGiftNotify_SendType.Descriptor instead.
func (LiveGiftNotify_SendType) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{64, 0}
}

type HandDrawnGiftNotify_SendType int32

const (
	HandDrawnGiftNotify_SINGLE HandDrawnGiftNotify_SendType = 0
	HandDrawnGiftNotify_MULTI  HandDrawnGiftNotify_SendType = 1
)

// Enum value maps for HandDrawnGiftNotify_SendType.
var (
	HandDrawnGiftNotify_SendType_name = map[int32]string{
		0: "SINGLE",
		1: "MULTI",
	}
	HandDrawnGiftNotify_SendType_value = map[string]int32{
		"SINGLE": 0,
		"MULTI":  1,
	}
)

func (x HandDrawnGiftNotify_SendType) Enum() *HandDrawnGiftNotify_SendType {
	p := new(HandDrawnGiftNotify_SendType)
	*p = x
	return p
}

func (x HandDrawnGiftNotify_SendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandDrawnGiftNotify_SendType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_msg_live_room_live_room_proto_enumTypes[9].Descriptor()
}

func (HandDrawnGiftNotify_SendType) Type() protoreflect.EnumType {
	return &file_pb_msg_live_room_live_room_proto_enumTypes[9]
}

func (x HandDrawnGiftNotify_SendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandDrawnGiftNotify_SendType.Descriptor instead.
func (HandDrawnGiftNotify_SendType) EnumDescriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{70, 0}
}

// ============主播开播相关消息定义======================
// 主播开播请求
type LiveStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType  RoomType  `protobuf:"varint,1,opt,name=roomType,proto3,enum=pb_msg_live_room.RoomType" json:"roomType,omitempty"`    // 新增房间类型
	RoomName  string    `protobuf:"bytes,2,opt,name=roomName,proto3" json:"roomName,omitempty"`                                    // 多人房新增
	RoomId    int64     `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`                                       // 房间id
	PartyType PartyType `protobuf:"varint,4,opt,name=partyType,proto3,enum=pb_msg_live_room.PartyType" json:"partyType,omitempty"` // 派对房类型，也通知给java
	RoomTheme RoomTheme `protobuf:"varint,5,opt,name=roomTheme,proto3,enum=pb_msg_live_room.RoomTheme" json:"roomTheme,omitempty"` // 派对房主题, 椰果派对房房新增
}

func (x *LiveStartReq) Reset() {
	*x = LiveStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartReq) ProtoMessage() {}

func (x *LiveStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartReq.ProtoReflect.Descriptor instead.
func (*LiveStartReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{0}
}

func (x *LiveStartReq) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_Unknow
}

func (x *LiveStartReq) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *LiveStartReq) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LiveStartReq) GetPartyType() PartyType {
	if x != nil {
		return x.PartyType
	}
	return PartyType_Six
}

func (x *LiveStartReq) GetRoomTheme() RoomTheme {
	if x != nil {
		return x.RoomTheme
	}
	return RoomTheme_UNKNOWN_THEME
}

// ALPHA 主播开播逻辑改造
type LiveStartRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamType        int32          `protobuf:"varint,1,opt,name=streamType,proto3" json:"streamType,omitempty"`
	PushStreamAddress string         `protobuf:"bytes,2,opt,name=pushStreamAddress,proto3" json:"pushStreamAddress,omitempty"`
	LiveMode          int32          `protobuf:"varint,3,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
	CoverImage        string         `protobuf:"bytes,4,opt,name=coverImage,proto3" json:"coverImage,omitempty"`
	UnPassReason      string         `protobuf:"bytes,5,opt,name=unPassReason,proto3" json:"unPassReason,omitempty"`
	CoverStatus       string         `protobuf:"bytes,6,opt,name=coverStatus,proto3" json:"coverStatus,omitempty"`
	CanLiveStatus     bool           `protobuf:"varint,7,opt,name=canLiveStatus,proto3" json:"canLiveStatus,omitempty"`
	Message           string         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Result            pb_pub.ErrCode `protobuf:"varint,9,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` // 多人房新增
}

func (x *LiveStartRsp) Reset() {
	*x = LiveStartRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartRsp) ProtoMessage() {}

func (x *LiveStartRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartRsp.ProtoReflect.Descriptor instead.
func (*LiveStartRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{1}
}

func (x *LiveStartRsp) GetStreamType() int32 {
	if x != nil {
		return x.StreamType
	}
	return 0
}

func (x *LiveStartRsp) GetPushStreamAddress() string {
	if x != nil {
		return x.PushStreamAddress
	}
	return ""
}

func (x *LiveStartRsp) GetLiveMode() int32 {
	if x != nil {
		return x.LiveMode
	}
	return 0
}

func (x *LiveStartRsp) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *LiveStartRsp) GetUnPassReason() string {
	if x != nil {
		return x.UnPassReason
	}
	return ""
}

func (x *LiveStartRsp) GetCoverStatus() string {
	if x != nil {
		return x.CoverStatus
	}
	return ""
}

func (x *LiveStartRsp) GetCanLiveStatus() bool {
	if x != nil {
		return x.CanLiveStatus
	}
	return false
}

func (x *LiveStartRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LiveStartRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 主播下播请求
type LiveStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *LiveStopReq) Reset() {
	*x = LiveStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopReq) ProtoMessage() {}

func (x *LiveStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopReq.ProtoReflect.Descriptor instead.
func (*LiveStopReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{2}
}

func (x *LiveStopReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 主播下播应答
type LiveStopRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LiveStopRsp) Reset() {
	*x = LiveStopRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStopRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStopRsp) ProtoMessage() {}

func (x *LiveStopRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStopRsp.ProtoReflect.Descriptor instead.
func (*LiveStopRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{3}
}

// 推流成功，允许观众进入
type LiveStartSuccessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LiveStartSuccessReq) Reset() {
	*x = LiveStartSuccessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartSuccessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartSuccessReq) ProtoMessage() {}

func (x *LiveStartSuccessReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartSuccessReq.ProtoReflect.Descriptor instead.
func (*LiveStartSuccessReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{4}
}

// 推流成功，允许观众进入应答
type LiveStartSuccessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LiveStartSuccessRsp) Reset() {
	*x = LiveStartSuccessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartSuccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartSuccessRsp) ProtoMessage() {}

func (x *LiveStartSuccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartSuccessRsp.ProtoReflect.Descriptor instead.
func (*LiveStartSuccessRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{5}
}

// 主播开播信息推送粉丝
type LiveStartNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId          int64  `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`  //主播ID
	Msg              string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`           //开播通知消息内容
	Title            string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`       //标题
	Type             int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`        //ios开播类型
	NickName         string `protobuf:"bytes,5,opt,name=nickName,proto3" json:"nickName,omitempty"` //开播房间名称
	BigImageOriginal string `protobuf:"bytes,6,opt,name=bigImageOriginal,proto3" json:"bigImageOriginal,omitempty"`
}

func (x *LiveStartNotify) Reset() {
	*x = LiveStartNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveStartNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveStartNotify) ProtoMessage() {}

func (x *LiveStartNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveStartNotify.ProtoReflect.Descriptor instead.
func (*LiveStartNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{6}
}

func (x *LiveStartNotify) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveStartNotify) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LiveStartNotify) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LiveStartNotify) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LiveStartNotify) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *LiveStartNotify) GetBigImageOriginal() string {
	if x != nil {
		return x.BigImageOriginal
	}
	return ""
}

// //============观众进入直播间相关消息定义======================
// 用户进入房间
type AudienceEnterLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AudienceEnterLiveReq) Reset() {
	*x = AudienceEnterLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceEnterLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceEnterLiveReq) ProtoMessage() {}

func (x *AudienceEnterLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceEnterLiveReq.ProtoReflect.Descriptor instead.
func (*AudienceEnterLiveReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{7}
}

// 主播开播应答，鉴权返回码放到PBMessage的errcode
// 如果失败则 map["result"] 里面取错误描述
type UserEnterLiveRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 直播sdk类型，0：未知 1：zego，:2:三体
	StreamType int32 `protobuf:"varint,1,opt,name=streamType,proto3" json:"streamType,omitempty"`
	// 违禁词更新时间，控制客户端是否更新违禁词
	WordUpdateTime string `protobuf:"bytes,2,opt,name=wordUpdateTime,proto3" json:"wordUpdateTime,omitempty"`
}

func (x *UserEnterLiveRsp) Reset() {
	*x = UserEnterLiveRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEnterLiveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnterLiveRsp) ProtoMessage() {}

func (x *UserEnterLiveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnterLiveRsp.ProtoReflect.Descriptor instead.
func (*UserEnterLiveRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{8}
}

func (x *UserEnterLiveRsp) GetStreamType() int32 {
	if x != nil {
		return x.StreamType
	}
	return 0
}

func (x *UserEnterLiveRsp) GetWordUpdateTime() string {
	if x != nil {
		return x.WordUpdateTime
	}
	return ""
}

// 用户道具
type LiveUserPropsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountInfo string `protobuf:"bytes,1,opt,name=MountInfo,proto3" json:"MountInfo,omitempty"` //坐骑信息 预留
	FansInfo  string `protobuf:"bytes,2,opt,name=FansInfo,proto3" json:"FansInfo,omitempty"`   //粉丝信息 预留
}

func (x *LiveUserPropsNotify) Reset() {
	*x = LiveUserPropsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveUserPropsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveUserPropsNotify) ProtoMessage() {}

func (x *LiveUserPropsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveUserPropsNotify.ProtoReflect.Descriptor instead.
func (*LiveUserPropsNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{9}
}

func (x *LiveUserPropsNotify) GetMountInfo() string {
	if x != nil {
		return x.MountInfo
	}
	return ""
}

func (x *LiveUserPropsNotify) GetFansInfo() string {
	if x != nil {
		return x.FansInfo
	}
	return ""
}

// 房间状态推送
type RoomStatusNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int64      `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"` //直播间ID
	RoomStatus RoomStatus `protobuf:"varint,2,opt,name=roomStatus,proto3,enum=pb_msg_live_room.RoomStatus" json:"roomStatus,omitempty"`
}

func (x *RoomStatusNotify) Reset() {
	*x = RoomStatusNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStatusNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStatusNotify) ProtoMessage() {}

func (x *RoomStatusNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStatusNotify.ProtoReflect.Descriptor instead.
func (*RoomStatusNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{10}
}

func (x *RoomStatusNotify) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RoomStatusNotify) GetRoomStatus() RoomStatus {
	if x != nil {
		return x.RoomStatus
	}
	return RoomStatus_NORMAL
}

type YXCommMsgNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YxMsg     *pb_pub.YXCommMsg `protobuf:"bytes,1,opt,name=yxMsg,proto3" json:"yxMsg,omitempty"` //消息内容
	Time      int64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Sn        int64             `protobuf:"varint,4,opt,name=sn,proto3" json:"sn,omitempty"`
	SrcUserId int64             `protobuf:"varint,5,opt,name=srcUserId,proto3" json:"srcUserId,omitempty"`
	GroupId   int64             `protobuf:"varint,6,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *YXCommMsgNode) Reset() {
	*x = YXCommMsgNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YXCommMsgNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YXCommMsgNode) ProtoMessage() {}

func (x *YXCommMsgNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YXCommMsgNode.ProtoReflect.Descriptor instead.
func (*YXCommMsgNode) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{11}
}

func (x *YXCommMsgNode) GetYxMsg() *pb_pub.YXCommMsg {
	if x != nil {
		return x.YxMsg
	}
	return nil
}

func (x *YXCommMsgNode) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *YXCommMsgNode) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *YXCommMsgNode) GetSrcUserId() int64 {
	if x != nil {
		return x.SrcUserId
	}
	return 0
}

func (x *YXCommMsgNode) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// ALPHA 历史消息
type HistoryMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbData  []byte             `protobuf:"bytes,1,opt,name=pbData,proto3" json:"pbData,omitempty"` // 序列化后的消息体
	PbName  string             `protobuf:"bytes,2,opt,name=pbName,proto3" json:"pbName,omitempty"`
	Time    int64              `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	MsgSn   int64              `protobuf:"varint,4,opt,name=msgSn,proto3" json:"msgSn,omitempty"`
	SrcId   int64              `protobuf:"varint,5,opt,name=srcId,proto3" json:"srcId,omitempty"`
	GroupId int64              `protobuf:"varint,6,opt,name=groupId,proto3" json:"groupId,omitempty"`
	MsgType pb_pub.MessageType `protobuf:"varint,7,opt,name=msgType,proto3,enum=pb_pub.MessageType" json:"msgType,omitempty"` // im 过滤消息类型用，前端无需关心
}

func (x *HistoryMsg) Reset() {
	*x = HistoryMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMsg) ProtoMessage() {}

func (x *HistoryMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMsg.ProtoReflect.Descriptor instead.
func (*HistoryMsg) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{12}
}

func (x *HistoryMsg) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *HistoryMsg) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *HistoryMsg) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HistoryMsg) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *HistoryMsg) GetSrcId() int64 {
	if x != nil {
		return x.SrcId
	}
	return 0
}

func (x *HistoryMsg) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *HistoryMsg) GetMsgType() pb_pub.MessageType {
	if x != nil {
		return x.MsgType
	}
	return pb_pub.MessageType(0)
}

// 获取直播间历史消息（10条文字）
type HistoryYXCommMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoryYXCommMsgReq) Reset() {
	*x = HistoryYXCommMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryYXCommMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryYXCommMsgReq) ProtoMessage() {}

func (x *HistoryYXCommMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryYXCommMsgReq.ProtoReflect.Descriptor instead.
func (*HistoryYXCommMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{13}
}

type HistoryYXCommMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgNum   int64            `protobuf:"varint,1,opt,name=msgNum,proto3" json:"msgNum,omitempty"`
	MsgList  []*YXCommMsgNode `protobuf:"bytes,2,rep,name=msgList,proto3" json:"msgList,omitempty"`
	LatestSn int64            `protobuf:"varint,3,opt,name=latestSn,proto3" json:"latestSn,omitempty"` //直播间最新的消息的sn
	// ALPHA 新的历史消息字段
	HistoryMsgs []*HistoryMsg `protobuf:"bytes,4,rep,name=historyMsgs,proto3" json:"historyMsgs,omitempty"`
	LatestMsgSn int64         `protobuf:"varint,5,opt,name=latestMsgSn,proto3" json:"latestMsgSn,omitempty"` // 最新历史消息sn
}

func (x *HistoryYXCommMsgRsp) Reset() {
	*x = HistoryYXCommMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryYXCommMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryYXCommMsgRsp) ProtoMessage() {}

func (x *HistoryYXCommMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryYXCommMsgRsp.ProtoReflect.Descriptor instead.
func (*HistoryYXCommMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{14}
}

func (x *HistoryYXCommMsgRsp) GetMsgNum() int64 {
	if x != nil {
		return x.MsgNum
	}
	return 0
}

func (x *HistoryYXCommMsgRsp) GetMsgList() []*YXCommMsgNode {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *HistoryYXCommMsgRsp) GetLatestSn() int64 {
	if x != nil {
		return x.LatestSn
	}
	return 0
}

func (x *HistoryYXCommMsgRsp) GetHistoryMsgs() []*HistoryMsg {
	if x != nil {
		return x.HistoryMsgs
	}
	return nil
}

func (x *HistoryYXCommMsgRsp) GetLatestMsgSn() int64 {
	if x != nil {
		return x.LatestMsgSn
	}
	return 0
}

// 断线重连获取直播间历史消息（100条全部类型消息）
type ReloadYXCommMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn int64 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *ReloadYXCommMsgReq) Reset() {
	*x = ReloadYXCommMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadYXCommMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadYXCommMsgReq) ProtoMessage() {}

func (x *ReloadYXCommMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadYXCommMsgReq.ProtoReflect.Descriptor instead.
func (*ReloadYXCommMsgReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{15}
}

func (x *ReloadYXCommMsgReq) GetSn() int64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

type ReloadYXCommMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgNum   int64            `protobuf:"varint,1,opt,name=msgNum,proto3" json:"msgNum,omitempty"`
	MsgList  []*YXCommMsgNode `protobuf:"bytes,2,rep,name=msgList,proto3" json:"msgList,omitempty"`
	LatestSn int64            `protobuf:"varint,3,opt,name=latestSn,proto3" json:"latestSn,omitempty"` //直播间最新的消息的sn
	// ALPHA 新的历史消息字段
	HistoryMsgs []*HistoryMsg `protobuf:"bytes,4,rep,name=historyMsgs,proto3" json:"historyMsgs,omitempty"`
	LatestMsgSn int64         `protobuf:"varint,5,opt,name=latestMsgSn,proto3" json:"latestMsgSn,omitempty"` // 最新历史消息sn
}

func (x *ReloadYXCommMsgRsp) Reset() {
	*x = ReloadYXCommMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadYXCommMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadYXCommMsgRsp) ProtoMessage() {}

func (x *ReloadYXCommMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadYXCommMsgRsp.ProtoReflect.Descriptor instead.
func (*ReloadYXCommMsgRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{16}
}

func (x *ReloadYXCommMsgRsp) GetMsgNum() int64 {
	if x != nil {
		return x.MsgNum
	}
	return 0
}

func (x *ReloadYXCommMsgRsp) GetMsgList() []*YXCommMsgNode {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *ReloadYXCommMsgRsp) GetLatestSn() int64 {
	if x != nil {
		return x.LatestSn
	}
	return 0
}

func (x *ReloadYXCommMsgRsp) GetHistoryMsgs() []*HistoryMsg {
	if x != nil {
		return x.HistoryMsgs
	}
	return nil
}

func (x *ReloadYXCommMsgRsp) GetLatestMsgSn() int64 {
	if x != nil {
		return x.LatestMsgSn
	}
	return 0
}

// PK数值更新
type PKScoreNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkScore map[int64]int64 `protobuf:"bytes,1,rep,name=pkScore,proto3" json:"pkScore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //主播房间号:PK值
}

func (x *PKScoreNotify) Reset() {
	*x = PKScoreNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKScoreNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKScoreNotify) ProtoMessage() {}

func (x *PKScoreNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKScoreNotify.ProtoReflect.Descriptor instead.
func (*PKScoreNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{17}
}

func (x *PKScoreNotify) GetPkScore() map[int64]int64 {
	if x != nil {
		return x.PkScore
	}
	return nil
}

// PK礼物属性
type PKPROPNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId             int64  `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`                         //礼物ID
	GiftImage          string `protobuf:"bytes,2,opt,name=giftImage,proto3" json:"giftImage,omitempty"`                    //礼物图片
	GiftName           string `protobuf:"bytes,3,opt,name=giftName,proto3" json:"giftName,omitempty"`                      //礼物名字
	ActorId            int64  `protobuf:"varint,4,opt,name=actorId,proto3" json:"actorId,omitempty"`                       //发送的房间ID即主播ID
	TargetName         string `protobuf:"bytes,5,opt,name=targetName,proto3" json:"targetName,omitempty"`                  //发送的房间名字即主播名字
	UserId             int64  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                         //发送的用户ID
	HeadImg            string `protobuf:"bytes,7,opt,name=headImg,proto3" json:"headImg,omitempty"`                        //发送的用户头像
	SenderName         string `protobuf:"bytes,8,opt,name=senderName,proto3" json:"senderName,omitempty"`                  //发送的用户名
	LevelPrivilegeOpen bool   `protobuf:"varint,9,opt,name=levelPrivilegeOpen,proto3" json:"levelPrivilegeOpen,omitempty"` //发送的用户是否开启神秘人
	StartTime          int64  `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`                  //道具使用开始时间
	EndTime            int64  `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`                      //道具使用结束时间
	CurTime            int64  `protobuf:"varint,12,opt,name=curTime,proto3" json:"curTime,omitempty"`                      //当前时间
	GiftNumber         int64  `protobuf:"varint,13,opt,name=giftNumber,proto3" json:"giftNumber,omitempty"`                //送礼数量
}

func (x *PKPROPNotify) Reset() {
	*x = PKPROPNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKPROPNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKPROPNotify) ProtoMessage() {}

func (x *PKPROPNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKPROPNotify.ProtoReflect.Descriptor instead.
func (*PKPROPNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{18}
}

func (x *PKPROPNotify) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *PKPROPNotify) GetGiftImage() string {
	if x != nil {
		return x.GiftImage
	}
	return ""
}

func (x *PKPROPNotify) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *PKPROPNotify) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *PKPROPNotify) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *PKPROPNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PKPROPNotify) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *PKPROPNotify) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *PKPROPNotify) GetLevelPrivilegeOpen() bool {
	if x != nil {
		return x.LevelPrivilegeOpen
	}
	return false
}

func (x *PKPROPNotify) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PKPROPNotify) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PKPROPNotify) GetCurTime() int64 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *PKPROPNotify) GetGiftNumber() int64 {
	if x != nil {
		return x.GiftNumber
	}
	return 0
}

// 房间消息: 礼物消息
type LiveRoomGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gift *pb_pub.Gift `protobuf:"bytes,1,opt,name=gift,proto3" json:"gift,omitempty"` // 礼物消息体
}

func (x *LiveRoomGift) Reset() {
	*x = LiveRoomGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoomGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoomGift) ProtoMessage() {}

func (x *LiveRoomGift) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoomGift.ProtoReflect.Descriptor instead.
func (*LiveRoomGift) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{19}
}

func (x *LiveRoomGift) GetGift() *pb_pub.Gift {
	if x != nil {
		return x.Gift
	}
	return nil
}

// 房间消息: 主持模式消息
type HostMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHostMode        bool `protobuf:"varint,1,opt,name=isHostMode,proto3" json:"isHostMode,omitempty"`               //默认模式是否为主持人
	IsCurrentHostMode bool `protobuf:"varint,2,opt,name=isCurrentHostMode,proto3" json:"isCurrentHostMode,omitempty"` //当前模式是否为主持人
}

func (x *HostMode) Reset() {
	*x = HostMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMode) ProtoMessage() {}

func (x *HostMode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMode.ProtoReflect.Descriptor instead.
func (*HostMode) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{20}
}

func (x *HostMode) GetIsHostMode() bool {
	if x != nil {
		return x.IsHostMode
	}
	return false
}

func (x *HostMode) GetIsCurrentHostMode() bool {
	if x != nil {
		return x.IsCurrentHostMode
	}
	return false
}

// ALPHA 用户进房间改造
// 用户进房间通知
type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间相关
	RoomId       int64 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	OnLineNum    int64 `protobuf:"varint,2,opt,name=onLineNum,proto3" json:"onLineNum,omitempty"`
	RoomStatus   int32 `protobuf:"varint,3,opt,name=roomStatus,proto3" json:"roomStatus,omitempty"`
	SwitchToBack bool  `protobuf:"varint,22,opt,name=switchToBack,proto3" json:"switchToBack,omitempty"` // true 在后台 false 在前台
	// 主播相关
	ActorId                int64  `protobuf:"varint,4,opt,name=actorId,proto3" json:"actorId,omitempty"`
	ImId                   string `protobuf:"bytes,5,opt,name=imId,proto3" json:"imId,omitempty"` // 主播的云信ID
	RoomNotice             string `protobuf:"bytes,6,opt,name=roomNotice,proto3" json:"roomNotice,omitempty"`
	ActorLevel             string `protobuf:"bytes,7,opt,name=actorLevel,proto3" json:"actorLevel,omitempty"`
	ActorGrade             int32  `protobuf:"varint,8,opt,name=actorGrade,proto3" json:"actorGrade,omitempty"`
	ActorCurrentExperience int64  `protobuf:"varint,9,opt,name=actorCurrentExperience,proto3" json:"actorCurrentExperience,omitempty"`
	HeaderImageOriginal    string `protobuf:"bytes,10,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`
	HeadPendantUrl         string `protobuf:"bytes,11,opt,name=headPendantUrl,proto3" json:"headPendantUrl,omitempty"`
	BigImageOriginal       string `protobuf:"bytes,12,opt,name=bigImageOriginal,proto3" json:"bigImageOriginal,omitempty"`
	RecentReceiveCoins     int64  `protobuf:"varint,13,opt,name=recentReceiveCoins,proto3" json:"recentReceiveCoins,omitempty"`
	NickName               string `protobuf:"bytes,14,opt,name=nickName,proto3" json:"nickName,omitempty"`
	FansCardName           string `protobuf:"bytes,15,opt,name=fansCardName,proto3" json:"fansCardName,omitempty"`
	// 其他
	BroadcastLimitCoins int64 `protobuf:"varint,20,opt,name=broadcastLimitCoins,proto3" json:"broadcastLimitCoins,omitempty"` // 礼物广播的阈值
	UpdateTime          int64 `protobuf:"varint,21,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                   // 违禁词更新时间
	// 多人房新增
	RoomType                RoomType          `protobuf:"varint,23,opt,name=roomType,proto3,enum=pb_msg_live_room.RoomType" json:"roomType,omitempty"`                                               // 房间类型
	Exp                     map[string][]byte `protobuf:"bytes,24,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 不同房间类型可能携带不同的数据
	PullStreamAddress       string            `protobuf:"bytes,25,opt,name=pullStreamAddress,proto3" json:"pullStreamAddress,omitempty"`                                                             // 拉流地址
	RoomName                string            `protobuf:"bytes,26,opt,name=roomName,proto3" json:"roomName,omitempty"`                                                                               // 房间名称
	BackgroundImageUrl      string            `protobuf:"bytes,27,opt,name=backgroundImageUrl,proto3" json:"backgroundImageUrl,omitempty"`                                                           // 背景图片
	Rank                    int64             `protobuf:"varint,41,opt,name=rank,proto3" json:"rank,omitempty"`                                                                                      // 段位积分
	VictoryTimes            int64             `protobuf:"varint,42,opt,name=victoryTimes,proto3" json:"victoryTimes,omitempty"`                                                                      // 连胜次数
	DynamicBackgroundImage  string            `protobuf:"bytes,43,opt,name=dynamicBackgroundImage,proto3" json:"dynamicBackgroundImage,omitempty"`                                                   // 动态壁纸url
	IsQualifiedPkTournament bool              `protobuf:"varint,45,opt,name=isQualifiedPkTournament,proto3" json:"isQualifiedPkTournament,omitempty"`                                                // 是否参加大奖赛,true->可参加
	PkTournamentBeginTime   string            `protobuf:"bytes,46,opt,name=pkTournamentBeginTime,proto3" json:"pkTournamentBeginTime,omitempty"`                                                     // 大奖赛开始时间
	PkTounamentTip          string            `protobuf:"bytes,47,opt,name=pkTounamentTip,proto3" json:"pkTounamentTip,omitempty"`                                                                   // 大奖赛展示
	PartyType               PartyType         `protobuf:"varint,48,opt,name=partyType,proto3,enum=pb_msg_live_room.PartyType" json:"partyType,omitempty"`                                            // roomType = Party 时有效, 派对房类型
	RoomTheme               RoomTheme         `protobuf:"varint,49,opt,name=roomTheme,proto3,enum=pb_msg_live_room.RoomTheme" json:"roomTheme,omitempty"`                                            // 派对房主题, 椰果派对房房新增
	FansTop1Status          bool              `protobuf:"varint,50,opt,name=FansTop1Status,proto3" json:"FansTop1Status,omitempty"`                                                                  // 房主粉丝团是不是top1
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{21}
}

func (x *RoomInfo) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomInfo) GetOnLineNum() int64 {
	if x != nil {
		return x.OnLineNum
	}
	return 0
}

func (x *RoomInfo) GetRoomStatus() int32 {
	if x != nil {
		return x.RoomStatus
	}
	return 0
}

func (x *RoomInfo) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

func (x *RoomInfo) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *RoomInfo) GetImId() string {
	if x != nil {
		return x.ImId
	}
	return ""
}

func (x *RoomInfo) GetRoomNotice() string {
	if x != nil {
		return x.RoomNotice
	}
	return ""
}

func (x *RoomInfo) GetActorLevel() string {
	if x != nil {
		return x.ActorLevel
	}
	return ""
}

func (x *RoomInfo) GetActorGrade() int32 {
	if x != nil {
		return x.ActorGrade
	}
	return 0
}

func (x *RoomInfo) GetActorCurrentExperience() int64 {
	if x != nil {
		return x.ActorCurrentExperience
	}
	return 0
}

func (x *RoomInfo) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *RoomInfo) GetHeadPendantUrl() string {
	if x != nil {
		return x.HeadPendantUrl
	}
	return ""
}

func (x *RoomInfo) GetBigImageOriginal() string {
	if x != nil {
		return x.BigImageOriginal
	}
	return ""
}

func (x *RoomInfo) GetRecentReceiveCoins() int64 {
	if x != nil {
		return x.RecentReceiveCoins
	}
	return 0
}

func (x *RoomInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RoomInfo) GetFansCardName() string {
	if x != nil {
		return x.FansCardName
	}
	return ""
}

func (x *RoomInfo) GetBroadcastLimitCoins() int64 {
	if x != nil {
		return x.BroadcastLimitCoins
	}
	return 0
}

func (x *RoomInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *RoomInfo) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_Unknow
}

func (x *RoomInfo) GetExp() map[string][]byte {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *RoomInfo) GetPullStreamAddress() string {
	if x != nil {
		return x.PullStreamAddress
	}
	return ""
}

func (x *RoomInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomInfo) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *RoomInfo) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RoomInfo) GetVictoryTimes() int64 {
	if x != nil {
		return x.VictoryTimes
	}
	return 0
}

func (x *RoomInfo) GetDynamicBackgroundImage() string {
	if x != nil {
		return x.DynamicBackgroundImage
	}
	return ""
}

func (x *RoomInfo) GetIsQualifiedPkTournament() bool {
	if x != nil {
		return x.IsQualifiedPkTournament
	}
	return false
}

func (x *RoomInfo) GetPkTournamentBeginTime() string {
	if x != nil {
		return x.PkTournamentBeginTime
	}
	return ""
}

func (x *RoomInfo) GetPkTounamentTip() string {
	if x != nil {
		return x.PkTounamentTip
	}
	return ""
}

func (x *RoomInfo) GetPartyType() PartyType {
	if x != nil {
		return x.PartyType
	}
	return PartyType_Six
}

func (x *RoomInfo) GetRoomTheme() RoomTheme {
	if x != nil {
		return x.RoomTheme
	}
	return RoomTheme_UNKNOWN_THEME
}

func (x *RoomInfo) GetFansTop1Status() bool {
	if x != nil {
		return x.FansTop1Status
	}
	return false
}

// ALPHA 用户进房间改造
// 用户属性,其他群发消息需要挂载或替换,历史消息会记录
type UserProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelPrivilege      bool   `protobuf:"varint,1,opt,name=levelPrivilege,proto3" json:"levelPrivilege,omitempty"`          // 是否是神秘人
	NobleGrade          int32  `protobuf:"varint,2,opt,name=nobleGrade,proto3" json:"nobleGrade,omitempty"`                  // 贵族类型 1 子爵 2 伯爵 3 侯爵 4 公爵 5 亲王 6 国王 7 皇帝
	Username            string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                       // 用户名字
	UserId              int64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`                          // 用户ID
	UserLevel           int32  `protobuf:"varint,5,opt,name=userLevel,proto3" json:"userLevel,omitempty"`                    // 用户等级
	MedalUrl            string `protobuf:"bytes,6,opt,name=medalUrl,proto3" json:"medalUrl,omitempty"`                       // 勋章
	GuardType           int32  `protobuf:"varint,7,opt,name=guardType,proto3" json:"guardType,omitempty"`                    // 守护类型 1 白银 2 黄金 3 钻石
	UserDefineEquipName string `protobuf:"bytes,8,opt,name=userDefineEquipName,proto3" json:"userDefineEquipName,omitempty"` // 守护名字
	Role                int32  `protobuf:"varint,9,opt,name=role,proto3" json:"role,omitempty"`                              // 用户角色 1 当前主播 2 房管 3 超管
	ManagerSubType      int32  `protobuf:"varint,10,opt,name=managerSubType,proto3" json:"managerSubType,omitempty"`         // 超管类型 1 超管 2 巡管 3 客服
	FansCardStatus      int32  `protobuf:"varint,11,opt,name=fansCardStatus,proto3" json:"fansCardStatus,omitempty"`         // 粉丝牌状态 0 未加入，1 加入未过期 2 加入已过期
	FansCardLevel       int32  `protobuf:"varint,12,opt,name=fansCardLevel,proto3" json:"fansCardLevel,omitempty"`           // 粉丝牌等级
	CorpType            int32  `protobuf:"varint,13,opt,name=corpType,proto3" json:"corpType,omitempty"`                     // 超级粉丝团类型
	HeadImg             string `protobuf:"bytes,14,opt,name=headImg,proto3" json:"headImg,omitempty"`                        // 用户头像
	NobilityMedalUrl    string `protobuf:"bytes,15,opt,name=nobilityMedalUrl,proto3" json:"nobilityMedalUrl,omitempty"`      // 贵族勋章地址
	GuardMedalType      int32  `protobuf:"varint,16,opt,name=guardMedalType,proto3" json:"guardMedalType,omitempty"`         // 空:不展示, 否则根据类型展示守护勋章
	VipGrade            int32  `protobuf:"varint,17,opt,name=vipGrade,proto3" json:"vipGrade,omitempty"`                     // vip等级
	VipMedalUrl         string `protobuf:"bytes,18,opt,name=vipMedalUrl,proto3" json:"vipMedalUrl,omitempty"`                // vip勋章
}

func (x *UserProp) Reset() {
	*x = UserProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProp) ProtoMessage() {}

func (x *UserProp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProp.ProtoReflect.Descriptor instead.
func (*UserProp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{22}
}

func (x *UserProp) GetLevelPrivilege() bool {
	if x != nil {
		return x.LevelPrivilege
	}
	return false
}

func (x *UserProp) GetNobleGrade() int32 {
	if x != nil {
		return x.NobleGrade
	}
	return 0
}

func (x *UserProp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserProp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserProp) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *UserProp) GetMedalUrl() string {
	if x != nil {
		return x.MedalUrl
	}
	return ""
}

func (x *UserProp) GetGuardType() int32 {
	if x != nil {
		return x.GuardType
	}
	return 0
}

func (x *UserProp) GetUserDefineEquipName() string {
	if x != nil {
		return x.UserDefineEquipName
	}
	return ""
}

func (x *UserProp) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *UserProp) GetManagerSubType() int32 {
	if x != nil {
		return x.ManagerSubType
	}
	return 0
}

func (x *UserProp) GetFansCardStatus() int32 {
	if x != nil {
		return x.FansCardStatus
	}
	return 0
}

func (x *UserProp) GetFansCardLevel() int32 {
	if x != nil {
		return x.FansCardLevel
	}
	return 0
}

func (x *UserProp) GetCorpType() int32 {
	if x != nil {
		return x.CorpType
	}
	return 0
}

func (x *UserProp) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *UserProp) GetNobilityMedalUrl() string {
	if x != nil {
		return x.NobilityMedalUrl
	}
	return ""
}

func (x *UserProp) GetGuardMedalType() int32 {
	if x != nil {
		return x.GuardMedalType
	}
	return 0
}

func (x *UserProp) GetVipGrade() int32 {
	if x != nil {
		return x.VipGrade
	}
	return 0
}

func (x *UserProp) GetVipMedalUrl() string {
	if x != nil {
		return x.VipMedalUrl
	}
	return ""
}

// ALPHA 用户进房间改造
// 进房间成功触发请求
type EnterRoomReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterRoomReadyReq) Reset() {
	*x = EnterRoomReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoomReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoomReadyReq) ProtoMessage() {}

func (x *EnterRoomReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoomReadyReq.ProtoReflect.Descriptor instead.
func (*EnterRoomReadyReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{23}
}

// ALPHA 用户进房间改造
// 进房间成功触发应答
type EnterRoomReadyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProp              *UserProp   `protobuf:"bytes,1,opt,name=userProp,proto3" json:"userProp,omitempty"`                                          // 用户属性
	UserStatus            int64       `protobuf:"varint,2,opt,name=userStatus,proto3" json:"userStatus,omitempty"`                                     // 0: 正常 1: 禁言 2: 被踢
	HorseEffectUrl        string      `protobuf:"bytes,3,opt,name=horseEffectUrl,proto3" json:"horseEffectUrl,omitempty"`                              // 坐骑地址
	ConcrenRealtion       bool        `protobuf:"varint,4,opt,name=concrenRealtion,proto3" json:"concrenRealtion,omitempty"`                           // 是否关注了主播
	UserCurrentExperience int64       `protobuf:"varint,5,opt,name=userCurrentExperience,proto3" json:"userCurrentExperience,omitempty"`               // 用户当前经验值
	HorseEffectName       string      `protobuf:"bytes,6,opt,name=horseEffectName,proto3" json:"horseEffectName,omitempty"`                            // 坐骑名称
	MAnchorRole           MAnchorRole `protobuf:"varint,7,opt,name=mAnchorRole,proto3,enum=pb_msg_live_room.MAnchorRole" json:"mAnchorRole,omitempty"` // 用户在多人方中的角色 多人房新增
	HorseEffectMp4Android string      `protobuf:"bytes,8,opt,name=horseEffectMp4Android,proto3" json:"horseEffectMp4Android,omitempty"`                // Android Mp4格式坐骑地址
	HorseEffectMp4Ios     string      `protobuf:"bytes,9,opt,name=horseEffectMp4Ios,proto3" json:"horseEffectMp4Ios,omitempty"`                        // IOS Mp4格式坐骑地址
}

func (x *EnterRoomReadyRsp) Reset() {
	*x = EnterRoomReadyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoomReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoomReadyRsp) ProtoMessage() {}

func (x *EnterRoomReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoomReadyRsp.ProtoReflect.Descriptor instead.
func (*EnterRoomReadyRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{24}
}

func (x *EnterRoomReadyRsp) GetUserProp() *UserProp {
	if x != nil {
		return x.UserProp
	}
	return nil
}

func (x *EnterRoomReadyRsp) GetUserStatus() int64 {
	if x != nil {
		return x.UserStatus
	}
	return 0
}

func (x *EnterRoomReadyRsp) GetHorseEffectUrl() string {
	if x != nil {
		return x.HorseEffectUrl
	}
	return ""
}

func (x *EnterRoomReadyRsp) GetConcrenRealtion() bool {
	if x != nil {
		return x.ConcrenRealtion
	}
	return false
}

func (x *EnterRoomReadyRsp) GetUserCurrentExperience() int64 {
	if x != nil {
		return x.UserCurrentExperience
	}
	return 0
}

func (x *EnterRoomReadyRsp) GetHorseEffectName() string {
	if x != nil {
		return x.HorseEffectName
	}
	return ""
}

func (x *EnterRoomReadyRsp) GetMAnchorRole() MAnchorRole {
	if x != nil {
		return x.MAnchorRole
	}
	return MAnchorRole_Audience
}

func (x *EnterRoomReadyRsp) GetHorseEffectMp4Android() string {
	if x != nil {
		return x.HorseEffectMp4Android
	}
	return ""
}

func (x *EnterRoomReadyRsp) GetHorseEffectMp4Ios() string {
	if x != nil {
		return x.HorseEffectMp4Ios
	}
	return ""
}

// ALPHA 用户进房间改造
// 房间消息: 观众进房间
type AudienceEnterRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProp              *UserProp `protobuf:"bytes,1,opt,name=userProp,proto3" json:"userProp,omitempty"`                           // 用户属性
	HorseEffectUrl        string    `protobuf:"bytes,2,opt,name=horseEffectUrl,proto3" json:"horseEffectUrl,omitempty"`               // 坐骑地址
	HeaderImageOriginal   string    `protobuf:"bytes,3,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`     // 用户的头像，飘屏的时候展示用
	HorseEffectName       string    `protobuf:"bytes,4,opt,name=horseEffectName,proto3" json:"horseEffectName,omitempty"`             // 坐骑名称
	HorseEffectMp4Android string    `protobuf:"bytes,5,opt,name=horseEffectMp4Android,proto3" json:"horseEffectMp4Android,omitempty"` // Android Mp4格式坐骑地址
	HorseEffectMp4Ios     string    `protobuf:"bytes,6,opt,name=horseEffectMp4Ios,proto3" json:"horseEffectMp4Ios,omitempty"`         // IOS Mp4格式坐骑地址
}

func (x *AudienceEnterRoom) Reset() {
	*x = AudienceEnterRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceEnterRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceEnterRoom) ProtoMessage() {}

func (x *AudienceEnterRoom) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceEnterRoom.ProtoReflect.Descriptor instead.
func (*AudienceEnterRoom) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{25}
}

func (x *AudienceEnterRoom) GetUserProp() *UserProp {
	if x != nil {
		return x.UserProp
	}
	return nil
}

func (x *AudienceEnterRoom) GetHorseEffectUrl() string {
	if x != nil {
		return x.HorseEffectUrl
	}
	return ""
}

func (x *AudienceEnterRoom) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *AudienceEnterRoom) GetHorseEffectName() string {
	if x != nil {
		return x.HorseEffectName
	}
	return ""
}

func (x *AudienceEnterRoom) GetHorseEffectMp4Android() string {
	if x != nil {
		return x.HorseEffectMp4Android
	}
	return ""
}

func (x *AudienceEnterRoom) GetHorseEffectMp4Ios() string {
	if x != nil {
		return x.HorseEffectMp4Ios
	}
	return ""
}

// ALPHA 发房间消息改造
// 房间消息: 弹幕消息
type RoomBarrage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProp            *UserProp         `protobuf:"bytes,1,opt,name=userProp,proto3" json:"userProp,omitempty"`                                                                               // 用户属性
	Msg                 string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                                                                         // 消息体
	Type                int32             `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                      // 弹幕类型 1 房间弹幕 2 全站弹幕
	HeaderImageOriginal string            `protobuf:"bytes,4,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`                                                         // 用户的头像，飘屏的时候展示用
	Exp                 map[string]string `protobuf:"bytes,5,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 拓展字段
	JumpEnabled         bool              `protobuf:"varint,6,opt,name=jumpEnabled,proto3" json:"jumpEnabled,omitempty"`                                                                        // 是否可以跳转
	JumpRoomId          int64             `protobuf:"varint,7,opt,name=jumpRoomId,proto3" json:"jumpRoomId,omitempty"`                                                                          // 跳转的房间id
}

func (x *RoomBarrage) Reset() {
	*x = RoomBarrage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBarrage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBarrage) ProtoMessage() {}

func (x *RoomBarrage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBarrage.ProtoReflect.Descriptor instead.
func (*RoomBarrage) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{26}
}

func (x *RoomBarrage) GetUserProp() *UserProp {
	if x != nil {
		return x.UserProp
	}
	return nil
}

func (x *RoomBarrage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RoomBarrage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RoomBarrage) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *RoomBarrage) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *RoomBarrage) GetJumpEnabled() bool {
	if x != nil {
		return x.JumpEnabled
	}
	return false
}

func (x *RoomBarrage) GetJumpRoomId() int64 {
	if x != nil {
		return x.JumpRoomId
	}
	return 0
}

// 房间消息: 普通消息
type RoomNormal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProp       *UserProp `protobuf:"bytes,1,opt,name=userProp,proto3" json:"userProp,omitempty"`                 // 用户属性
	Msg            string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                           // 消息体
	TargetUserName []string  `protobuf:"bytes,3,rep,name=targetUserName,proto3" json:"targetUserName,omitempty"`     // 被@的用户用户名列表
	TargetUserId   []int64   `protobuf:"varint,4,rep,packed,name=targetUserId,proto3" json:"targetUserId,omitempty"` // 被@的用户ID列表
}

func (x *RoomNormal) Reset() {
	*x = RoomNormal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomNormal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomNormal) ProtoMessage() {}

func (x *RoomNormal) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomNormal.ProtoReflect.Descriptor instead.
func (*RoomNormal) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{27}
}

func (x *RoomNormal) GetUserProp() *UserProp {
	if x != nil {
		return x.UserProp
	}
	return nil
}

func (x *RoomNormal) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RoomNormal) GetTargetUserName() []string {
	if x != nil {
		return x.TargetUserName
	}
	return nil
}

func (x *RoomNormal) GetTargetUserId() []int64 {
	if x != nil {
		return x.TargetUserId
	}
	return nil
}

// 房间消息
type RoomAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProp *UserProp         `protobuf:"bytes,1,opt,name=userProp,proto3" json:"userProp,omitempty"`
	Type     ACTION_TYPE       `protobuf:"varint,2,opt,name=type,proto3,enum=pb_msg_live_room.ACTION_TYPE" json:"type,omitempty"`
	Exp      map[string]string `protobuf:"bytes,3,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoomAction) Reset() {
	*x = RoomAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAction) ProtoMessage() {}

func (x *RoomAction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAction.ProtoReflect.Descriptor instead.
func (*RoomAction) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{28}
}

func (x *RoomAction) GetUserProp() *UserProp {
	if x != nil {
		return x.UserProp
	}
	return nil
}

func (x *RoomAction) GetType() ACTION_TYPE {
	if x != nil {
		return x.Type
	}
	return ACTION_TYPE_UNKNOWN
}

func (x *RoomAction) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

type UpdatedUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NobleGrade          int32  `protobuf:"varint,1,opt,name=nobleGrade,proto3" json:"nobleGrade,omitempty"`                  // 贵族类型 1 子爵 2 伯爵 3 侯爵 4 公爵 5 亲王 6 国王 7 皇帝
	Username            string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                       // 用户名字
	UserLevel           int32  `protobuf:"varint,3,opt,name=userLevel,proto3" json:"userLevel,omitempty"`                    // 用户等级
	MedalUrl            string `protobuf:"bytes,4,opt,name=medalUrl,proto3" json:"medalUrl,omitempty"`                       // 勋章
	GuardType           int32  `protobuf:"varint,5,opt,name=guardType,proto3" json:"guardType,omitempty"`                    // 守护类型 1 白银 2 黄金 3 钻石
	UserDefineEquipName string `protobuf:"bytes,6,opt,name=userDefineEquipName,proto3" json:"userDefineEquipName,omitempty"` // 守护名字
	Role                int32  `protobuf:"varint,7,opt,name=role,proto3" json:"role,omitempty"`                              // 用户角色 1 当前主播 2 房管 3 超管
	FansCardStatus      int32  `protobuf:"varint,8,opt,name=fansCardStatus,proto3" json:"fansCardStatus,omitempty"`          // 粉丝牌状态 0 未加入，1 加入未过期 2 加入已过期
	FansCardLevel       int32  `protobuf:"varint,9,opt,name=fansCardLevel,proto3" json:"fansCardLevel,omitempty"`            // 粉丝牌等级
	CorpType            int32  `protobuf:"varint,10,opt,name=corpType,proto3" json:"corpType,omitempty"`                     // 超级粉丝团类型
	GuardMedalType      int32  `protobuf:"varint,11,opt,name=guardMedalType,proto3" json:"guardMedalType,omitempty"`         // 空:不展示, 否则根据类型展示守护勋章
	VipGrade            int32  `protobuf:"varint,12,opt,name=vipGrade,proto3" json:"vipGrade,omitempty"`                     // vip等级
	VipMedalUrl         string `protobuf:"bytes,13,opt,name=vipMedalUrl,proto3" json:"vipMedalUrl,omitempty"`                // vip勋章
}

func (x *UpdatedUserInfo) Reset() {
	*x = UpdatedUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedUserInfo) ProtoMessage() {}

func (x *UpdatedUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedUserInfo.ProtoReflect.Descriptor instead.
func (*UpdatedUserInfo) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{29}
}

func (x *UpdatedUserInfo) GetNobleGrade() int32 {
	if x != nil {
		return x.NobleGrade
	}
	return 0
}

func (x *UpdatedUserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdatedUserInfo) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *UpdatedUserInfo) GetMedalUrl() string {
	if x != nil {
		return x.MedalUrl
	}
	return ""
}

func (x *UpdatedUserInfo) GetGuardType() int32 {
	if x != nil {
		return x.GuardType
	}
	return 0
}

func (x *UpdatedUserInfo) GetUserDefineEquipName() string {
	if x != nil {
		return x.UserDefineEquipName
	}
	return ""
}

func (x *UpdatedUserInfo) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *UpdatedUserInfo) GetFansCardStatus() int32 {
	if x != nil {
		return x.FansCardStatus
	}
	return 0
}

func (x *UpdatedUserInfo) GetFansCardLevel() int32 {
	if x != nil {
		return x.FansCardLevel
	}
	return 0
}

func (x *UpdatedUserInfo) GetCorpType() int32 {
	if x != nil {
		return x.CorpType
	}
	return 0
}

func (x *UpdatedUserInfo) GetGuardMedalType() int32 {
	if x != nil {
		return x.GuardMedalType
	}
	return 0
}

func (x *UpdatedUserInfo) GetVipGrade() int32 {
	if x != nil {
		return x.VipGrade
	}
	return 0
}

func (x *UpdatedUserInfo) GetVipMedalUrl() string {
	if x != nil {
		return x.VipMedalUrl
	}
	return ""
}

type UpdatedRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间相关
	// int64   roomId                  = 1;
	// int64   onLineNum               = 2;
	// int32   roomStatus              = 1; // 房间状态更新
	SwitchToBack bool `protobuf:"varint,1,opt,name=switchToBack,proto3" json:"switchToBack,omitempty"`
}

func (x *UpdatedRoomInfo) Reset() {
	*x = UpdatedRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedRoomInfo) ProtoMessage() {}

func (x *UpdatedRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedRoomInfo.ProtoReflect.Descriptor instead.
func (*UpdatedRoomInfo) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{30}
}

func (x *UpdatedRoomInfo) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

// JAVA告诉im当前top1团id
type Top1ChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType RoomType `protobuf:"varint,1,opt,name=roomType,proto3,enum=pb_msg_live_room.RoomType" json:"roomType,omitempty"`
	RoomId   int64    `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *Top1ChangeNotify) Reset() {
	*x = Top1ChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Top1ChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Top1ChangeNotify) ProtoMessage() {}

func (x *Top1ChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Top1ChangeNotify.ProtoReflect.Descriptor instead.
func (*Top1ChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{31}
}

func (x *Top1ChangeNotify) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_Unknow
}

func (x *Top1ChangeNotify) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type SetRoomFansTop1StatusNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top1Status bool `protobuf:"varint,1,opt,name=top1Status,proto3" json:"top1Status,omitempty"`
}

func (x *SetRoomFansTop1StatusNotify) Reset() {
	*x = SetRoomFansTop1StatusNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRoomFansTop1StatusNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoomFansTop1StatusNotify) ProtoMessage() {}

func (x *SetRoomFansTop1StatusNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoomFansTop1StatusNotify.ProtoReflect.Descriptor instead.
func (*SetRoomFansTop1StatusNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{32}
}

func (x *SetRoomFansTop1StatusNotify) GetTop1Status() bool {
	if x != nil {
		return x.Top1Status
	}
	return false
}

// ////////////////////////////////////////////////
// 交友房消息定义 开始
type MAnchorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64       `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	VideoState  int32       `protobuf:"varint,2,opt,name=videoState,proto3" json:"videoState,omitempty"`
	AudioState  int32       `protobuf:"varint,3,opt,name=audioState,proto3" json:"audioState,omitempty"`
	NickName    string      `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar      string      `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Score       int64       `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	MAnchorRole MAnchorRole `protobuf:"varint,7,opt,name=mAnchorRole,proto3,enum=pb_msg_live_room.MAnchorRole" json:"mAnchorRole,omitempty"`
	// int32 level = 8;
	PullStreamUrl          string       `protobuf:"bytes,8,opt,name=pullStreamUrl,proto3" json:"pullStreamUrl,omitempty"`
	ForbidState            int32        `protobuf:"varint,9,opt,name=forbidState,proto3" json:"forbidState,omitempty"`                                     // 0 正常  >0 被禁麦(目前被禁麦=1  以后可根据需要拓展, 如: 1 被主持人禁麦 2 被房主禁麦 3 被超管禁麦)
	Gender                 string       `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`                                               // 主播性别
	AuthAccess             string       `protobuf:"bytes,11,opt,name=authAccess,proto3" json:"authAccess,omitempty"`                                       // 实名认证
	Timestamp              int64        `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                        // 魅力值更新的时间
	StreamId               string       `protobuf:"bytes,13,opt,name=streamId,proto3" json:"streamId,omitempty"`                                           // 流ID
	StreamState            STREAM_STATE `protobuf:"varint,14,opt,name=streamState,proto3,enum=pb_msg_live_room.STREAM_STATE" json:"streamState,omitempty"` // 流状态
	PkScore                int64        `protobuf:"varint,15,opt,name=pkScore,proto3" json:"pkScore,omitempty"`                                            // PK贡献值
	UserOnAnchorPendantUrl string       `protobuf:"bytes,16,opt,name=userOnAnchorPendantUrl,proto3" json:"userOnAnchorPendantUrl,omitempty"`               // 用户麦上挂件
}

func (x *MAnchorData) Reset() {
	*x = MAnchorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAnchorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAnchorData) ProtoMessage() {}

func (x *MAnchorData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAnchorData.ProtoReflect.Descriptor instead.
func (*MAnchorData) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{33}
}

func (x *MAnchorData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MAnchorData) GetVideoState() int32 {
	if x != nil {
		return x.VideoState
	}
	return 0
}

func (x *MAnchorData) GetAudioState() int32 {
	if x != nil {
		return x.AudioState
	}
	return 0
}

func (x *MAnchorData) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *MAnchorData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MAnchorData) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MAnchorData) GetMAnchorRole() MAnchorRole {
	if x != nil {
		return x.MAnchorRole
	}
	return MAnchorRole_Audience
}

func (x *MAnchorData) GetPullStreamUrl() string {
	if x != nil {
		return x.PullStreamUrl
	}
	return ""
}

func (x *MAnchorData) GetForbidState() int32 {
	if x != nil {
		return x.ForbidState
	}
	return 0
}

func (x *MAnchorData) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MAnchorData) GetAuthAccess() string {
	if x != nil {
		return x.AuthAccess
	}
	return ""
}

func (x *MAnchorData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MAnchorData) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *MAnchorData) GetStreamState() STREAM_STATE {
	if x != nil {
		return x.StreamState
	}
	return STREAM_STATE_CLOSED
}

func (x *MAnchorData) GetPkScore() int64 {
	if x != nil {
		return x.PkScore
	}
	return 0
}

func (x *MAnchorData) GetUserOnAnchorPendantUrl() string {
	if x != nil {
		return x.UserOnAnchorPendantUrl
	}
	return ""
}

type MWaitUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Level    int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Loc      int32  `protobuf:"varint,5,opt,name=loc,proto3" json:"loc,omitempty"`
}

func (x *MWaitUser) Reset() {
	*x = MWaitUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MWaitUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MWaitUser) ProtoMessage() {}

func (x *MWaitUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MWaitUser.ProtoReflect.Descriptor instead.
func (*MWaitUser) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{34}
}

func (x *MWaitUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MWaitUser) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *MWaitUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MWaitUser) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MWaitUser) GetLoc() int32 {
	if x != nil {
		return x.Loc
	}
	return 0
}

type MAnchorScoreChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`         // 贡献值变化通知
	ActorId   int64 `protobuf:"varint,2,opt,name=actorId,proto3" json:"actorId,omitempty"`     // 被送用户Id
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 魅力值更新的时间
}

func (x *MAnchorScoreChangeNotify) Reset() {
	*x = MAnchorScoreChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAnchorScoreChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAnchorScoreChangeNotify) ProtoMessage() {}

func (x *MAnchorScoreChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAnchorScoreChangeNotify.ProtoReflect.Descriptor instead.
func (*MAnchorScoreChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{35}
}

func (x *MAnchorScoreChangeNotify) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MAnchorScoreChangeNotify) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *MAnchorScoreChangeNotify) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 贡献榜变化通知
type BillboardChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*Billboard `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *BillboardChangeNotify) Reset() {
	*x = BillboardChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillboardChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillboardChangeNotify) ProtoMessage() {}

func (x *BillboardChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillboardChangeNotify.ProtoReflect.Descriptor instead.
func (*BillboardChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{36}
}

func (x *BillboardChangeNotify) GetUsers() []*Billboard {
	if x != nil {
		return x.Users
	}
	return nil
}

type Billboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorGrade          int32  `protobuf:"varint,1,opt,name=actorGrade,proto3" json:"actorGrade,omitempty"`
	BigImageOriginal    string `protobuf:"bytes,2,opt,name=bigImageOriginal,proto3" json:"bigImageOriginal,omitempty"`
	HeaderImageOriginal string `protobuf:"bytes,3,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`
	IsLiving            bool   `protobuf:"varint,4,opt,name=isLiving,proto3" json:"isLiving,omitempty"`
	LevelPrivilegeOpen  bool   `protobuf:"varint,5,opt,name=levelPrivilegeOpen,proto3" json:"levelPrivilegeOpen,omitempty"`
	NickName            string `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Score               int64  `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	UserId              int64  `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"`
	UserLevel           string `protobuf:"bytes,9,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
}

func (x *Billboard) Reset() {
	*x = Billboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Billboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Billboard) ProtoMessage() {}

func (x *Billboard) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Billboard.ProtoReflect.Descriptor instead.
func (*Billboard) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{37}
}

func (x *Billboard) GetActorGrade() int32 {
	if x != nil {
		return x.ActorGrade
	}
	return 0
}

func (x *Billboard) GetBigImageOriginal() string {
	if x != nil {
		return x.BigImageOriginal
	}
	return ""
}

func (x *Billboard) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *Billboard) GetIsLiving() bool {
	if x != nil {
		return x.IsLiving
	}
	return false
}

func (x *Billboard) GetLevelPrivilegeOpen() bool {
	if x != nil {
		return x.LevelPrivilegeOpen
	}
	return false
}

func (x *Billboard) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Billboard) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Billboard) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Billboard) GetUserLevel() string {
	if x != nil {
		return x.UserLevel
	}
	return ""
}

// 位置变化通知
type MAnchorLocChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chair *MAnchorData `protobuf:"bytes,1,opt,name=chair,proto3" json:"chair,omitempty"`
	// repeated MAnchorData Bentch = 2;
	Bentch map[int32]*MAnchorData `protobuf:"bytes,2,rep,name=bentch,proto3" json:"bentch,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MAnchorLocChangeNotify) Reset() {
	*x = MAnchorLocChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAnchorLocChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAnchorLocChangeNotify) ProtoMessage() {}

func (x *MAnchorLocChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAnchorLocChangeNotify.ProtoReflect.Descriptor instead.
func (*MAnchorLocChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{38}
}

func (x *MAnchorLocChangeNotify) GetChair() *MAnchorData {
	if x != nil {
		return x.Chair
	}
	return nil
}

func (x *MAnchorLocChangeNotify) GetBentch() map[int32]*MAnchorData {
	if x != nil {
		return x.Bentch
	}
	return nil
}

// 排队上麦列表变化通知
// 位置变化通知
type WaitBenchListChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitQue []*MWaitUser `protobuf:"bytes,1,rep,name=waitQue,proto3" json:"waitQue,omitempty"`
}

func (x *WaitBenchListChangeNotify) Reset() {
	*x = WaitBenchListChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitBenchListChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitBenchListChangeNotify) ProtoMessage() {}

func (x *WaitBenchListChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitBenchListChangeNotify.ProtoReflect.Descriptor instead.
func (*WaitBenchListChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{39}
}

func (x *WaitBenchListChangeNotify) GetWaitQue() []*MWaitUser {
	if x != nil {
		return x.WaitQue
	}
	return nil
}

// 自己下麦
type OffAnchorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OffAnchorReq) Reset() {
	*x = OffAnchorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffAnchorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffAnchorReq) ProtoMessage() {}

func (x *OffAnchorReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffAnchorReq.ProtoReflect.Descriptor instead.
func (*OffAnchorReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{40}
}

type OffAnchorRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *OffAnchorRsp) Reset() {
	*x = OffAnchorRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffAnchorRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffAnchorRsp) ProtoMessage() {}

func (x *OffAnchorRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffAnchorRsp.ProtoReflect.Descriptor instead.
func (*OffAnchorRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{41}
}

func (x *OffAnchorRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 请求主持
type OnChairReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnChairReq) Reset() {
	*x = OnChairReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnChairReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnChairReq) ProtoMessage() {}

func (x *OnChairReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnChairReq.ProtoReflect.Descriptor instead.
func (*OnChairReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{42}
}

type OnChairRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
	ErrDesc string         `protobuf:"bytes,2,opt,name=errDesc,proto3" json:"errDesc,omitempty"`
}

func (x *OnChairRsp) Reset() {
	*x = OnChairRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnChairRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnChairRsp) ProtoMessage() {}

func (x *OnChairRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnChairRsp.ProtoReflect.Descriptor instead.
func (*OnChairRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{43}
}

func (x *OnChairRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

func (x *OnChairRsp) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

// 申请连麦
type OnAnchorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc int32 `protobuf:"varint,1,opt,name=loc,proto3" json:"loc,omitempty"` // 麦位
}

func (x *OnAnchorReq) Reset() {
	*x = OnAnchorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnAnchorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAnchorReq) ProtoMessage() {}

func (x *OnAnchorReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAnchorReq.ProtoReflect.Descriptor instead.
func (*OnAnchorReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{44}
}

func (x *OnAnchorReq) GetLoc() int32 {
	if x != nil {
		return x.Loc
	}
	return 0
}

type OnAnchorRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int32 AnchorLoc = 1; // 上播位置 0~5 为位置， -1 为在等待列表中
	Result  pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
	ErrDesc string         `protobuf:"bytes,2,opt,name=errDesc,proto3" json:"errDesc,omitempty"`
}

func (x *OnAnchorRsp) Reset() {
	*x = OnAnchorRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnAnchorRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAnchorRsp) ProtoMessage() {}

func (x *OnAnchorRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAnchorRsp.ProtoReflect.Descriptor instead.
func (*OnAnchorRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{45}
}

func (x *OnAnchorRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

func (x *OnAnchorRsp) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

// 主持人上麦请求者
type ChairManPutOnAnchorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimId int64 `protobuf:"varint,1,opt,name=aimId,proto3" json:"aimId,omitempty"`
}

func (x *ChairManPutOnAnchorReq) Reset() {
	*x = ChairManPutOnAnchorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManPutOnAnchorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManPutOnAnchorReq) ProtoMessage() {}

func (x *ChairManPutOnAnchorReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManPutOnAnchorReq.ProtoReflect.Descriptor instead.
func (*ChairManPutOnAnchorReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{46}
}

func (x *ChairManPutOnAnchorReq) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

type ChairManPutOnAnchorRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimId  int64          `protobuf:"varint,1,opt,name=aimId,proto3" json:"aimId,omitempty"`
	Result pb_pub.ErrCode `protobuf:"varint,2,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *ChairManPutOnAnchorRsp) Reset() {
	*x = ChairManPutOnAnchorRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManPutOnAnchorRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManPutOnAnchorRsp) ProtoMessage() {}

func (x *ChairManPutOnAnchorRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManPutOnAnchorRsp.ProtoReflect.Descriptor instead.
func (*ChairManPutOnAnchorRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{47}
}

func (x *ChairManPutOnAnchorRsp) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

func (x *ChairManPutOnAnchorRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 上播通知到客户端
type ChairManPutOnAnchorNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorLoc int32 `protobuf:"varint,1,opt,name=anchorLoc,proto3" json:"anchorLoc,omitempty"`
	OptId     int64 `protobuf:"varint,2,opt,name=optId,proto3" json:"optId,omitempty"`
	AimId     int64 `protobuf:"varint,3,opt,name=aimId,proto3" json:"aimId,omitempty"`
}

func (x *ChairManPutOnAnchorNotify) Reset() {
	*x = ChairManPutOnAnchorNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManPutOnAnchorNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManPutOnAnchorNotify) ProtoMessage() {}

func (x *ChairManPutOnAnchorNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManPutOnAnchorNotify.ProtoReflect.Descriptor instead.
func (*ChairManPutOnAnchorNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{48}
}

func (x *ChairManPutOnAnchorNotify) GetAnchorLoc() int32 {
	if x != nil {
		return x.AnchorLoc
	}
	return 0
}

func (x *ChairManPutOnAnchorNotify) GetOptId() int64 {
	if x != nil {
		return x.OptId
	}
	return 0
}

func (x *ChairManPutOnAnchorNotify) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

// 邀请上麦
type ChairManInviteAudienceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteeId int64 `protobuf:"varint,1,opt,name=inviteeId,proto3" json:"inviteeId,omitempty"` // 被邀请者id
	InviterId int64 `protobuf:"varint,2,opt,name=inviterId,proto3" json:"inviterId,omitempty"` // 邀请者id
	RoomId    int64 `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`       // 邀请房间id
}

func (x *ChairManInviteAudienceReq) Reset() {
	*x = ChairManInviteAudienceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManInviteAudienceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManInviteAudienceReq) ProtoMessage() {}

func (x *ChairManInviteAudienceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManInviteAudienceReq.ProtoReflect.Descriptor instead.
func (*ChairManInviteAudienceReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{49}
}

func (x *ChairManInviteAudienceReq) GetInviteeId() int64 {
	if x != nil {
		return x.InviteeId
	}
	return 0
}

func (x *ChairManInviteAudienceReq) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *ChairManInviteAudienceReq) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

type ChairManInviteAudienceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 inviteeId = 1;
	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *ChairManInviteAudienceRsp) Reset() {
	*x = ChairManInviteAudienceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManInviteAudienceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManInviteAudienceRsp) ProtoMessage() {}

func (x *ChairManInviteAudienceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManInviteAudienceRsp.ProtoReflect.Descriptor instead.
func (*ChairManInviteAudienceRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{50}
}

func (x *ChairManInviteAudienceRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 客户端加入3T房间成功后发通知到服务端
// Result = ErrCode_SUCCESS 则同步sei到三T， 否则为推流失败，下麦该用户
type Enter3TChannelResultNotifyToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=Result,proto3,enum=pb_pub.ErrCode" json:"Result,omitempty"` // 0 进入成功，其他失败原因
}

func (x *Enter3TChannelResultNotifyToServer) Reset() {
	*x = Enter3TChannelResultNotifyToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enter3TChannelResultNotifyToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enter3TChannelResultNotifyToServer) ProtoMessage() {}

func (x *Enter3TChannelResultNotifyToServer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enter3TChannelResultNotifyToServer.ProtoReflect.Descriptor instead.
func (*Enter3TChannelResultNotifyToServer) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{51}
}

func (x *Enter3TChannelResultNotifyToServer) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 邀请应答
type ChairManInviteAudienceAnswerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteeId  int64      `protobuf:"varint,1,opt,name=inviteeId,proto3" json:"inviteeId,omitempty"` // 被邀请者i
	InviterId  int64      `protobuf:"varint,2,opt,name=inviterId,proto3" json:"inviterId,omitempty"` // 邀请者id
	AnswerType AnswerType `protobuf:"varint,3,opt,name=answerType,proto3,enum=pb_msg_live_room.AnswerType" json:"answerType,omitempty"`
}

func (x *ChairManInviteAudienceAnswerReq) Reset() {
	*x = ChairManInviteAudienceAnswerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManInviteAudienceAnswerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManInviteAudienceAnswerReq) ProtoMessage() {}

func (x *ChairManInviteAudienceAnswerReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManInviteAudienceAnswerReq.ProtoReflect.Descriptor instead.
func (*ChairManInviteAudienceAnswerReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{52}
}

func (x *ChairManInviteAudienceAnswerReq) GetInviteeId() int64 {
	if x != nil {
		return x.InviteeId
	}
	return 0
}

func (x *ChairManInviteAudienceAnswerReq) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *ChairManInviteAudienceAnswerReq) GetAnswerType() AnswerType {
	if x != nil {
		return x.AnswerType
	}
	return AnswerType_Agree
}

type ChairManInviteAudienceAnswerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorLoc int32          `protobuf:"varint,1,opt,name=anchorLoc,proto3" json:"anchorLoc,omitempty"` // 上播位置 0~5 为位置， -1 为在等待列表中
	Result    pb_pub.ErrCode `protobuf:"varint,2,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *ChairManInviteAudienceAnswerRsp) Reset() {
	*x = ChairManInviteAudienceAnswerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManInviteAudienceAnswerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManInviteAudienceAnswerRsp) ProtoMessage() {}

func (x *ChairManInviteAudienceAnswerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManInviteAudienceAnswerRsp.ProtoReflect.Descriptor instead.
func (*ChairManInviteAudienceAnswerRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{53}
}

func (x *ChairManInviteAudienceAnswerRsp) GetAnchorLoc() int32 {
	if x != nil {
		return x.AnchorLoc
	}
	return 0
}

func (x *ChairManInviteAudienceAnswerRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 主持人下麦副播
type ChairManOffAnchorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimId int64 `protobuf:"varint,1,opt,name=aimId,proto3" json:"aimId,omitempty"`
}

func (x *ChairManOffAnchorReq) Reset() {
	*x = ChairManOffAnchorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManOffAnchorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManOffAnchorReq) ProtoMessage() {}

func (x *ChairManOffAnchorReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManOffAnchorReq.ProtoReflect.Descriptor instead.
func (*ChairManOffAnchorReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{54}
}

func (x *ChairManOffAnchorReq) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

type ChairManOffAnchorRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 aimId = 1;
	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *ChairManOffAnchorRsp) Reset() {
	*x = ChairManOffAnchorRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManOffAnchorRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManOffAnchorRsp) ProtoMessage() {}

func (x *ChairManOffAnchorRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManOffAnchorRsp.ProtoReflect.Descriptor instead.
func (*ChairManOffAnchorRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{55}
}

func (x *ChairManOffAnchorRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

// 下播通知到客户端
type ChairManOffAnchorNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimId int64 `protobuf:"varint,1,opt,name=aimId,proto3" json:"aimId,omitempty"`
}

func (x *ChairManOffAnchorNotify) Reset() {
	*x = ChairManOffAnchorNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairManOffAnchorNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairManOffAnchorNotify) ProtoMessage() {}

func (x *ChairManOffAnchorNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairManOffAnchorNotify.ProtoReflect.Descriptor instead.
func (*ChairManOffAnchorNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{56}
}

func (x *ChairManOffAnchorNotify) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

// 场景恢复
type RecoverLiveRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecoverLiveRoomReq) Reset() {
	*x = RecoverLiveRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverLiveRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverLiveRoomReq) ProtoMessage() {}

func (x *RecoverLiveRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverLiveRoomReq.ProtoReflect.Descriptor instead.
func (*RecoverLiveRoomReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{57}
}

type RecoverLiveRoomRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pb_pub.ErrCode `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *RecoverLiveRoomRsp) Reset() {
	*x = RecoverLiveRoomRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverLiveRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverLiveRoomRsp) ProtoMessage() {}

func (x *RecoverLiveRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverLiveRoomRsp.ProtoReflect.Descriptor instead.
func (*RecoverLiveRoomRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{58}
}

func (x *RecoverLiveRoomRsp) GetResult() pb_pub.ErrCode {
	if x != nil {
		return x.Result
	}
	return pb_pub.ErrCode(0)
}

type VideoStateChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"` // 0 关 1 开
}

func (x *VideoStateChangeNotify) Reset() {
	*x = VideoStateChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStateChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStateChangeNotify) ProtoMessage() {}

func (x *VideoStateChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStateChangeNotify.ProtoReflect.Descriptor instead.
func (*VideoStateChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{59}
}

func (x *VideoStateChangeNotify) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type AudioStateChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"` // 0 关 1 开
}

func (x *AudioStateChangeNotify) Reset() {
	*x = AudioStateChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioStateChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStateChangeNotify) ProtoMessage() {}

func (x *AudioStateChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStateChangeNotify.ProtoReflect.Descriptor instead.
func (*AudioStateChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{60}
}

func (x *AudioStateChangeNotify) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

// 发表情
type RoomMsgExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionId int32             `protobuf:"varint,1,opt,name=expressionId,proto3" json:"expressionId,omitempty"`
	Loc          int32             `protobuf:"varint,2,opt,name=loc,proto3" json:"loc,omitempty"`
	Exp          map[string]string `protobuf:"bytes,3,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoomMsgExpression) Reset() {
	*x = RoomMsgExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomMsgExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomMsgExpression) ProtoMessage() {}

func (x *RoomMsgExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomMsgExpression.ProtoReflect.Descriptor instead.
func (*RoomMsgExpression) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{61}
}

func (x *RoomMsgExpression) GetExpressionId() int32 {
	if x != nil {
		return x.ExpressionId
	}
	return 0
}

func (x *RoomMsgExpression) GetLoc() int32 {
	if x != nil {
		return x.Loc
	}
	return 0
}

func (x *RoomMsgExpression) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

type KickUserOutNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` // 被踢用户ID
}

func (x *KickUserOutNotify) Reset() {
	*x = KickUserOutNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickUserOutNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserOutNotify) ProtoMessage() {}

func (x *KickUserOutNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserOutNotify.ProtoReflect.Descriptor instead.
func (*KickUserOutNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{62}
}

func (x *KickUserOutNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 禁麦
type ForbidStateChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AimId int64 `protobuf:"varint,1,opt,name=aimId,proto3" json:"aimId,omitempty"` // 被禁用户ID
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"` // 状态
}

func (x *ForbidStateChangeNotify) Reset() {
	*x = ForbidStateChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidStateChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidStateChangeNotify) ProtoMessage() {}

func (x *ForbidStateChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidStateChangeNotify.ProtoReflect.Descriptor instead.
func (*ForbidStateChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{63}
}

func (x *ForbidStateChangeNotify) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

func (x *ForbidStateChangeNotify) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

// 多主播礼物消息
type LiveGiftNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    *UserProp               `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RoomType  RoomType                `protobuf:"varint,2,opt,name=roomType,proto3,enum=pb_msg_live_room.RoomType" json:"roomType,omitempty"`
	SendType  LiveGiftNotify_SendType `protobuf:"varint,3,opt,name=sendType,proto3,enum=pb_msg_live_room.LiveGiftNotify_SendType" json:"sendType,omitempty"`
	Receivers []*Receiver             `protobuf:"bytes,4,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Gift      *LiveGift               `protobuf:"bytes,5,opt,name=gift,proto3" json:"gift,omitempty"`
}

func (x *LiveGiftNotify) Reset() {
	*x = LiveGiftNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGiftNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGiftNotify) ProtoMessage() {}

func (x *LiveGiftNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGiftNotify.ProtoReflect.Descriptor instead.
func (*LiveGiftNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{64}
}

func (x *LiveGiftNotify) GetSender() *UserProp {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *LiveGiftNotify) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_Unknow
}

func (x *LiveGiftNotify) GetSendType() LiveGiftNotify_SendType {
	if x != nil {
		return x.SendType
	}
	return LiveGiftNotify_SINGLE
}

func (x *LiveGiftNotify) GetReceivers() []*Receiver {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *LiveGiftNotify) GetGift() *LiveGift {
	if x != nil {
		return x.Gift
	}
	return nil
}

type Receiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId             int64             `protobuf:"varint,1,opt,name=actorId,proto3" json:"actorId,omitempty"`                                                                                // 收礼人ID
	ActorName           string            `protobuf:"bytes,2,opt,name=actorName,proto3" json:"actorName,omitempty"`                                                                             // 收礼人名字
	Exp                 map[string]string `protobuf:"bytes,3,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 礼物中不同主播的个性化数据拓展
	HeaderImageOriginal string            `protobuf:"bytes,4,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`                                                         // 收礼人头像
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{65}
}

func (x *Receiver) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *Receiver) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *Receiver) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *Receiver) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

type LiveGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId                 int64             `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`                                                                                  // 礼物ID
	GiftNumber             int64             `protobuf:"varint,2,opt,name=giftNumber,proto3" json:"giftNumber,omitempty"`                                                                          // 送礼数量
	GiftType               int32             `protobuf:"varint,3,opt,name=giftType,proto3" json:"giftType,omitempty"`                                                                              // 礼物类型 0：普通礼物 1：幸运礼物 2：福袋 3：钓鱼 4：幸运补偿
	GiftConfLastUpdateTime int64             `protobuf:"varint,4,opt,name=giftConfLastUpdateTime,proto3" json:"giftConfLastUpdateTime,omitempty"`                                                  // 缓存时间
	BatteryType            int32             `protobuf:"varint,5,opt,name=batteryType,proto3" json:"batteryType,omitempty"`                                                                        // 单词连击的个数
	BatteryTypeList        []int64           `protobuf:"varint,6,rep,packed,name=batteryTypeList,proto3" json:"batteryTypeList,omitempty"`                                                         // 每次连击的个数数组
	Exp                    map[string]string `protobuf:"bytes,7,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展字段
}

func (x *LiveGift) Reset() {
	*x = LiveGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGift) ProtoMessage() {}

func (x *LiveGift) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGift.ProtoReflect.Descriptor instead.
func (*LiveGift) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{66}
}

func (x *LiveGift) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *LiveGift) GetGiftNumber() int64 {
	if x != nil {
		return x.GiftNumber
	}
	return 0
}

func (x *LiveGift) GetGiftType() int32 {
	if x != nil {
		return x.GiftType
	}
	return 0
}

func (x *LiveGift) GetGiftConfLastUpdateTime() int64 {
	if x != nil {
		return x.GiftConfLastUpdateTime
	}
	return 0
}

func (x *LiveGift) GetBatteryType() int32 {
	if x != nil {
		return x.BatteryType
	}
	return 0
}

func (x *LiveGift) GetBatteryTypeList() []int64 {
	if x != nil {
		return x.BatteryTypeList
	}
	return nil
}

func (x *LiveGift) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

// 多主播魅力值更新
type MultiAnchorScoreChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchors []*MultiAnchorScoreChangeNotify_Anchor `protobuf:"bytes,1,rep,name=anchors,proto3" json:"anchors,omitempty"`
}

func (x *MultiAnchorScoreChangeNotify) Reset() {
	*x = MultiAnchorScoreChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnchorScoreChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnchorScoreChangeNotify) ProtoMessage() {}

func (x *MultiAnchorScoreChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnchorScoreChangeNotify.ProtoReflect.Descriptor instead.
func (*MultiAnchorScoreChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{67}
}

func (x *MultiAnchorScoreChangeNotify) GetAnchors() []*MultiAnchorScoreChangeNotify_Anchor {
	if x != nil {
		return x.Anchors
	}
	return nil
}

// 金主变更通知
type InvestorChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName            string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	HeaderImageOriginal string `protobuf:"bytes,3,opt,name=headerImageOriginal,proto3" json:"headerImageOriginal,omitempty"`
	LevelPrivilegeOpen  bool   `protobuf:"varint,4,opt,name=levelPrivilegeOpen,proto3" json:"levelPrivilegeOpen,omitempty"`
}

func (x *InvestorChangeNotify) Reset() {
	*x = InvestorChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestorChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestorChangeNotify) ProtoMessage() {}

func (x *InvestorChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestorChangeNotify.ProtoReflect.Descriptor instead.
func (*InvestorChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{68}
}

func (x *InvestorChangeNotify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InvestorChangeNotify) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *InvestorChangeNotify) GetHeaderImageOriginal() string {
	if x != nil {
		return x.HeaderImageOriginal
	}
	return ""
}

func (x *InvestorChangeNotify) GetLevelPrivilegeOpen() bool {
	if x != nil {
		return x.LevelPrivilegeOpen
	}
	return false
}

type BackgroundChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicBackgroundImage string `protobuf:"bytes,1,opt,name=dynamicBackgroundImage,proto3" json:"dynamicBackgroundImage,omitempty"`
}

func (x *BackgroundChangeNotify) Reset() {
	*x = BackgroundChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundChangeNotify) ProtoMessage() {}

func (x *BackgroundChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundChangeNotify.ProtoReflect.Descriptor instead.
func (*BackgroundChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{69}
}

func (x *BackgroundChangeNotify) GetDynamicBackgroundImage() string {
	if x != nil {
		return x.DynamicBackgroundImage
	}
	return ""
}

type HandDrawnGiftNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender       *UserProp                            `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RoomType     RoomType                             `protobuf:"varint,2,opt,name=roomType,proto3,enum=pb_msg_live_room.RoomType" json:"roomType,omitempty"`
	SendType     HandDrawnGiftNotify_SendType         `protobuf:"varint,3,opt,name=sendType,proto3,enum=pb_msg_live_room.HandDrawnGiftNotify_SendType" json:"sendType,omitempty"`
	Receivers    []*Receiver                          `protobuf:"bytes,4,rep,name=receivers,proto3" json:"receivers,omitempty"`
	ScreenWidth  int64                                `protobuf:"varint,5,opt,name=screenWidth,proto3" json:"screenWidth,omitempty"`
	ScreenHeight int64                                `protobuf:"varint,6,opt,name=screenHeight,proto3" json:"screenHeight,omitempty"`
	Gifts        []*HandDrawnGiftNotify_HandDrawnGift `protobuf:"bytes,7,rep,name=gifts,proto3" json:"gifts,omitempty"`
}

func (x *HandDrawnGiftNotify) Reset() {
	*x = HandDrawnGiftNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandDrawnGiftNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandDrawnGiftNotify) ProtoMessage() {}

func (x *HandDrawnGiftNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandDrawnGiftNotify.ProtoReflect.Descriptor instead.
func (*HandDrawnGiftNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{70}
}

func (x *HandDrawnGiftNotify) GetSender() *UserProp {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *HandDrawnGiftNotify) GetRoomType() RoomType {
	if x != nil {
		return x.RoomType
	}
	return RoomType_Unknow
}

func (x *HandDrawnGiftNotify) GetSendType() HandDrawnGiftNotify_SendType {
	if x != nil {
		return x.SendType
	}
	return HandDrawnGiftNotify_SINGLE
}

func (x *HandDrawnGiftNotify) GetReceivers() []*Receiver {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *HandDrawnGiftNotify) GetScreenWidth() int64 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *HandDrawnGiftNotify) GetScreenHeight() int64 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

func (x *HandDrawnGiftNotify) GetGifts() []*HandDrawnGiftNotify_HandDrawnGift {
	if x != nil {
		return x.Gifts
	}
	return nil
}

// 流状态通知
type StreamStateChangeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    STREAM_STATE `protobuf:"varint,1,opt,name=state,proto3,enum=pb_msg_live_room.STREAM_STATE" json:"state,omitempty"`
	StreamId string       `protobuf:"bytes,2,opt,name=streamId,proto3" json:"streamId,omitempty"`
}

func (x *StreamStateChangeNotify) Reset() {
	*x = StreamStateChangeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStateChangeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStateChangeNotify) ProtoMessage() {}

func (x *StreamStateChangeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStateChangeNotify.ProtoReflect.Descriptor instead.
func (*StreamStateChangeNotify) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{71}
}

func (x *StreamStateChangeNotify) GetState() STREAM_STATE {
	if x != nil {
		return x.State
	}
	return STREAM_STATE_CLOSED
}

func (x *StreamStateChangeNotify) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type MultiAnchorScoreChangeNotify_Anchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`         // 魅力值
	ActorId   int64 `protobuf:"varint,2,opt,name=actorId,proto3" json:"actorId,omitempty"`     // 主播Id
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 魅力值更新的时间
}

func (x *MultiAnchorScoreChangeNotify_Anchor) Reset() {
	*x = MultiAnchorScoreChangeNotify_Anchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAnchorScoreChangeNotify_Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAnchorScoreChangeNotify_Anchor) ProtoMessage() {}

func (x *MultiAnchorScoreChangeNotify_Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAnchorScoreChangeNotify_Anchor.ProtoReflect.Descriptor instead.
func (*MultiAnchorScoreChangeNotify_Anchor) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{67, 0}
}

func (x *MultiAnchorScoreChangeNotify_Anchor) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MultiAnchorScoreChangeNotify_Anchor) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *MultiAnchorScoreChangeNotify_Anchor) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type HandDrawnGiftNotify_HandDrawnGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftId                 int32     `protobuf:"varint,1,opt,name=giftId,proto3" json:"giftId,omitempty"`
	Path                   []float32 `protobuf:"fixed32,2,rep,packed,name=path,proto3" json:"path,omitempty"`
	GiftConfLastUpdateTime int64     `protobuf:"varint,3,opt,name=giftConfLastUpdateTime,proto3" json:"giftConfLastUpdateTime,omitempty"`
}

func (x *HandDrawnGiftNotify_HandDrawnGift) Reset() {
	*x = HandDrawnGiftNotify_HandDrawnGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_live_room_live_room_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandDrawnGiftNotify_HandDrawnGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandDrawnGiftNotify_HandDrawnGift) ProtoMessage() {}

func (x *HandDrawnGiftNotify_HandDrawnGift) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_live_room_live_room_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandDrawnGiftNotify_HandDrawnGift.ProtoReflect.Descriptor instead.
func (*HandDrawnGiftNotify_HandDrawnGift) Descriptor() ([]byte, []int) {
	return file_pb_msg_live_room_live_room_proto_rawDescGZIP(), []int{70, 0}
}

func (x *HandDrawnGiftNotify_HandDrawnGift) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *HandDrawnGiftNotify_HandDrawnGift) GetPath() []float32 {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *HandDrawnGiftNotify_HandDrawnGift) GetGiftConfLastUpdateTime() int64 {
	if x != nil {
		return x.GiftConfLastUpdateTime
	}
	return 0
}

var File_pb_msg_live_room_live_room_proto protoreflect.FileDescriptor

var file_pb_msg_live_room_live_room_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x1a, 0x13, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x79, 0x78, 0x5f,
	0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2f, 0x79, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf0, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x0b,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x73, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70,
	0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x22, 0x5a, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x59, 0x58, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x79, 0x78, 0x4d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x59, 0x58,
	0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x79, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73,
	0x67, 0x53, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x59, 0x58, 0x43,
	0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x59, 0x58, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x59, 0x58,
	0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6e,
	0x12, 0x3e, 0x0a, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x6e, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x59, 0x58, 0x43, 0x6f,
	0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x73, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x59, 0x58, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x59, 0x58, 0x43, 0x6f,
	0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x6e,
	0x22, 0x93, 0x01, 0x0a, 0x0d, 0x50, 0x4b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x4b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x50, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x03, 0x0a, 0x0c, 0x50, 0x4b, 0x50, 0x52, 0x4f,
	0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x69, 0x66,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x67, 0x69, 0x66, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x22, 0x58, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xd9, 0x0a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64,
	0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50,
	0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x70,
	0x6b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6b, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6b, 0x54, 0x6f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6b, 0x54, 0x6f, 0x75,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x46, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x70,
	0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe2, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66,
	0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x72, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x72, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x64, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x70, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x70, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4d, 0x65, 0x64, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x22, 0xc2, 0x03, 0x0a, 0x11, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65,
	0x6e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x6d,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70, 0x34, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70, 0x34, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x70, 0x34, 0x49, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x72,
	0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70, 0x34, 0x49, 0x6f, 0x73, 0x22, 0xb3,
	0x02, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d,
	0x70, 0x34, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70, 0x34, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70, 0x34, 0x49, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x70,
	0x34, 0x49, 0x6f, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x75, 0x6d, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe8, 0x01,
	0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x03, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x64, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x70, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x70, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x70, 0x4d, 0x65, 0x64, 0x61, 0x6c,
	0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x70, 0x4d, 0x65,
	0x64, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x35, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x62, 0x0a,
	0x10, 0x54, 0x6f, 0x70, 0x31, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x22, 0x3d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x73,
	0x54, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xbe, 0x04, 0x0a, 0x0b, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x22, 0x7f, 0x0a, 0x09, 0x4d, 0x57, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c,
	0x6f, 0x63, 0x22, 0x68, 0x0a, 0x18, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4a, 0x0a, 0x15,
	0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x42, 0x69, 0x6c,
	0x6c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x69, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x4d, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x62, 0x65, 0x6e, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x42, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x62, 0x65, 0x6e, 0x74, 0x63, 0x68, 0x1a, 0x58, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x52, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x35, 0x0a,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x51, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x4d, 0x57, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x77, 0x61, 0x69,
	0x74, 0x51, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x22, 0x37, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x0c, 0x0a,
	0x0a, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x22, 0x4f, 0x0a, 0x0a, 0x4f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0x1f, 0x0a, 0x0b,
	0x4f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x22, 0x50, 0x0a,
	0x0b, 0x4f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22,
	0x2e, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x6e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x6e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x4d, 0x61, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x70, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x22, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x33,
	0x54, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d,
	0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x22, 0x3d, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2e, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x3e,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x1a, 0x36,
	0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x69, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x4c,
	0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x32, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x67, 0x69,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x22, 0x21, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x01, 0x22, 0xe3, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd1, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x69,
	0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x4f, 0x0a, 0x07, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x1a, 0x56, 0x0a, 0x06, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x22, 0x50, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e,
	0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x47, 0x69,
	0x66, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61,
	0x77, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x52, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x1a, 0x73, 0x0a,
	0x0d, 0x48, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x67, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x21, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x10, 0x01, 0x22, 0x6b, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x2a, 0x1f, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x01, 0x2a, 0x53, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x2a, 0x27, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x01, 0x2a, 0x6a, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x49, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x53, 0x48, 0x10, 0x09,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0a, 0x2a, 0x37, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x0b, 0x4d, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x23, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x0c,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_msg_live_room_live_room_proto_rawDescOnce sync.Once
	file_pb_msg_live_room_live_room_proto_rawDescData = file_pb_msg_live_room_live_room_proto_rawDesc
)

func file_pb_msg_live_room_live_room_proto_rawDescGZIP() []byte {
	file_pb_msg_live_room_live_room_proto_rawDescOnce.Do(func() {
		file_pb_msg_live_room_live_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_msg_live_room_live_room_proto_rawDescData)
	})
	return file_pb_msg_live_room_live_room_proto_rawDescData
}

var file_pb_msg_live_room_live_room_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_pb_msg_live_room_live_room_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_pb_msg_live_room_live_room_proto_goTypes = []interface{}{
	(PartyType)(0),                              // 0: pb_msg_live_room.PartyType
	(RoomTheme)(0),                              // 1: pb_msg_live_room.RoomTheme
	(RoomStatus)(0),                             // 2: pb_msg_live_room.RoomStatus
	(ACTION_TYPE)(0),                            // 3: pb_msg_live_room.ACTION_TYPE
	(RoomType)(0),                               // 4: pb_msg_live_room.RoomType
	(MAnchorRole)(0),                            // 5: pb_msg_live_room.MAnchorRole
	(AnswerType)(0),                             // 6: pb_msg_live_room.AnswerType
	(STREAM_STATE)(0),                           // 7: pb_msg_live_room.STREAM_STATE
	(LiveGiftNotify_SendType)(0),                // 8: pb_msg_live_room.LiveGiftNotify.SendType
	(HandDrawnGiftNotify_SendType)(0),           // 9: pb_msg_live_room.HandDrawnGiftNotify.SendType
	(*LiveStartReq)(nil),                        // 10: pb_msg_live_room.LiveStartReq
	(*LiveStartRsp)(nil),                        // 11: pb_msg_live_room.LiveStartRsp
	(*LiveStopReq)(nil),                         // 12: pb_msg_live_room.LiveStopReq
	(*LiveStopRsp)(nil),                         // 13: pb_msg_live_room.LiveStopRsp
	(*LiveStartSuccessReq)(nil),                 // 14: pb_msg_live_room.LiveStartSuccessReq
	(*LiveStartSuccessRsp)(nil),                 // 15: pb_msg_live_room.LiveStartSuccessRsp
	(*LiveStartNotify)(nil),                     // 16: pb_msg_live_room.LiveStartNotify
	(*AudienceEnterLiveReq)(nil),                // 17: pb_msg_live_room.AudienceEnterLiveReq
	(*UserEnterLiveRsp)(nil),                    // 18: pb_msg_live_room.UserEnterLiveRsp
	(*LiveUserPropsNotify)(nil),                 // 19: pb_msg_live_room.LiveUserPropsNotify
	(*RoomStatusNotify)(nil),                    // 20: pb_msg_live_room.RoomStatusNotify
	(*YXCommMsgNode)(nil),                       // 21: pb_msg_live_room.YXCommMsgNode
	(*HistoryMsg)(nil),                          // 22: pb_msg_live_room.HistoryMsg
	(*HistoryYXCommMsgReq)(nil),                 // 23: pb_msg_live_room.HistoryYXCommMsgReq
	(*HistoryYXCommMsgRsp)(nil),                 // 24: pb_msg_live_room.HistoryYXCommMsgRsp
	(*ReloadYXCommMsgReq)(nil),                  // 25: pb_msg_live_room.ReloadYXCommMsgReq
	(*ReloadYXCommMsgRsp)(nil),                  // 26: pb_msg_live_room.ReloadYXCommMsgRsp
	(*PKScoreNotify)(nil),                       // 27: pb_msg_live_room.PKScoreNotify
	(*PKPROPNotify)(nil),                        // 28: pb_msg_live_room.PKPROPNotify
	(*LiveRoomGift)(nil),                        // 29: pb_msg_live_room.LiveRoomGift
	(*HostMode)(nil),                            // 30: pb_msg_live_room.HostMode
	(*RoomInfo)(nil),                            // 31: pb_msg_live_room.RoomInfo
	(*UserProp)(nil),                            // 32: pb_msg_live_room.UserProp
	(*EnterRoomReadyReq)(nil),                   // 33: pb_msg_live_room.EnterRoomReadyReq
	(*EnterRoomReadyRsp)(nil),                   // 34: pb_msg_live_room.EnterRoomReadyRsp
	(*AudienceEnterRoom)(nil),                   // 35: pb_msg_live_room.AudienceEnterRoom
	(*RoomBarrage)(nil),                         // 36: pb_msg_live_room.RoomBarrage
	(*RoomNormal)(nil),                          // 37: pb_msg_live_room.RoomNormal
	(*RoomAction)(nil),                          // 38: pb_msg_live_room.RoomAction
	(*UpdatedUserInfo)(nil),                     // 39: pb_msg_live_room.UpdatedUserInfo
	(*UpdatedRoomInfo)(nil),                     // 40: pb_msg_live_room.UpdatedRoomInfo
	(*Top1ChangeNotify)(nil),                    // 41: pb_msg_live_room.Top1ChangeNotify
	(*SetRoomFansTop1StatusNotify)(nil),         // 42: pb_msg_live_room.SetRoomFansTop1StatusNotify
	(*MAnchorData)(nil),                         // 43: pb_msg_live_room.MAnchorData
	(*MWaitUser)(nil),                           // 44: pb_msg_live_room.MWaitUser
	(*MAnchorScoreChangeNotify)(nil),            // 45: pb_msg_live_room.MAnchorScoreChangeNotify
	(*BillboardChangeNotify)(nil),               // 46: pb_msg_live_room.BillboardChangeNotify
	(*Billboard)(nil),                           // 47: pb_msg_live_room.Billboard
	(*MAnchorLocChangeNotify)(nil),              // 48: pb_msg_live_room.MAnchorLocChangeNotify
	(*WaitBenchListChangeNotify)(nil),           // 49: pb_msg_live_room.WaitBenchListChangeNotify
	(*OffAnchorReq)(nil),                        // 50: pb_msg_live_room.OffAnchorReq
	(*OffAnchorRsp)(nil),                        // 51: pb_msg_live_room.OffAnchorRsp
	(*OnChairReq)(nil),                          // 52: pb_msg_live_room.OnChairReq
	(*OnChairRsp)(nil),                          // 53: pb_msg_live_room.OnChairRsp
	(*OnAnchorReq)(nil),                         // 54: pb_msg_live_room.OnAnchorReq
	(*OnAnchorRsp)(nil),                         // 55: pb_msg_live_room.OnAnchorRsp
	(*ChairManPutOnAnchorReq)(nil),              // 56: pb_msg_live_room.ChairManPutOnAnchorReq
	(*ChairManPutOnAnchorRsp)(nil),              // 57: pb_msg_live_room.ChairManPutOnAnchorRsp
	(*ChairManPutOnAnchorNotify)(nil),           // 58: pb_msg_live_room.ChairManPutOnAnchorNotify
	(*ChairManInviteAudienceReq)(nil),           // 59: pb_msg_live_room.ChairManInviteAudienceReq
	(*ChairManInviteAudienceRsp)(nil),           // 60: pb_msg_live_room.ChairManInviteAudienceRsp
	(*Enter3TChannelResultNotifyToServer)(nil),  // 61: pb_msg_live_room.Enter3TChannelResultNotifyToServer
	(*ChairManInviteAudienceAnswerReq)(nil),     // 62: pb_msg_live_room.ChairManInviteAudienceAnswerReq
	(*ChairManInviteAudienceAnswerRsp)(nil),     // 63: pb_msg_live_room.ChairManInviteAudienceAnswerRsp
	(*ChairManOffAnchorReq)(nil),                // 64: pb_msg_live_room.ChairManOffAnchorReq
	(*ChairManOffAnchorRsp)(nil),                // 65: pb_msg_live_room.ChairManOffAnchorRsp
	(*ChairManOffAnchorNotify)(nil),             // 66: pb_msg_live_room.ChairManOffAnchorNotify
	(*RecoverLiveRoomReq)(nil),                  // 67: pb_msg_live_room.RecoverLiveRoomReq
	(*RecoverLiveRoomRsp)(nil),                  // 68: pb_msg_live_room.RecoverLiveRoomRsp
	(*VideoStateChangeNotify)(nil),              // 69: pb_msg_live_room.VideoStateChangeNotify
	(*AudioStateChangeNotify)(nil),              // 70: pb_msg_live_room.AudioStateChangeNotify
	(*RoomMsgExpression)(nil),                   // 71: pb_msg_live_room.RoomMsgExpression
	(*KickUserOutNotify)(nil),                   // 72: pb_msg_live_room.KickUserOutNotify
	(*ForbidStateChangeNotify)(nil),             // 73: pb_msg_live_room.ForbidStateChangeNotify
	(*LiveGiftNotify)(nil),                      // 74: pb_msg_live_room.LiveGiftNotify
	(*Receiver)(nil),                            // 75: pb_msg_live_room.Receiver
	(*LiveGift)(nil),                            // 76: pb_msg_live_room.LiveGift
	(*MultiAnchorScoreChangeNotify)(nil),        // 77: pb_msg_live_room.MultiAnchorScoreChangeNotify
	(*InvestorChangeNotify)(nil),                // 78: pb_msg_live_room.InvestorChangeNotify
	(*BackgroundChangeNotify)(nil),              // 79: pb_msg_live_room.BackgroundChangeNotify
	(*HandDrawnGiftNotify)(nil),                 // 80: pb_msg_live_room.HandDrawnGiftNotify
	(*StreamStateChangeNotify)(nil),             // 81: pb_msg_live_room.StreamStateChangeNotify
	nil,                                         // 82: pb_msg_live_room.PKScoreNotify.PkScoreEntry
	nil,                                         // 83: pb_msg_live_room.RoomInfo.ExpEntry
	nil,                                         // 84: pb_msg_live_room.RoomBarrage.ExpEntry
	nil,                                         // 85: pb_msg_live_room.RoomAction.ExpEntry
	nil,                                         // 86: pb_msg_live_room.MAnchorLocChangeNotify.BentchEntry
	nil,                                         // 87: pb_msg_live_room.RoomMsgExpression.ExpEntry
	nil,                                         // 88: pb_msg_live_room.Receiver.ExpEntry
	nil,                                         // 89: pb_msg_live_room.LiveGift.ExpEntry
	(*MultiAnchorScoreChangeNotify_Anchor)(nil), // 90: pb_msg_live_room.MultiAnchorScoreChangeNotify.Anchor
	(*HandDrawnGiftNotify_HandDrawnGift)(nil),   // 91: pb_msg_live_room.HandDrawnGiftNotify.HandDrawnGift
	(pb_pub.ErrCode)(0),                         // 92: pb_pub.ErrCode
	(*pb_pub.YXCommMsg)(nil),                    // 93: pb_pub.YXCommMsg
	(pb_pub.MessageType)(0),                     // 94: pb_pub.MessageType
	(*pb_pub.Gift)(nil),                         // 95: pb_pub.Gift
}
var file_pb_msg_live_room_live_room_proto_depIdxs = []int32{
	4,  // 0: pb_msg_live_room.LiveStartReq.roomType:type_name -> pb_msg_live_room.RoomType
	0,  // 1: pb_msg_live_room.LiveStartReq.partyType:type_name -> pb_msg_live_room.PartyType
	1,  // 2: pb_msg_live_room.LiveStartReq.roomTheme:type_name -> pb_msg_live_room.RoomTheme
	92, // 3: pb_msg_live_room.LiveStartRsp.result:type_name -> pb_pub.ErrCode
	2,  // 4: pb_msg_live_room.RoomStatusNotify.roomStatus:type_name -> pb_msg_live_room.RoomStatus
	93, // 5: pb_msg_live_room.YXCommMsgNode.yxMsg:type_name -> pb_pub.YXCommMsg
	94, // 6: pb_msg_live_room.HistoryMsg.msgType:type_name -> pb_pub.MessageType
	21, // 7: pb_msg_live_room.HistoryYXCommMsgRsp.msgList:type_name -> pb_msg_live_room.YXCommMsgNode
	22, // 8: pb_msg_live_room.HistoryYXCommMsgRsp.historyMsgs:type_name -> pb_msg_live_room.HistoryMsg
	21, // 9: pb_msg_live_room.ReloadYXCommMsgRsp.msgList:type_name -> pb_msg_live_room.YXCommMsgNode
	22, // 10: pb_msg_live_room.ReloadYXCommMsgRsp.historyMsgs:type_name -> pb_msg_live_room.HistoryMsg
	82, // 11: pb_msg_live_room.PKScoreNotify.pkScore:type_name -> pb_msg_live_room.PKScoreNotify.PkScoreEntry
	95, // 12: pb_msg_live_room.LiveRoomGift.gift:type_name -> pb_pub.Gift
	4,  // 13: pb_msg_live_room.RoomInfo.roomType:type_name -> pb_msg_live_room.RoomType
	83, // 14: pb_msg_live_room.RoomInfo.exp:type_name -> pb_msg_live_room.RoomInfo.ExpEntry
	0,  // 15: pb_msg_live_room.RoomInfo.partyType:type_name -> pb_msg_live_room.PartyType
	1,  // 16: pb_msg_live_room.RoomInfo.roomTheme:type_name -> pb_msg_live_room.RoomTheme
	32, // 17: pb_msg_live_room.EnterRoomReadyRsp.userProp:type_name -> pb_msg_live_room.UserProp
	5,  // 18: pb_msg_live_room.EnterRoomReadyRsp.mAnchorRole:type_name -> pb_msg_live_room.MAnchorRole
	32, // 19: pb_msg_live_room.AudienceEnterRoom.userProp:type_name -> pb_msg_live_room.UserProp
	32, // 20: pb_msg_live_room.RoomBarrage.userProp:type_name -> pb_msg_live_room.UserProp
	84, // 21: pb_msg_live_room.RoomBarrage.exp:type_name -> pb_msg_live_room.RoomBarrage.ExpEntry
	32, // 22: pb_msg_live_room.RoomNormal.userProp:type_name -> pb_msg_live_room.UserProp
	32, // 23: pb_msg_live_room.RoomAction.userProp:type_name -> pb_msg_live_room.UserProp
	3,  // 24: pb_msg_live_room.RoomAction.type:type_name -> pb_msg_live_room.ACTION_TYPE
	85, // 25: pb_msg_live_room.RoomAction.exp:type_name -> pb_msg_live_room.RoomAction.ExpEntry
	4,  // 26: pb_msg_live_room.Top1ChangeNotify.roomType:type_name -> pb_msg_live_room.RoomType
	5,  // 27: pb_msg_live_room.MAnchorData.mAnchorRole:type_name -> pb_msg_live_room.MAnchorRole
	7,  // 28: pb_msg_live_room.MAnchorData.streamState:type_name -> pb_msg_live_room.STREAM_STATE
	47, // 29: pb_msg_live_room.BillboardChangeNotify.users:type_name -> pb_msg_live_room.Billboard
	43, // 30: pb_msg_live_room.MAnchorLocChangeNotify.chair:type_name -> pb_msg_live_room.MAnchorData
	86, // 31: pb_msg_live_room.MAnchorLocChangeNotify.bentch:type_name -> pb_msg_live_room.MAnchorLocChangeNotify.BentchEntry
	44, // 32: pb_msg_live_room.WaitBenchListChangeNotify.waitQue:type_name -> pb_msg_live_room.MWaitUser
	92, // 33: pb_msg_live_room.OffAnchorRsp.result:type_name -> pb_pub.ErrCode
	92, // 34: pb_msg_live_room.OnChairRsp.result:type_name -> pb_pub.ErrCode
	92, // 35: pb_msg_live_room.OnAnchorRsp.result:type_name -> pb_pub.ErrCode
	92, // 36: pb_msg_live_room.ChairManPutOnAnchorRsp.result:type_name -> pb_pub.ErrCode
	92, // 37: pb_msg_live_room.ChairManInviteAudienceRsp.result:type_name -> pb_pub.ErrCode
	92, // 38: pb_msg_live_room.Enter3TChannelResultNotifyToServer.Result:type_name -> pb_pub.ErrCode
	6,  // 39: pb_msg_live_room.ChairManInviteAudienceAnswerReq.answerType:type_name -> pb_msg_live_room.AnswerType
	92, // 40: pb_msg_live_room.ChairManInviteAudienceAnswerRsp.result:type_name -> pb_pub.ErrCode
	92, // 41: pb_msg_live_room.ChairManOffAnchorRsp.result:type_name -> pb_pub.ErrCode
	92, // 42: pb_msg_live_room.RecoverLiveRoomRsp.result:type_name -> pb_pub.ErrCode
	87, // 43: pb_msg_live_room.RoomMsgExpression.exp:type_name -> pb_msg_live_room.RoomMsgExpression.ExpEntry
	32, // 44: pb_msg_live_room.LiveGiftNotify.sender:type_name -> pb_msg_live_room.UserProp
	4,  // 45: pb_msg_live_room.LiveGiftNotify.roomType:type_name -> pb_msg_live_room.RoomType
	8,  // 46: pb_msg_live_room.LiveGiftNotify.sendType:type_name -> pb_msg_live_room.LiveGiftNotify.SendType
	75, // 47: pb_msg_live_room.LiveGiftNotify.receivers:type_name -> pb_msg_live_room.Receiver
	76, // 48: pb_msg_live_room.LiveGiftNotify.gift:type_name -> pb_msg_live_room.LiveGift
	88, // 49: pb_msg_live_room.Receiver.exp:type_name -> pb_msg_live_room.Receiver.ExpEntry
	89, // 50: pb_msg_live_room.LiveGift.exp:type_name -> pb_msg_live_room.LiveGift.ExpEntry
	90, // 51: pb_msg_live_room.MultiAnchorScoreChangeNotify.anchors:type_name -> pb_msg_live_room.MultiAnchorScoreChangeNotify.Anchor
	32, // 52: pb_msg_live_room.HandDrawnGiftNotify.sender:type_name -> pb_msg_live_room.UserProp
	4,  // 53: pb_msg_live_room.HandDrawnGiftNotify.roomType:type_name -> pb_msg_live_room.RoomType
	9,  // 54: pb_msg_live_room.HandDrawnGiftNotify.sendType:type_name -> pb_msg_live_room.HandDrawnGiftNotify.SendType
	75, // 55: pb_msg_live_room.HandDrawnGiftNotify.receivers:type_name -> pb_msg_live_room.Receiver
	91, // 56: pb_msg_live_room.HandDrawnGiftNotify.gifts:type_name -> pb_msg_live_room.HandDrawnGiftNotify.HandDrawnGift
	7,  // 57: pb_msg_live_room.StreamStateChangeNotify.state:type_name -> pb_msg_live_room.STREAM_STATE
	43, // 58: pb_msg_live_room.MAnchorLocChangeNotify.BentchEntry.value:type_name -> pb_msg_live_room.MAnchorData
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_pb_msg_live_room_live_room_proto_init() }
func file_pb_msg_live_room_live_room_proto_init() {
	if File_pb_msg_live_room_live_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_msg_live_room_live_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStopRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartSuccessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartSuccessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveStartNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceEnterLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEnterLiveRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveUserPropsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomStatusNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YXCommMsgNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryYXCommMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryYXCommMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadYXCommMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadYXCommMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKScoreNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKPROPNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRoomGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoomReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoomReadyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudienceEnterRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBarrage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomNormal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Top1ChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRoomFansTop1StatusNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAnchorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MWaitUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAnchorScoreChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillboardChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Billboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAnchorLocChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitBenchListChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffAnchorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffAnchorRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnChairReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnChairRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnAnchorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnAnchorRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManPutOnAnchorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManPutOnAnchorRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManPutOnAnchorNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManInviteAudienceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManInviteAudienceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enter3TChannelResultNotifyToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManInviteAudienceAnswerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManInviteAudienceAnswerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManOffAnchorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManOffAnchorRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairManOffAnchorNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverLiveRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverLiveRoomRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoStateChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioStateChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomMsgExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickUserOutNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbidStateChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGiftNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnchorScoreChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestorChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandDrawnGiftNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStateChangeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAnchorScoreChangeNotify_Anchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_live_room_live_room_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandDrawnGiftNotify_HandDrawnGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_msg_live_room_live_room_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_msg_live_room_live_room_proto_goTypes,
		DependencyIndexes: file_pb_msg_live_room_live_room_proto_depIdxs,
		EnumInfos:         file_pb_msg_live_room_live_room_proto_enumTypes,
		MessageInfos:      file_pb_msg_live_room_live_room_proto_msgTypes,
	}.Build()
	File_pb_msg_live_room_live_room_proto = out.File
	file_pb_msg_live_room_live_room_proto_rawDesc = nil
	file_pb_msg_live_room_live_room_proto_goTypes = nil
	file_pb_msg_live_room_live_room_proto_depIdxs = nil
}
