// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_pub/error_code.proto

package pb_pub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// # RetCode 返回码.
type ErrCode int32

const (
	// deprecated 弃用
	// 0-17 为 GRPC 错误码, 因此弃用下列错误码, 客户端收到 0-17的错误码的具体含义参考grpc错误码定义
	// https://grpc.io/docs/guides/error/#error-status-codes
	// https://github.com/grpc/grpc-go/blob/master/codes/codes.go
	ErrCode_SUCCESS ErrCode = 0 // 成功
	// 这中间给 codes使用
	// Canceled indicates the operation was canceled (typically by the caller).
	ErrCode_Canceled ErrCode = 1
	// Unknown error. An example of where this error may be returned is
	// if a Status value received from another address space belongs to
	// an error-space that is not known in this address space. Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	ErrCode_UnknownErr ErrCode = 2
	// InvalidArgument indicates client specified an invalid argument.
	// Note that this differs from FailedPrecondition. It indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	ErrCode_InvalidArgument ErrCode = 3
	// DeadlineExceeded means operation expired before completion.
	// For operations that change the state of the system, this error may be
	// returned even if the operation has completed successfully. For
	// example, a successful response from a server could have been delayed
	// long enough for the deadline to expire.
	ErrCode_DeadlineExceeded ErrCode = 4
	// NotFound means some requested entity (e.g., file or directory) was
	// not found.
	ErrCode_NotFound ErrCode = 5
	// AlreadyExists means an attempt to create an entity failed because one
	// already exists.
	ErrCode_AlreadyExists ErrCode = 6
	// PermissionDenied indicates the caller does not have permission to
	// execute the specified operation. It must not be used for rejections
	// caused by exhausting some resource (use ResourceExhausted
	// instead for those errors). It must not be
	// used if the caller cannot be identified (use Unauthenticated
	// instead for those errors).
	ErrCode_PermissionDenied ErrCode = 7
	// ResourceExhausted indicates some resource has been exhausted, perhaps
	// a per-user quota, or perhaps the entire file system is out of space.
	ErrCode_ResourceExhausted ErrCode = 8
	// FailedPrecondition indicates operation was rejected because the
	// system is not in a state required for the operation's execution.
	// For example, directory to be deleted may be non-empty, an rmdir
	// operation is applied to a non-directory, etc.
	//
	// A litmus test that may help a service implementor in deciding
	// between FailedPrecondition, Aborted, and Unavailable:
	//
	//	(a) Use Unavailable if the client can retry just the failing call.
	//	(b) Use Aborted if the client should retry at a higher-level
	//	    (e.g., restarting a read-modify-write sequence).
	//	(c) Use FailedPrecondition if the client should not retry until
	//	    the system state has been explicitly fixed. E.g., if an "rmdir"
	//	    fails because the directory is non-empty, FailedPrecondition
	//	    should be returned since the client should not retry unless
	//	    they have first fixed up the directory by deleting files from it.
	//	(d) Use FailedPrecondition if the client performs conditional
	//	    REST Get/Update/Delete on a resource and the resource on the
	//	    server does not match the condition. E.g., conflicting
	//	    read-modify-write on the same resource.
	ErrCode_FailedPrecondition ErrCode = 9
	// Aborted indicates the operation was aborted, typically due to a
	// concurrency issue like sequencer check failures, transaction aborts,
	// etc.
	//
	// See litmus test above for deciding between FailedPrecondition,
	// Aborted, and Unavailable.
	ErrCode_Aborted ErrCode = 10
	// OutOfRange means operation was attempted past the valid range.
	// E.g., seeking or reading past end of file.
	//
	// Unlike InvalidArgument, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate InvalidArgument if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// OutOfRange if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between FailedPrecondition and
	// OutOfRange. We recommend using OutOfRange (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an OutOfRange error to detect when
	// they are done.
	ErrCode_OutOfRange ErrCode = 11
	// Unimplemented indicates operation is not implemented or not
	// supported/enabled in this service.
	ErrCode_Unimplemented ErrCode = 12
	// Internal errors. Means some invariants expected by underlying
	// system has been broken. If you see one of these errors,
	// something is very broken.
	ErrCode_Internal ErrCode = 13
	// Unavailable indicates the service is currently unavailable.
	// This is a most likely a transient condition and may be corrected
	// by retrying with a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See litmus test above for deciding between FailedPrecondition,
	// Aborted, and Unavailable.
	ErrCode_Unavailable ErrCode = 14
	// DataLoss indicates unrecoverable data loss or corruption.
	ErrCode_DataLoss ErrCode = 15
	// Unauthenticated indicates the request does not have valid
	// authentication credentials for the operation.
	ErrCode_Unauthenticated   ErrCode = 16
	ErrCode_SYS_ERR           ErrCode = 30 // 系统错误
	ErrCode_USER_NOT_EXIST    ErrCode = 31 // 用户不存在
	ErrCode_USER_NOT_ONLINE   ErrCode = 32 // 用户不在线
	ErrCode_PERMISSION_DENIED ErrCode = 33 //权限不足
	// 20-40 内部错误
	ErrCode_PB_NO_HANDLER           ErrCode = 34
	ErrCode_OTHER_DEVICE_LOGGED     ErrCode = 35 // 账号被其他设备登录过
	ErrCode_OTHER_DEVICE_ONLINE_NOW ErrCode = 36 // 账号当前正在被其他设备登录
	// 频率限制
	ErrCode_Rate_LIMIT                    ErrCode = 37 // 40-INF 服务错误
	ErrCode_ROOM_NOT_FILE                 ErrCode = 40 //
	ErrCode_LIVE_ROOM_NOTEXIT             ErrCode = 50 //直播间不存在
	ErrCode_USER_IS_KICKED_OUT            ErrCode = 51 //用户被踢出
	ErrCode_UNMARSHAL_FAILED              ErrCode = 52 //解析失败
	ErrCode_USER_FORBID_SPEAKING          ErrCode = 53 //用户被禁言
	ErrCode_SEND_MSG_FAILED               ErrCode = 54 //消息发送失败
	ErrCode_MARSHAL_FAILED                ErrCode = 55 // 序列化失败
	ErrCode_USER_NOT_IN_ROOM              ErrCode = 56 // 用户不在直播间
	ErrCode_USER_IS_KICKED_OUT_BY_ANCHOR  ErrCode = 57
	ErrCode_USER_IS_KICKED_OUT_BY_MANAGER ErrCode = 58 // 用户被超管踢出了房间
	// 交友房
	ErrCode_NO_FREE_BENCH                ErrCode = 60 // 没有空位
	ErrCode_CHAIR_NOT_EMPTY              ErrCode = 61 // 主席坐有人
	ErrCode_NOT_CHAIR_MAIN               ErrCode = 62 // 主席才能操作
	ErrCode_USER_IS_ON_ANCHOR_ALREADY    ErrCode = 63 // 用户已经上麦
	ErrCode_USER_IS_IN_WAIT_LIST_ALREADY ErrCode = 64 // 用户已经在队列中
	ErrCode_USER_NO_INVITATION           ErrCode = 65 //用户没有邀请函
	ErrCode_USER_ON_ANCHOR_AUTH_FAILED   ErrCode = 66
	ErrCode_ROOM_IS_LIVING_ALREADY       ErrCode = 67 // 六人房已经在直播中
	ErrCode_AIM_LOC_NOT_FREE             ErrCode = 68 // 目标麦位非空
	ErrCode_USER_ENTER_ROOM_AUTH_FAILED  ErrCode = 69 // 用户进场鉴权失败
	ErrCode_LIVE_START_AUTH_FAILED       ErrCode = 70 // 开播鉴权失败
	ErrCode_ROOM_NOT_IN_LIVING           ErrCode = 71 // 房间不在直播中
	// 多人房优化新增
	ErrCode_USER_NOT_ON_ANCHOR           ErrCode = 72 // 麦上无此用户
	ErrCode_USER_ON_CHAT_ROOM_ALREADY    ErrCode = 73 // 用户已在小黑屋中
	ErrCode_AUDIO_ROOM_IS_LIVING_ALREADY ErrCode = 74 // 八人房已经在直播中
	// 小黑屋
	ErrCode_SECRET_ROOM_IS_NIL            ErrCode = 100 //Secretroom 为空
	ErrCode_USER_IS_NOT_A_COMPERE         ErrCode = 101 //用户不是主持人
	ErrCode_INPUT_IS_OUT_OF_RANGE         ErrCode = 102 //输入的值超出规定范围
	ErrCode_TYPE_ASSERTION_ERR            ErrCode = 103 //类型断言错误
	ErrCode_INVITER_IS_LEVEL_PRIVILEGE    ErrCode = 104 // 邀请方是神秘人
	ErrCode_GET_BALANCE                   ErrCode = 105 //获取余额失败
	ErrCode_BALANCE_NOT_ENOUGH            ErrCode = 106 //余额不足
	ErrCode_COUNT_OF_CHATROOM_UP_TO_LIMIT ErrCode = 107 //小黑屋数量达到上限
	ErrCode_INVITEE_IS_NOT_ON_ANCHOR      ErrCode = 108 //被邀请方不在普通麦位上
	ErrCode_INVITER_ALREADY_ON_CHAT       ErrCode = 109 //邀请方已经在小黑屋中
	ErrCode_INVITEE_ALREADY_ON_CHAT       ErrCode = 110 //被邀请方已经在小黑屋中
	ErrCode_INVITER_IS_CHAIRMAN           ErrCode = 111 //邀请方在主持麦
	ErrCode_INVITEE_IS_CHAIRMAN           ErrCode = 112 //被邀请方在主持麦
	ErrCode_INVITER_HAS_LEFT_ROOM         ErrCode = 113 //邀请方已经离开房间
	ErrCode_CREATE_INVITATION_FAILED      ErrCode = 114 //创建邀请失败
	ErrCode_GET_INVITATION_FAILED         ErrCode = 115 //获取邀请失败
	ErrCode_STATUS_IS_UNEXPECTED          ErrCode = 116 //状态不合法，非期望值
	ErrCode_CREATE_CHATROOM_FAILED        ErrCode = 117 //创建chatroom失败
	ErrCode_GET_CHATROOM_FAILED           ErrCode = 118 //获取chatroom失败
	ErrCode_CHATROOM_IS_NIL               ErrCode = 119 //chatroom为空
	// 交友包
	ErrCode_USER_IS_BUSY  ErrCode = 201 //用户正在忙碌状态
	ErrCode_SCENE_NOTEXIT ErrCode = 202 //房间不存在
	// ///////////////////////////////////
	// luck begin
	ErrCode_LUCK_REFRESH_CFG_FAIL ErrCode = 251 // 更新配置失败
	// luck end
	// ///////////////////////////////////
	// 注意 300-399 的错误码叫 pk_room 服务占用了
	ErrCode_PK_ROOM_NOT_EXIST ErrCode = 300 // PK房间不存在
	// 巅峰决赛 新增
	ErrCode_FINAL_PK_ESCAPE    ErrCode = 331 // 比赛时间无法提前退出
	ErrCode_FINAL_PK_INVITE    ErrCode = 332 // 请等待巅峰赛PK
	ErrCode_FINAL_PK_BE_INVITE ErrCode = 333 // 对方正在参与巅峰赛PK,无法邀请
	ErrCode_FINAL_PK_ENQUEUE   ErrCode = 334 // 请等待巅峰赛PK
	// 注意 400-499 的错误码叫 ttk_game 服务占用了
	ErrCode_BET_NOT_ALLOWED_IN_DEALING ErrCode = 401
	ErrCode_UNKNOWN_KINGDOM            ErrCode = 402
	ErrCode_BET_AMOUNT_NOT_ALLOWED     ErrCode = 403
	ErrCode_NO_ENOUGH_BALANCE          ErrCode = 404
	// gate 错误 800-1000
	ErrCode_PRIVATE_MESSAGE_LIMITED ErrCode = 801 // 私信消息被限制
	// 1100-1199为消息分析的错误码
	ErrCode_SN_GET_CHATID_ERROR     ErrCode = 1100  // 通过sn获取chatid失败
	ErrCode_READ_CHAT_HISTORY_ERROR ErrCode = 1101  // 获取历史消息失败
	ErrCode_COMMON_ERR              ErrCode = 10000 // 通用错误.
	// B_OSS oss服务错误号10010010001 ~ 10019999999
	ErrCode_PIC_SO_BIG              ErrCode = 10010001 //上传图片过大
	ErrCode_PIC_PUT_OSS_FAIL        ErrCode = 10010002 // 图片上传OSS失败
	ErrCode_PIC_SECURE_CHECK_FAIL   ErrCode = 10010003 // 图片安全审查失败
	ErrCode_PIC_NOT_SECURE          ErrCode = 10010004 // 图片未通过安全审查
	ErrCode_VIDEO_SO_BIG            ErrCode = 10010005 //上传视频过大
	ErrCode_VIDEO_PUT_OSS_FAIL      ErrCode = 10010006 // 视频上传OSS失败
	ErrCode_VIDEO_SECURE_CHECK_FAIL ErrCode = 10010007 // 视频安全审查失败
	ErrCode_VIDEO_NOT_SECURE        ErrCode = 10010008 // 视频未通过安全审查
	ErrCode_AUDIO_SO_BIG            ErrCode = 10010009 //上传音频过大
	ErrCode_AUDIO_PUT_OSS_FAIL      ErrCode = 10010010 // 音频上传OSS失败
	ErrCode_AUDIO_SECURE_CHECK_FAIL ErrCode = 10010011 // 音频安全审查失败
	ErrCode_AUDIO_NOT_SECURE        ErrCode = 10010012 // 音频未通过安全审查
	ErrCode_GET_UPLOAD_FILE_FAIL    ErrCode = 10010013 // 获取上传文件失败
	ErrCode_FILE_SO_BIG             ErrCode = 10010014 //上传文件过大
	ErrCode_FILE_PUT_OSS_FAIL       ErrCode = 10010015 // 文件上传OSS失败
	// call 服务错误码 1200-1299
	ErrCode_CALLEE_NOT_ONLINE           ErrCode = 1200 // 被叫不在线
	ErrCode_CALL_SCENE_NOT_EXIST        ErrCode = 1201 // 通话场景不存在
	ErrCode_OPERATION_NOT_ALLOWED       ErrCode = 1202 // 通话当前状态不允许此操作
	ErrCode_CALL_ACCEPTED               ErrCode = 1203 // 已被接听
	ErrCode_CALLEE_NO_MONEY             ErrCode = 1204 // 被叫没钱接听
	ErrCode_AUTH_ERR                    ErrCode = 1205 // 鉴权失败
	ErrCode_CALLER_IN_CALLEE_BLACK_LIST ErrCode = 1206 // 主叫在被叫黑名单
	ErrCode_CALLEE_NOT_ACCEPT           ErrCode = 1207 // 被叫未开启接听权限, 直接拨打情况
	ErrCode_CALLER_INFO_NOT_COMPLETE    ErrCode = 1208 // 主叫信息不完善
	ErrCode_CALLEE_INFO_NOT_COMPLETE    ErrCode = 1209 // 被叫信息不完善
	ErrCode_CALLER_NO_MONEY             ErrCode = 1210 // 主叫没钱拨打
	// customer_service 服务错误码 1300-1399
	ErrCode_OTHER_KEFU_ANSWERING       ErrCode = 1300 // 客户正在被其他客服接入
	ErrCode_SEND_MESSAGE_BEFORE_ANSWER ErrCode = 1301 // 没有接入就发消息
	ErrCode_ALL_KEFU_OFFLINE           ErrCode = 1302 // 全部客服离线
	// 红包
	ErrCode_RED_EDIT       ErrCode = 1401 // 未开放领取
	ErrCode_RED_COMPLETED  ErrCode = 1402 // 已经被领取完了
	ErrCode_RED_OVER_TIME  ErrCode = 1403 // 红包已失效，不可领取
	ErrCode_RED_NOT_FOR_ME ErrCode = 1404 // 私发红包，不是自己的不能领取
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:        "SUCCESS",
		1:        "Canceled",
		2:        "UnknownErr",
		3:        "InvalidArgument",
		4:        "DeadlineExceeded",
		5:        "NotFound",
		6:        "AlreadyExists",
		7:        "PermissionDenied",
		8:        "ResourceExhausted",
		9:        "FailedPrecondition",
		10:       "Aborted",
		11:       "OutOfRange",
		12:       "Unimplemented",
		13:       "Internal",
		14:       "Unavailable",
		15:       "DataLoss",
		16:       "Unauthenticated",
		30:       "SYS_ERR",
		31:       "USER_NOT_EXIST",
		32:       "USER_NOT_ONLINE",
		33:       "PERMISSION_DENIED",
		34:       "PB_NO_HANDLER",
		35:       "OTHER_DEVICE_LOGGED",
		36:       "OTHER_DEVICE_ONLINE_NOW",
		37:       "Rate_LIMIT",
		40:       "ROOM_NOT_FILE",
		50:       "LIVE_ROOM_NOTEXIT",
		51:       "USER_IS_KICKED_OUT",
		52:       "UNMARSHAL_FAILED",
		53:       "USER_FORBID_SPEAKING",
		54:       "SEND_MSG_FAILED",
		55:       "MARSHAL_FAILED",
		56:       "USER_NOT_IN_ROOM",
		57:       "USER_IS_KICKED_OUT_BY_ANCHOR",
		58:       "USER_IS_KICKED_OUT_BY_MANAGER",
		60:       "NO_FREE_BENCH",
		61:       "CHAIR_NOT_EMPTY",
		62:       "NOT_CHAIR_MAIN",
		63:       "USER_IS_ON_ANCHOR_ALREADY",
		64:       "USER_IS_IN_WAIT_LIST_ALREADY",
		65:       "USER_NO_INVITATION",
		66:       "USER_ON_ANCHOR_AUTH_FAILED",
		67:       "ROOM_IS_LIVING_ALREADY",
		68:       "AIM_LOC_NOT_FREE",
		69:       "USER_ENTER_ROOM_AUTH_FAILED",
		70:       "LIVE_START_AUTH_FAILED",
		71:       "ROOM_NOT_IN_LIVING",
		72:       "USER_NOT_ON_ANCHOR",
		73:       "USER_ON_CHAT_ROOM_ALREADY",
		74:       "AUDIO_ROOM_IS_LIVING_ALREADY",
		100:      "SECRET_ROOM_IS_NIL",
		101:      "USER_IS_NOT_A_COMPERE",
		102:      "INPUT_IS_OUT_OF_RANGE",
		103:      "TYPE_ASSERTION_ERR",
		104:      "INVITER_IS_LEVEL_PRIVILEGE",
		105:      "GET_BALANCE",
		106:      "BALANCE_NOT_ENOUGH",
		107:      "COUNT_OF_CHATROOM_UP_TO_LIMIT",
		108:      "INVITEE_IS_NOT_ON_ANCHOR",
		109:      "INVITER_ALREADY_ON_CHAT",
		110:      "INVITEE_ALREADY_ON_CHAT",
		111:      "INVITER_IS_CHAIRMAN",
		112:      "INVITEE_IS_CHAIRMAN",
		113:      "INVITER_HAS_LEFT_ROOM",
		114:      "CREATE_INVITATION_FAILED",
		115:      "GET_INVITATION_FAILED",
		116:      "STATUS_IS_UNEXPECTED",
		117:      "CREATE_CHATROOM_FAILED",
		118:      "GET_CHATROOM_FAILED",
		119:      "CHATROOM_IS_NIL",
		201:      "USER_IS_BUSY",
		202:      "SCENE_NOTEXIT",
		251:      "LUCK_REFRESH_CFG_FAIL",
		300:      "PK_ROOM_NOT_EXIST",
		331:      "FINAL_PK_ESCAPE",
		332:      "FINAL_PK_INVITE",
		333:      "FINAL_PK_BE_INVITE",
		334:      "FINAL_PK_ENQUEUE",
		401:      "BET_NOT_ALLOWED_IN_DEALING",
		402:      "UNKNOWN_KINGDOM",
		403:      "BET_AMOUNT_NOT_ALLOWED",
		404:      "NO_ENOUGH_BALANCE",
		801:      "PRIVATE_MESSAGE_LIMITED",
		1100:     "SN_GET_CHATID_ERROR",
		1101:     "READ_CHAT_HISTORY_ERROR",
		10000:    "COMMON_ERR",
		10010001: "PIC_SO_BIG",
		10010002: "PIC_PUT_OSS_FAIL",
		10010003: "PIC_SECURE_CHECK_FAIL",
		10010004: "PIC_NOT_SECURE",
		10010005: "VIDEO_SO_BIG",
		10010006: "VIDEO_PUT_OSS_FAIL",
		10010007: "VIDEO_SECURE_CHECK_FAIL",
		10010008: "VIDEO_NOT_SECURE",
		10010009: "AUDIO_SO_BIG",
		10010010: "AUDIO_PUT_OSS_FAIL",
		10010011: "AUDIO_SECURE_CHECK_FAIL",
		10010012: "AUDIO_NOT_SECURE",
		10010013: "GET_UPLOAD_FILE_FAIL",
		10010014: "FILE_SO_BIG",
		10010015: "FILE_PUT_OSS_FAIL",
		1200:     "CALLEE_NOT_ONLINE",
		1201:     "CALL_SCENE_NOT_EXIST",
		1202:     "OPERATION_NOT_ALLOWED",
		1203:     "CALL_ACCEPTED",
		1204:     "CALLEE_NO_MONEY",
		1205:     "AUTH_ERR",
		1206:     "CALLER_IN_CALLEE_BLACK_LIST",
		1207:     "CALLEE_NOT_ACCEPT",
		1208:     "CALLER_INFO_NOT_COMPLETE",
		1209:     "CALLEE_INFO_NOT_COMPLETE",
		1210:     "CALLER_NO_MONEY",
		1300:     "OTHER_KEFU_ANSWERING",
		1301:     "SEND_MESSAGE_BEFORE_ANSWER",
		1302:     "ALL_KEFU_OFFLINE",
		1401:     "RED_EDIT",
		1402:     "RED_COMPLETED",
		1403:     "RED_OVER_TIME",
		1404:     "RED_NOT_FOR_ME",
	}
	ErrCode_value = map[string]int32{
		"SUCCESS":                       0,
		"Canceled":                      1,
		"UnknownErr":                    2,
		"InvalidArgument":               3,
		"DeadlineExceeded":              4,
		"NotFound":                      5,
		"AlreadyExists":                 6,
		"PermissionDenied":              7,
		"ResourceExhausted":             8,
		"FailedPrecondition":            9,
		"Aborted":                       10,
		"OutOfRange":                    11,
		"Unimplemented":                 12,
		"Internal":                      13,
		"Unavailable":                   14,
		"DataLoss":                      15,
		"Unauthenticated":               16,
		"SYS_ERR":                       30,
		"USER_NOT_EXIST":                31,
		"USER_NOT_ONLINE":               32,
		"PERMISSION_DENIED":             33,
		"PB_NO_HANDLER":                 34,
		"OTHER_DEVICE_LOGGED":           35,
		"OTHER_DEVICE_ONLINE_NOW":       36,
		"Rate_LIMIT":                    37,
		"ROOM_NOT_FILE":                 40,
		"LIVE_ROOM_NOTEXIT":             50,
		"USER_IS_KICKED_OUT":            51,
		"UNMARSHAL_FAILED":              52,
		"USER_FORBID_SPEAKING":          53,
		"SEND_MSG_FAILED":               54,
		"MARSHAL_FAILED":                55,
		"USER_NOT_IN_ROOM":              56,
		"USER_IS_KICKED_OUT_BY_ANCHOR":  57,
		"USER_IS_KICKED_OUT_BY_MANAGER": 58,
		"NO_FREE_BENCH":                 60,
		"CHAIR_NOT_EMPTY":               61,
		"NOT_CHAIR_MAIN":                62,
		"USER_IS_ON_ANCHOR_ALREADY":     63,
		"USER_IS_IN_WAIT_LIST_ALREADY":  64,
		"USER_NO_INVITATION":            65,
		"USER_ON_ANCHOR_AUTH_FAILED":    66,
		"ROOM_IS_LIVING_ALREADY":        67,
		"AIM_LOC_NOT_FREE":              68,
		"USER_ENTER_ROOM_AUTH_FAILED":   69,
		"LIVE_START_AUTH_FAILED":        70,
		"ROOM_NOT_IN_LIVING":            71,
		"USER_NOT_ON_ANCHOR":            72,
		"USER_ON_CHAT_ROOM_ALREADY":     73,
		"AUDIO_ROOM_IS_LIVING_ALREADY":  74,
		"SECRET_ROOM_IS_NIL":            100,
		"USER_IS_NOT_A_COMPERE":         101,
		"INPUT_IS_OUT_OF_RANGE":         102,
		"TYPE_ASSERTION_ERR":            103,
		"INVITER_IS_LEVEL_PRIVILEGE":    104,
		"GET_BALANCE":                   105,
		"BALANCE_NOT_ENOUGH":            106,
		"COUNT_OF_CHATROOM_UP_TO_LIMIT": 107,
		"INVITEE_IS_NOT_ON_ANCHOR":      108,
		"INVITER_ALREADY_ON_CHAT":       109,
		"INVITEE_ALREADY_ON_CHAT":       110,
		"INVITER_IS_CHAIRMAN":           111,
		"INVITEE_IS_CHAIRMAN":           112,
		"INVITER_HAS_LEFT_ROOM":         113,
		"CREATE_INVITATION_FAILED":      114,
		"GET_INVITATION_FAILED":         115,
		"STATUS_IS_UNEXPECTED":          116,
		"CREATE_CHATROOM_FAILED":        117,
		"GET_CHATROOM_FAILED":           118,
		"CHATROOM_IS_NIL":               119,
		"USER_IS_BUSY":                  201,
		"SCENE_NOTEXIT":                 202,
		"LUCK_REFRESH_CFG_FAIL":         251,
		"PK_ROOM_NOT_EXIST":             300,
		"FINAL_PK_ESCAPE":               331,
		"FINAL_PK_INVITE":               332,
		"FINAL_PK_BE_INVITE":            333,
		"FINAL_PK_ENQUEUE":              334,
		"BET_NOT_ALLOWED_IN_DEALING":    401,
		"UNKNOWN_KINGDOM":               402,
		"BET_AMOUNT_NOT_ALLOWED":        403,
		"NO_ENOUGH_BALANCE":             404,
		"PRIVATE_MESSAGE_LIMITED":       801,
		"SN_GET_CHATID_ERROR":           1100,
		"READ_CHAT_HISTORY_ERROR":       1101,
		"COMMON_ERR":                    10000,
		"PIC_SO_BIG":                    10010001,
		"PIC_PUT_OSS_FAIL":              10010002,
		"PIC_SECURE_CHECK_FAIL":         10010003,
		"PIC_NOT_SECURE":                10010004,
		"VIDEO_SO_BIG":                  10010005,
		"VIDEO_PUT_OSS_FAIL":            10010006,
		"VIDEO_SECURE_CHECK_FAIL":       10010007,
		"VIDEO_NOT_SECURE":              10010008,
		"AUDIO_SO_BIG":                  10010009,
		"AUDIO_PUT_OSS_FAIL":            10010010,
		"AUDIO_SECURE_CHECK_FAIL":       10010011,
		"AUDIO_NOT_SECURE":              10010012,
		"GET_UPLOAD_FILE_FAIL":          10010013,
		"FILE_SO_BIG":                   10010014,
		"FILE_PUT_OSS_FAIL":             10010015,
		"CALLEE_NOT_ONLINE":             1200,
		"CALL_SCENE_NOT_EXIST":          1201,
		"OPERATION_NOT_ALLOWED":         1202,
		"CALL_ACCEPTED":                 1203,
		"CALLEE_NO_MONEY":               1204,
		"AUTH_ERR":                      1205,
		"CALLER_IN_CALLEE_BLACK_LIST":   1206,
		"CALLEE_NOT_ACCEPT":             1207,
		"CALLER_INFO_NOT_COMPLETE":      1208,
		"CALLEE_INFO_NOT_COMPLETE":      1209,
		"CALLER_NO_MONEY":               1210,
		"OTHER_KEFU_ANSWERING":          1300,
		"SEND_MESSAGE_BEFORE_ANSWER":    1301,
		"ALL_KEFU_OFFLINE":              1302,
		"RED_EDIT":                      1401,
		"RED_COMPLETED":                 1402,
		"RED_OVER_TIME":                 1403,
		"RED_NOT_FOR_ME":                1404,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_error_code_proto_enumTypes[0].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_pb_pub_error_code_proto_enumTypes[0]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_error_code_proto_rawDescGZIP(), []int{0}
}

var File_pb_pub_error_code_proto protoreflect.FileDescriptor

var file_pb_pub_error_code_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2a, 0xb9, 0x16, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x6f, 0x73, 0x73, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x59, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x20, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x42, 0x5f, 0x4e,
	0x4f, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x23, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x10,
	0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10,
	0x25, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x54, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x36, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x53,
	0x48, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x37, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x38, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x4e, 0x43, 0x48,
	0x4f, 0x52, 0x10, 0x39, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x3a, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x41, 0x49, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x3d, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x10, 0x3e, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x3f, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x43, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x49, 0x4d, 0x5f,
	0x4c, 0x4f, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x44, 0x12, 0x1f,
	0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x45, 0x12,
	0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x47, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x10, 0x48, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x49, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x49, 0x56, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x4a, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x49, 0x4c, 0x10, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x52, 0x45, 0x10, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x53,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45,
	0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x69, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x6a, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x6b, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x10, 0x6c, 0x12, 0x1b, 0x0a, 0x17,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x10, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x6f, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x10, 0x71, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x72, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x73, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x75, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x76, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x49, 0x4c, 0x10, 0x77,
	0x12, 0x11, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x59,
	0x10, 0xc9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x58, 0x49, 0x54, 0x10, 0xca, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4c, 0x55, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0xfb, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x4b, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xac, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4b, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0xcb,
	0x02, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4b, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x10, 0xcc, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x50, 0x4b, 0x5f, 0x42, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xcd, 0x02,
	0x12, 0x15, 0x0a, 0x10, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4b, 0x5f, 0x45, 0x4e, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0xce, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x45, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x91, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x10, 0x92, 0x03, 0x12, 0x1b,
	0x0a, 0x16, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x4e,
	0x4f, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x94, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0xa1,
	0x06, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcc, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcd, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x90, 0x4e, 0x12, 0x11, 0x0a, 0x0a, 0x50, 0x49,
	0x43, 0x5f, 0x53, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x91, 0xfb, 0xe2, 0x04, 0x12, 0x17, 0x0a,
	0x10, 0x50, 0x49, 0x43, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x92, 0xfb, 0xe2, 0x04, 0x12, 0x1c, 0x0a, 0x15, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x93, 0xfb, 0xe2, 0x04, 0x12, 0x15, 0x0a, 0x0e, 0x50, 0x49, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x94, 0xfb, 0xe2, 0x04, 0x12, 0x13, 0x0a, 0x0c, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x95, 0xfb, 0xe2, 0x04,
	0x12, 0x19, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x53,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x96, 0xfb, 0xe2, 0x04, 0x12, 0x1e, 0x0a, 0x17, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x97, 0xfb, 0xe2, 0x04, 0x12, 0x17, 0x0a, 0x10, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10,
	0x98, 0xfb, 0xe2, 0x04, 0x12, 0x13, 0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f,
	0x5f, 0x42, 0x49, 0x47, 0x10, 0x99, 0xfb, 0xe2, 0x04, 0x12, 0x19, 0x0a, 0x12, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x9a, 0xfb, 0xe2, 0x04, 0x12, 0x1e, 0x0a, 0x17, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x9b, 0xfb, 0xe2, 0x04, 0x12, 0x17, 0x0a, 0x10, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0x9c, 0xfb, 0xe2, 0x04, 0x12, 0x1b, 0x0a,
	0x14, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x9d, 0xfb, 0xe2, 0x04, 0x12, 0x12, 0x0a, 0x0b, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x9e, 0xfb, 0xe2, 0x04, 0x12, 0x18,
	0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x53, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x9f, 0xfb, 0xe2, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c,
	0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0xb0, 0x09,
	0x12, 0x19, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb1, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0xb2, 0x09, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0xb3, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x43,
	0x41, 0x4c, 0x4c, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0xb4,
	0x09, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xb5, 0x09,
	0x12, 0x20, 0x0a, 0x1b, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x45, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0xb6, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0xb7, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xb8, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x41, 0x4c,
	0x4c, 0x45, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xb9, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0xba, 0x09, 0x12, 0x19,
	0x0a, 0x14, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x46, 0x55, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x94, 0x0a, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x95, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x4c,
	0x4c, 0x5f, 0x4b, 0x45, 0x46, 0x55, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x96,
	0x0a, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xf9, 0x0a,
	0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0xfa, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xfb, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x10, 0xfc, 0x0a, 0x42, 0x20, 0x5a,
	0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_pub_error_code_proto_rawDescOnce sync.Once
	file_pb_pub_error_code_proto_rawDescData = file_pb_pub_error_code_proto_rawDesc
)

func file_pb_pub_error_code_proto_rawDescGZIP() []byte {
	file_pb_pub_error_code_proto_rawDescOnce.Do(func() {
		file_pb_pub_error_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_pub_error_code_proto_rawDescData)
	})
	return file_pb_pub_error_code_proto_rawDescData
}

var file_pb_pub_error_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_pub_error_code_proto_goTypes = []interface{}{
	(ErrCode)(0), // 0: pb_pub.ErrCode
}
var file_pb_pub_error_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_pub_error_code_proto_init() }
func file_pb_pub_error_code_proto_init() {
	if File_pb_pub_error_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_pub_error_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_pub_error_code_proto_goTypes,
		DependencyIndexes: file_pb_pub_error_code_proto_depIdxs,
		EnumInfos:         file_pb_pub_error_code_proto_enumTypes,
	}.Build()
	File_pb_pub_error_code_proto = out.File
	file_pb_pub_error_code_proto_rawDesc = nil
	file_pb_pub_error_code_proto_goTypes = nil
	file_pb_pub_error_code_proto_depIdxs = nil
}
