// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_pub/comm.proto

package pb_pub

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端运行环境类型
type CLIENT_RUN_ENV_TYPE int32

const (
	CLIENT_RUN_ENV_TYPE_ANDROID   CLIENT_RUN_ENV_TYPE = 0
	CLIENT_RUN_ENV_TYPE_IOS       CLIENT_RUN_ENV_TYPE = 1
	CLIENT_RUN_ENV_TYPE_MAKOS     CLIENT_RUN_ENV_TYPE = 2
	CLIENT_RUN_ENV_TYPE_WINDOWS   CLIENT_RUN_ENV_TYPE = 3
	CLIENT_RUN_ENV_TYPE_LINUX     CLIENT_RUN_ENV_TYPE = 4
	CLIENT_RUN_ENV_TYPE_LINUX_DEB CLIENT_RUN_ENV_TYPE = 5
	CLIENT_RUN_ENV_TYPE_PREV6     CLIENT_RUN_ENV_TYPE = 6
	CLIENT_RUN_ENV_TYPE_PREV7     CLIENT_RUN_ENV_TYPE = 7
	CLIENT_RUN_ENV_TYPE_PREV8     CLIENT_RUN_ENV_TYPE = 8
)

// Enum value maps for CLIENT_RUN_ENV_TYPE.
var (
	CLIENT_RUN_ENV_TYPE_name = map[int32]string{
		0: "ANDROID",
		1: "IOS",
		2: "MAKOS",
		3: "WINDOWS",
		4: "LINUX",
		5: "LINUX_DEB",
		6: "PREV6",
		7: "PREV7",
		8: "PREV8",
	}
	CLIENT_RUN_ENV_TYPE_value = map[string]int32{
		"ANDROID":   0,
		"IOS":       1,
		"MAKOS":     2,
		"WINDOWS":   3,
		"LINUX":     4,
		"LINUX_DEB": 5,
		"PREV6":     6,
		"PREV7":     7,
		"PREV8":     8,
	}
)

func (x CLIENT_RUN_ENV_TYPE) Enum() *CLIENT_RUN_ENV_TYPE {
	p := new(CLIENT_RUN_ENV_TYPE)
	*p = x
	return p
}

func (x CLIENT_RUN_ENV_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLIENT_RUN_ENV_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[0].Descriptor()
}

func (CLIENT_RUN_ENV_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[0]
}

func (x CLIENT_RUN_ENV_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLIENT_RUN_ENV_TYPE.Descriptor instead.
func (CLIENT_RUN_ENV_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{0}
}

type PCD_EXP_KEY int32

const (
	PCD_EXP_KEY_PCD_EXP_KEY_BEGIN PCD_EXP_KEY = 0
	PCD_EXP_KEY_GROUP_MSG_STATUS  PCD_EXP_KEY = 1000
)

// Enum value maps for PCD_EXP_KEY.
var (
	PCD_EXP_KEY_name = map[int32]string{
		0:    "PCD_EXP_KEY_BEGIN",
		1000: "GROUP_MSG_STATUS",
	}
	PCD_EXP_KEY_value = map[string]int32{
		"PCD_EXP_KEY_BEGIN": 0,
		"GROUP_MSG_STATUS":  1000,
	}
)

func (x PCD_EXP_KEY) Enum() *PCD_EXP_KEY {
	p := new(PCD_EXP_KEY)
	*p = x
	return p
}

func (x PCD_EXP_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PCD_EXP_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[1].Descriptor()
}

func (PCD_EXP_KEY) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[1]
}

func (x PCD_EXP_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PCD_EXP_KEY.Descriptor instead.
func (PCD_EXP_KEY) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{1}
}

type CLIENT_TYPE int32

const (
	CLIENT_TYPE_NONE   CLIENT_TYPE = 0
	CLIENT_TYPE_PHONE  CLIENT_TYPE = 1
	CLIENT_TYPE_H5     CLIENT_TYPE = 2
	CLIENT_TYPE_PC     CLIENT_TYPE = 3
	CLIENT_TYPE_SERVER CLIENT_TYPE = 100 // 服务端发的
	CLIENT_TYPE_ALL    CLIENT_TYPE = 1000
)

// Enum value maps for CLIENT_TYPE.
var (
	CLIENT_TYPE_name = map[int32]string{
		0:    "NONE",
		1:    "PHONE",
		2:    "H5",
		3:    "PC",
		100:  "SERVER",
		1000: "ALL",
	}
	CLIENT_TYPE_value = map[string]int32{
		"NONE":   0,
		"PHONE":  1,
		"H5":     2,
		"PC":     3,
		"SERVER": 100,
		"ALL":    1000,
	}
)

func (x CLIENT_TYPE) Enum() *CLIENT_TYPE {
	p := new(CLIENT_TYPE)
	*p = x
	return p
}

func (x CLIENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLIENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[2].Descriptor()
}

func (CLIENT_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[2]
}

func (x CLIENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLIENT_TYPE.Descriptor instead.
func (CLIENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{2}
}

// 推送消息客户端的活动类型
type PushMsgClientActionType int32

const (
	PushMsgClientActionType_CLIENT_ACTION_UNKNOWN      PushMsgClientActionType = 0 //未知
	PushMsgClientActionType_CLIENT_ACTION_LIVE_START   PushMsgClientActionType = 1 //主播开播推送消息
	PushMsgClientActionType_CLIENT_ACTION_PRIVATE_CHAT PushMsgClientActionType = 2 //私聊推送消息
	PushMsgClientActionType_CLIENT_ACTION_KE_FU        PushMsgClientActionType = 3 //客服消息
)

// Enum value maps for PushMsgClientActionType.
var (
	PushMsgClientActionType_name = map[int32]string{
		0: "CLIENT_ACTION_UNKNOWN",
		1: "CLIENT_ACTION_LIVE_START",
		2: "CLIENT_ACTION_PRIVATE_CHAT",
		3: "CLIENT_ACTION_KE_FU",
	}
	PushMsgClientActionType_value = map[string]int32{
		"CLIENT_ACTION_UNKNOWN":      0,
		"CLIENT_ACTION_LIVE_START":   1,
		"CLIENT_ACTION_PRIVATE_CHAT": 2,
		"CLIENT_ACTION_KE_FU":        3,
	}
)

func (x PushMsgClientActionType) Enum() *PushMsgClientActionType {
	p := new(PushMsgClientActionType)
	*p = x
	return p
}

func (x PushMsgClientActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushMsgClientActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[3].Descriptor()
}

func (PushMsgClientActionType) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[3]
}

func (x PushMsgClientActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushMsgClientActionType.Descriptor instead.
func (PushMsgClientActionType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{3}
}

type TextChatType int32

const (
	TextChatType_TEXT         TextChatType = 0  // 文字
	TextChatType_PIC          TextChatType = 1  // 图片
	TextChatType_VIDEO        TextChatType = 2  // 视频
	TextChatType_AUDIO        TextChatType = 3  // 音频
	TextChatType_GIFT         TextChatType = 4  // 礼物
	TextChatType_PACT         TextChatType = 5  // 猫咖合同
	TextChatType_VIDEO_INVITE TextChatType = 6  // 视频邀请
	TextChatType_CUSTOMIZE    TextChatType = 7  // 自定义消息
	TextChatType_FILE         TextChatType = 8  // 文件
	TextChatType_RECALL       TextChatType = 9  // 消息撤回
	TextChatType_RED_PACKET   TextChatType = 10 // 红包
)

// Enum value maps for TextChatType.
var (
	TextChatType_name = map[int32]string{
		0:  "TEXT",
		1:  "PIC",
		2:  "VIDEO",
		3:  "AUDIO",
		4:  "GIFT",
		5:  "PACT",
		6:  "VIDEO_INVITE",
		7:  "CUSTOMIZE",
		8:  "FILE",
		9:  "RECALL",
		10: "RED_PACKET",
	}
	TextChatType_value = map[string]int32{
		"TEXT":         0,
		"PIC":          1,
		"VIDEO":        2,
		"AUDIO":        3,
		"GIFT":         4,
		"PACT":         5,
		"VIDEO_INVITE": 6,
		"CUSTOMIZE":    7,
		"FILE":         8,
		"RECALL":       9,
		"RED_PACKET":   10,
	}
)

func (x TextChatType) Enum() *TextChatType {
	p := new(TextChatType)
	*p = x
	return p
}

func (x TextChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[4].Descriptor()
}

func (TextChatType) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[4]
}

func (x TextChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextChatType.Descriptor instead.
func (TextChatType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{4}
}

// 状态只能增长，不能后退
type MSG_STATE int32

const (
	MSG_STATE_INIT          MSG_STATE = 0 // 初始状态  消息刚创建好，存入db
	MSG_STATE_FAULT         MSG_STATE = 1 //发送失败， 经过一定时间还是在Init状态的话则为失败，展示红点
	MSG_STATE_SEND          MSG_STATE = 2 // 发送到服务器后，服务器端会返回一个msgreceipt回执，这个回执里面带的状态是send，用这个状态更改本地消息
	MSG_STATE_RECEIVED      MSG_STATE = 3 // 对方收到消息后回复一个receipt，状态为已接收，收到这个消息后更改本地状态
	MSG_STATE_READ          MSG_STATE = 4 // 对方消息在界面展示则为已读，发送一个receipt，状态为已读
	MSG_STATE_END           MSG_STATE = 5 // 发送方收到receipt消息后会发送一个end状态的receipt，用户删除服务端的存储消息，对与必须让对方收到的消息，对方确认收到了消息也会发送状态为end的receipt回执
	MSG_STATE_IN_BLACK_LIST MSG_STATE = 6 //被对方加了黑名单，无法送达时，服务端会发送一个这个状态的receipt消息
	MSG_STATE_LIMITED       MSG_STATE = 7 // 鉴权失败,被限制// 鉴权不通过服务端会发这个状态的回执
)

// Enum value maps for MSG_STATE.
var (
	MSG_STATE_name = map[int32]string{
		0: "INIT",
		1: "FAULT",
		2: "SEND",
		3: "RECEIVED",
		4: "READ",
		5: "END",
		6: "IN_BLACK_LIST",
		7: "LIMITED",
	}
	MSG_STATE_value = map[string]int32{
		"INIT":          0,
		"FAULT":         1,
		"SEND":          2,
		"RECEIVED":      3,
		"READ":          4,
		"END":           5,
		"IN_BLACK_LIST": 6,
		"LIMITED":       7,
	}
)

func (x MSG_STATE) Enum() *MSG_STATE {
	p := new(MSG_STATE)
	*p = x
	return p
}

func (x MSG_STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_STATE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[5].Descriptor()
}

func (MSG_STATE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[5]
}

func (x MSG_STATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_STATE.Descriptor instead.
func (MSG_STATE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{5}
}

type MODEL_TYPE int32

const (
	MODEL_TYPE_NIL      MODEL_TYPE = 0
	MODEL_TYPE_OPPO     MODEL_TYPE = 1
	MODEL_TYPE_HUAWEI   MODEL_TYPE = 2
	MODEL_TYPE_XIAOMI   MODEL_TYPE = 3
	MODEL_TYPE_MEIZU    MODEL_TYPE = 4
	MODEL_TYPE_APPSTORE MODEL_TYPE = 5 // 苹果
	MODEL_TYPE_VIVO     MODEL_TYPE = 6
	MODEL_TYPE_JIGUANG  MODEL_TYPE = 7 // 极光推送
	MODEL_TYPE_FCM      MODEL_TYPE = 8 // 谷歌
	MODEL_TYPE_RONGYAO  MODEL_TYPE = 9 //荣耀
)

// Enum value maps for MODEL_TYPE.
var (
	MODEL_TYPE_name = map[int32]string{
		0: "NIL",
		1: "OPPO",
		2: "HUAWEI",
		3: "XIAOMI",
		4: "MEIZU",
		5: "APPSTORE",
		6: "VIVO",
		7: "JIGUANG",
		8: "FCM",
		9: "RONGYAO",
	}
	MODEL_TYPE_value = map[string]int32{
		"NIL":      0,
		"OPPO":     1,
		"HUAWEI":   2,
		"XIAOMI":   3,
		"MEIZU":    4,
		"APPSTORE": 5,
		"VIVO":     6,
		"JIGUANG":  7,
		"FCM":      8,
		"RONGYAO":  9,
	}
)

func (x MODEL_TYPE) Enum() *MODEL_TYPE {
	p := new(MODEL_TYPE)
	*p = x
	return p
}

func (x MODEL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODEL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[6].Descriptor()
}

func (MODEL_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[6]
}

func (x MODEL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODEL_TYPE.Descriptor instead.
func (MODEL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{6}
}

type HEART_BEAT_TYPE int32

const (
	HEART_BEAT_TYPE_COMM              HEART_BEAT_TYPE = 0 //普通保活心跳
	HEART_BEAT_TYPE_LIVE_ROOM         HEART_BEAT_TYPE = 1 // 直播间
	HEART_BEAT_TYPE_CALL_SCENE        HEART_BEAT_TYPE = 2 // 通话场景
	HEART_BEAT_TYPE_MULTI_ANCHOR_HALL HEART_BEAT_TYPE = 3
	HEART_BEAT_TYPE_TTK_GAME          HEART_BEAT_TYPE = 4
	HEART_BEAT_TYPE_LIVE_ROOM_VISITOR HEART_BEAT_TYPE = 5 // 直播间游客心跳
	HEART_BEAT_TYPE_GAME_SCENE        HEART_BEAT_TYPE = 6
)

// Enum value maps for HEART_BEAT_TYPE.
var (
	HEART_BEAT_TYPE_name = map[int32]string{
		0: "COMM",
		1: "LIVE_ROOM",
		2: "CALL_SCENE",
		3: "MULTI_ANCHOR_HALL",
		4: "TTK_GAME",
		5: "LIVE_ROOM_VISITOR",
		6: "GAME_SCENE",
	}
	HEART_BEAT_TYPE_value = map[string]int32{
		"COMM":              0,
		"LIVE_ROOM":         1,
		"CALL_SCENE":        2,
		"MULTI_ANCHOR_HALL": 3,
		"TTK_GAME":          4,
		"LIVE_ROOM_VISITOR": 5,
		"GAME_SCENE":        6,
	}
)

func (x HEART_BEAT_TYPE) Enum() *HEART_BEAT_TYPE {
	p := new(HEART_BEAT_TYPE)
	*p = x
	return p
}

func (x HEART_BEAT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HEART_BEAT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[7].Descriptor()
}

func (HEART_BEAT_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[7]
}

func (x HEART_BEAT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HEART_BEAT_TYPE.Descriptor instead.
func (HEART_BEAT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{7}
}

type HEART_BEAT_MSG_STATE int32

const (
	HEART_BEAT_MSG_STATE_PING HEART_BEAT_MSG_STATE = 0
	HEART_BEAT_MSG_STATE_PANG HEART_BEAT_MSG_STATE = 1
)

// Enum value maps for HEART_BEAT_MSG_STATE.
var (
	HEART_BEAT_MSG_STATE_name = map[int32]string{
		0: "PING",
		1: "PANG",
	}
	HEART_BEAT_MSG_STATE_value = map[string]int32{
		"PING": 0,
		"PANG": 1,
	}
)

func (x HEART_BEAT_MSG_STATE) Enum() *HEART_BEAT_MSG_STATE {
	p := new(HEART_BEAT_MSG_STATE)
	*p = x
	return p
}

func (x HEART_BEAT_MSG_STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HEART_BEAT_MSG_STATE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[8].Descriptor()
}

func (HEART_BEAT_MSG_STATE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[8]
}

func (x HEART_BEAT_MSG_STATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HEART_BEAT_MSG_STATE.Descriptor instead.
func (HEART_BEAT_MSG_STATE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{8}
}

// 用户状态定义
type USER_STATE_TYPE int32

const (
	USER_STATE_TYPE_USER_STATE_INIT    USER_STATE_TYPE = 0
	USER_STATE_TYPE_USER_STATE_AUTHING USER_STATE_TYPE = 1
	USER_STATE_TYPE_USER_STATE_AUTHED  USER_STATE_TYPE = 2
	USER_STATE_TYPE_USER_STATE_OFFLINE USER_STATE_TYPE = 3
)

// Enum value maps for USER_STATE_TYPE.
var (
	USER_STATE_TYPE_name = map[int32]string{
		0: "USER_STATE_INIT",
		1: "USER_STATE_AUTHING",
		2: "USER_STATE_AUTHED",
		3: "USER_STATE_OFFLINE",
	}
	USER_STATE_TYPE_value = map[string]int32{
		"USER_STATE_INIT":    0,
		"USER_STATE_AUTHING": 1,
		"USER_STATE_AUTHED":  2,
		"USER_STATE_OFFLINE": 3,
	}
)

func (x USER_STATE_TYPE) Enum() *USER_STATE_TYPE {
	p := new(USER_STATE_TYPE)
	*p = x
	return p
}

func (x USER_STATE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_STATE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[9].Descriptor()
}

func (USER_STATE_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[9]
}

func (x USER_STATE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_STATE_TYPE.Descriptor instead.
func (USER_STATE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{9}
}

type OPERATION int32

const (
	OPERATION_UNKNOWN OPERATION = 0
	OPERATION_ENTER   OPERATION = 1 //进入直播间
	OPERATION_EXIT    OPERATION = 2 //离开直播间
)

// Enum value maps for OPERATION.
var (
	OPERATION_name = map[int32]string{
		0: "UNKNOWN",
		1: "ENTER",
		2: "EXIT",
	}
	OPERATION_value = map[string]int32{
		"UNKNOWN": 0,
		"ENTER":   1,
		"EXIT":    2,
	}
)

func (x OPERATION) Enum() *OPERATION {
	p := new(OPERATION)
	*p = x
	return p
}

func (x OPERATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OPERATION) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[10].Descriptor()
}

func (OPERATION) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[10]
}

func (x OPERATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OPERATION.Descriptor instead.
func (OPERATION) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{10}
}

type SCENE_TYPE int32

const (
	SCENE_TYPE_SCENE_TYPE_UNKNOWN    SCENE_TYPE = 0
	SCENE_TYPE_SCENE_TYPE_CALL_SCENE SCENE_TYPE = 1
	SCENE_TYPE_SCENE_TYPE_JOIN_LIVE  SCENE_TYPE = 2
)

// Enum value maps for SCENE_TYPE.
var (
	SCENE_TYPE_name = map[int32]string{
		0: "SCENE_TYPE_UNKNOWN",
		1: "SCENE_TYPE_CALL_SCENE",
		2: "SCENE_TYPE_JOIN_LIVE",
	}
	SCENE_TYPE_value = map[string]int32{
		"SCENE_TYPE_UNKNOWN":    0,
		"SCENE_TYPE_CALL_SCENE": 1,
		"SCENE_TYPE_JOIN_LIVE":  2,
	}
)

func (x SCENE_TYPE) Enum() *SCENE_TYPE {
	p := new(SCENE_TYPE)
	*p = x
	return p
}

func (x SCENE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCENE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[11].Descriptor()
}

func (SCENE_TYPE) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[11]
}

func (x SCENE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCENE_TYPE.Descriptor instead.
func (SCENE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{11}
}

type SendType int32

const (
	SendType_TO_SERVICE   SendType = 0
	SendType_TO_AIM_USER  SendType = 1
	SendType_TO_ALL_USER  SendType = 2
	SendType_TO_AIM_GROUP SendType = 3
	SendType_TO_ALL_GROUP SendType = 4
)

// Enum value maps for SendType.
var (
	SendType_name = map[int32]string{
		0: "TO_SERVICE",
		1: "TO_AIM_USER",
		2: "TO_ALL_USER",
		3: "TO_AIM_GROUP",
		4: "TO_ALL_GROUP",
	}
	SendType_value = map[string]int32{
		"TO_SERVICE":   0,
		"TO_AIM_USER":  1,
		"TO_ALL_USER":  2,
		"TO_AIM_GROUP": 3,
		"TO_ALL_GROUP": 4,
	}
)

func (x SendType) Enum() *SendType {
	p := new(SendType)
	*p = x
	return p
}

func (x SendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[12].Descriptor()
}

func (SendType) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[12]
}

func (x SendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendType.Descriptor instead.
func (SendType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{12}
}

type EnterRoomReq_UserType int32

const (
	EnterRoomReq_UNKNOWN EnterRoomReq_UserType = 0 // 默认为正常用户
	EnterRoomReq_REGULAR EnterRoomReq_UserType = 1 // 正常
	EnterRoomReq_VISITOR EnterRoomReq_UserType = 2 // 游客
)

// Enum value maps for EnterRoomReq_UserType.
var (
	EnterRoomReq_UserType_name = map[int32]string{
		0: "UNKNOWN",
		1: "REGULAR",
		2: "VISITOR",
	}
	EnterRoomReq_UserType_value = map[string]int32{
		"UNKNOWN": 0,
		"REGULAR": 1,
		"VISITOR": 2,
	}
)

func (x EnterRoomReq_UserType) Enum() *EnterRoomReq_UserType {
	p := new(EnterRoomReq_UserType)
	*p = x
	return p
}

func (x EnterRoomReq_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterRoomReq_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[13].Descriptor()
}

func (EnterRoomReq_UserType) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[13]
}

func (x EnterRoomReq_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterRoomReq_UserType.Descriptor instead.
func (EnterRoomReq_UserType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{9, 0}
}

type ServerNotify_From int32

const (
	ServerNotify_IM   ServerNotify_From = 0
	ServerNotify_JAVA ServerNotify_From = 1
)

// Enum value maps for ServerNotify_From.
var (
	ServerNotify_From_name = map[int32]string{
		0: "IM",
		1: "JAVA",
	}
	ServerNotify_From_value = map[string]int32{
		"IM":   0,
		"JAVA": 1,
	}
)

func (x ServerNotify_From) Enum() *ServerNotify_From {
	p := new(ServerNotify_From)
	*p = x
	return p
}

func (x ServerNotify_From) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerNotify_From) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pub_comm_proto_enumTypes[14].Descriptor()
}

func (ServerNotify_From) Type() protoreflect.EnumType {
	return &file_pb_pub_comm_proto_enumTypes[14]
}

func (x ServerNotify_From) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerNotify_From.Descriptor instead.
func (ServerNotify_From) EnumDescriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{23, 0}
}

// 一些通用数据，每个消息都会携带，在整个服务系统中透传
type PBCommData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedReadReceipt bool              `protobuf:"varint,1,opt,name=needReadReceipt,proto3" json:"needReadReceipt,omitempty"`                                                                //是否需要回执
	MsgSn           int64             `protobuf:"varint,2,opt,name=msgSn,proto3" json:"msgSn,omitempty"`                                                                                    // 消息序列号
	SrcId           int64             `protobuf:"varint,3,opt,name=srcId,proto3" json:"srcId,omitempty"`                                                                                    // 发起者id
	AimId           int64             `protobuf:"varint,4,opt,name=aimId,proto3" json:"aimId,omitempty"`                                                                                    // 目标id
	Time            int64             `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                                                                      // 消息发送时间 gate 上赋值
	Exp             map[string]string `protobuf:"bytes,6,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展参数
	// v2.7.3
	NeedPushMsg bool    `protobuf:"varint,7,opt,name=needPushMsg,proto3" json:"needPushMsg,omitempty"`                     // 是否需要推送
	ServiceType Service `protobuf:"varint,8,opt,name=serviceType,proto3,enum=pb_pub.Service" json:"serviceType,omitempty"` // 服务类型
	// im_as_plat 新增
	AppId     int64  `protobuf:"varint,9,opt,name=appId,proto3" json:"appId,omitempty"`
	AppUserId string `protobuf:"bytes,10,opt,name=appUserId,proto3" json:"appUserId,omitempty"`
	// tracing 新增
	TraceId string `protobuf:"bytes,11,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// 客户端类型
	SrcClientType CLIENT_TYPE `protobuf:"varint,12,opt,name=srcClientType,proto3,enum=pb_pub.CLIENT_TYPE" json:"srcClientType,omitempty"` // 发送端类型
	AimClientType CLIENT_TYPE `protobuf:"varint,13,opt,name=aimClientType,proto3,enum=pb_pub.CLIENT_TYPE" json:"aimClientType,omitempty"` // 接收端类型
	GroupId       int64       `protobuf:"varint,14,opt,name=groupId,proto3" json:"groupId,omitempty"`                                     // 群ID
	AtList        []int64     `protobuf:"varint,15,rep,packed,name=atList,proto3" json:"atList,omitempty"`                                // @列表
	SyncToSrc     bool        `protobuf:"varint,16,opt,name=syncToSrc,proto3" json:"syncToSrc,omitempty"`                                 // 是否同步给src的其他端
	// 业务id,椰果需求新增, 范围比appId大: 各业务自行约定
	BusinessId int32 `protobuf:"varint,17,opt,name=businessId,proto3" json:"businessId,omitempty"`
	// 日志输出序列，每输出一次加一
	Serial int64 `protobuf:"varint,18,opt,name=serial,proto3" json:"serial,omitempty"`
	// 派生树，值=值+serial
	DeriveTree        string `protobuf:"bytes,19,opt,name=deriveTree,proto3" json:"deriveTree,omitempty"`
	UserSourceVersion int32  `protobuf:"varint,20,opt,name=userSourceVersion,proto3" json:"userSourceVersion,omitempty"` //'用户资源版本号'
	GroupMsgSn        int64  `protobuf:"varint,21,opt,name=groupMsgSn,proto3" json:"groupMsgSn,omitempty"`               // 群消息自增长序列号，每个群唯一，服务端生成
	PeriodOfValidity  int64  `protobuf:"varint,22,opt,name=periodOfValidity,proto3" json:"periodOfValidity,omitempty"`   // 有效期
}

func (x *PBCommData) Reset() {
	*x = PBCommData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBCommData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBCommData) ProtoMessage() {}

func (x *PBCommData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBCommData.ProtoReflect.Descriptor instead.
func (*PBCommData) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{0}
}

func (x *PBCommData) GetNeedReadReceipt() bool {
	if x != nil {
		return x.NeedReadReceipt
	}
	return false
}

func (x *PBCommData) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *PBCommData) GetSrcId() int64 {
	if x != nil {
		return x.SrcId
	}
	return 0
}

func (x *PBCommData) GetAimId() int64 {
	if x != nil {
		return x.AimId
	}
	return 0
}

func (x *PBCommData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PBCommData) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *PBCommData) GetNeedPushMsg() bool {
	if x != nil {
		return x.NeedPushMsg
	}
	return false
}

func (x *PBCommData) GetServiceType() Service {
	if x != nil {
		return x.ServiceType
	}
	return Service_gate
}

func (x *PBCommData) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *PBCommData) GetAppUserId() string {
	if x != nil {
		return x.AppUserId
	}
	return ""
}

func (x *PBCommData) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *PBCommData) GetSrcClientType() CLIENT_TYPE {
	if x != nil {
		return x.SrcClientType
	}
	return CLIENT_TYPE_NONE
}

func (x *PBCommData) GetAimClientType() CLIENT_TYPE {
	if x != nil {
		return x.AimClientType
	}
	return CLIENT_TYPE_NONE
}

func (x *PBCommData) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *PBCommData) GetAtList() []int64 {
	if x != nil {
		return x.AtList
	}
	return nil
}

func (x *PBCommData) GetSyncToSrc() bool {
	if x != nil {
		return x.SyncToSrc
	}
	return false
}

func (x *PBCommData) GetBusinessId() int32 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *PBCommData) GetSerial() int64 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *PBCommData) GetDeriveTree() string {
	if x != nil {
		return x.DeriveTree
	}
	return ""
}

func (x *PBCommData) GetUserSourceVersion() int32 {
	if x != nil {
		return x.UserSourceVersion
	}
	return 0
}

func (x *PBCommData) GetGroupMsgSn() int64 {
	if x != nil {
		return x.GroupMsgSn
	}
	return 0
}

func (x *PBCommData) GetPeriodOfValidity() int64 {
	if x != nil {
		return x.PeriodOfValidity
	}
	return 0
}

// 非rpc调用的消息传递使用此消息头封装
type PBMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    uint32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`     // 消息版本号
	CheckCode  uint32            `protobuf:"varint,2,opt,name=checkCode,proto3" json:"checkCode,omitempty"` // 校验码 unsigned byte类型表示的具体消息数据无符号字节累加值
	ErrCode    uint32            `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`     // 错误码
	Service    string            `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`      // 需要发往那个service :gate uc lc ...
	HashKey    string            `protobuf:"bytes,5,opt,name=hashKey,proto3" json:"hashKey,omitempty"`      // 转发到其他服务上去的hashkey, 可以是用户id，组id等
	PbCommData *PBCommData       `protobuf:"bytes,6,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	Opts       map[string]string `protobuf:"bytes,7,rep,name=opts,proto3" json:"opts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 控制参数
	// 具体消息内容
	PbName  string `protobuf:"bytes,8,opt,name=pbName,proto3" json:"pbName,omitempty"`    // pb消息名称
	PbData  []byte `protobuf:"bytes,9,opt,name=pbData,proto3" json:"pbData,omitempty"`    // 消息数据
	ErrDesc string `protobuf:"bytes,10,opt,name=errDesc,proto3" json:"errDesc,omitempty"` // 错误描述信息
}

func (x *PBMessage) Reset() {
	*x = PBMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBMessage) ProtoMessage() {}

func (x *PBMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBMessage.ProtoReflect.Descriptor instead.
func (*PBMessage) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{1}
}

func (x *PBMessage) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PBMessage) GetCheckCode() uint32 {
	if x != nil {
		return x.CheckCode
	}
	return 0
}

func (x *PBMessage) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *PBMessage) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PBMessage) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *PBMessage) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *PBMessage) GetOpts() map[string]string {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *PBMessage) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *PBMessage) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *PBMessage) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

// 定义
// key: action
// value:sendto_user 单发到用户;  [key:uid, value:uid_value]
// value:sendto_all:广播到所有在线用户;
// value:sendto_service:发送到特定服务 [key:service_name;value:name][key:room, value:roomid]
// action = "sendto_group" 发送到在使用特定服务的用户 service="servicename" group=roomid,可以代表房间id
// key:data value:data
type CommCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PbName string            `protobuf:"bytes,2,opt,name=pbName,proto3" json:"pbName,omitempty"`
	PbData []byte            `protobuf:"bytes,3,opt,name=pbData,proto3" json:"pbData,omitempty"`
}

func (x *CommCallReq) Reset() {
	*x = CommCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommCallReq) ProtoMessage() {}

func (x *CommCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommCallReq.ProtoReflect.Descriptor instead.
func (*CommCallReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{2}
}

func (x *CommCallReq) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CommCallReq) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *CommCallReq) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

type CommCallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32             `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Params  map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PbName  string            `protobuf:"bytes,3,opt,name=pbName,proto3" json:"pbName,omitempty"`
	PbData  []byte            `protobuf:"bytes,4,opt,name=pbData,proto3" json:"pbData,omitempty"`
	ErrDesc string            `protobuf:"bytes,5,opt,name=errDesc,proto3" json:"errDesc,omitempty"`
	Status  *status.Status    `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // 执行状态, 逐步替换 errCode 和 errDesc
}

func (x *CommCallRsp) Reset() {
	*x = CommCallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommCallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommCallRsp) ProtoMessage() {}

func (x *CommCallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommCallRsp.ProtoReflect.Descriptor instead.
func (*CommCallRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{3}
}

func (x *CommCallRsp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommCallRsp) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CommCallRsp) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *CommCallRsp) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

func (x *CommCallRsp) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

func (x *CommCallRsp) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CommNatsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PbCommData *PBCommData `protobuf:"bytes,1,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	GroupMsgSn int64       `protobuf:"varint,2,opt,name=groupMsgSn,proto3" json:"groupMsgSn,omitempty"`
	PbName     string      `protobuf:"bytes,3,opt,name=pbName,proto3" json:"pbName,omitempty"`
	PbData     []byte      `protobuf:"bytes,4,opt,name=pbData,proto3" json:"pbData,omitempty"`
}

func (x *CommNatsMsg) Reset() {
	*x = CommNatsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommNatsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommNatsMsg) ProtoMessage() {}

func (x *CommNatsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommNatsMsg.ProtoReflect.Descriptor instead.
func (*CommNatsMsg) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{4}
}

func (x *CommNatsMsg) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *CommNatsMsg) GetGroupMsgSn() int64 {
	if x != nil {
		return x.GroupMsgSn
	}
	return 0
}

func (x *CommNatsMsg) GetPbName() string {
	if x != nil {
		return x.PbName
	}
	return ""
}

func (x *CommNatsMsg) GetPbData() []byte {
	if x != nil {
		return x.PbData
	}
	return nil
}

// 当一次删除多条时，输入最后一条的time，将time之前所有的消息全部删除
// 当只进行单条删除，time设为0，通过sn进行单条消息的删除
// 消息状态反馈
type MsgReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAtMe bool      `protobuf:"varint,1,opt,name=isAtMe,proto3" json:"isAtMe,omitempty"` // 消息是否@自己，回复的时候设置
	State  MSG_STATE `protobuf:"varint,2,opt,name=state,proto3,enum=pb_pub.MSG_STATE" json:"state,omitempty"`
	Time   int64     `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MsgReceipt) Reset() {
	*x = MsgReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReceipt) ProtoMessage() {}

func (x *MsgReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgReceipt.ProtoReflect.Descriptor instead.
func (*MsgReceipt) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{5}
}

func (x *MsgReceipt) GetIsAtMe() bool {
	if x != nil {
		return x.IsAtMe
	}
	return false
}

func (x *MsgReceipt) GetState() MSG_STATE {
	if x != nil {
		return x.State
	}
	return MSG_STATE_INIT
}

func (x *MsgReceipt) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 默认返回消息
type CommRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ErrCode        `protobuf:"varint,1,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"` // 0 successed, other error， 统一到status里面，逐步替换
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                      // 执行状态
}

func (x *CommRsp) Reset() {
	*x = CommRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommRsp) ProtoMessage() {}

func (x *CommRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommRsp.ProtoReflect.Descriptor instead.
func (*CommRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{6}
}

func (x *CommRsp) GetResult() ErrCode {
	if x != nil {
		return x.Result
	}
	return ErrCode_SUCCESS
}

func (x *CommRsp) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 心跳消息
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// int64 user_id = 1;
	Type     HEART_BEAT_TYPE      `protobuf:"varint,2,opt,name=type,proto3,enum=pb_pub.HEART_BEAT_TYPE" json:"type,omitempty"`
	State    HEART_BEAT_MSG_STATE `protobuf:"varint,3,opt,name=state,proto3,enum=pb_pub.HEART_BEAT_MSG_STATE" json:"state,omitempty"`
	GateAddr string               `protobuf:"bytes,4,opt,name=gateAddr,proto3" json:"gateAddr,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{8}
}

func (x *HeartBeat) GetType() HEART_BEAT_TYPE {
	if x != nil {
		return x.Type
	}
	return HEART_BEAT_TYPE_COMM
}

func (x *HeartBeat) GetState() HEART_BEAT_MSG_STATE {
	if x != nil {
		return x.State
	}
	return HEART_BEAT_MSG_STATE_PING
}

func (x *HeartBeat) GetGateAddr() string {
	if x != nil {
		return x.GateAddr
	}
	return ""
}

// ============进入房间通用协议，任何类型的房间都可以使用此协议======================
// 进入房间请求
type EnterRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType EnterRoomReq_UserType `protobuf:"varint,1,opt,name=userType,proto3,enum=pb_pub.EnterRoomReq_UserType" json:"userType,omitempty"`
}

func (x *EnterRoomReq) Reset() {
	*x = EnterRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoomReq) ProtoMessage() {}

func (x *EnterRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoomReq.ProtoReflect.Descriptor instead.
func (*EnterRoomReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{9}
}

func (x *EnterRoomReq) GetUserType() EnterRoomReq_UserType {
	if x != nil {
		return x.UserType
	}
	return EnterRoomReq_UNKNOWN
}

// 观众进入房间应答 返回加入结果
type EnterRoomRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnterRoomRsp) Reset() {
	*x = EnterRoomRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRoomRsp) ProtoMessage() {}

func (x *EnterRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRoomRsp.ProtoReflect.Descriptor instead.
func (*EnterRoomRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{10}
}

// 退出房间请求
type ExitRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRoomReq) Reset() {
	*x = ExitRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomReq) ProtoMessage() {}

func (x *ExitRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomReq.ProtoReflect.Descriptor instead.
func (*ExitRoomReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{11}
}

// 退出房间应答
type ExitRoomRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRoomRsp) Reset() {
	*x = ExitRoomRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRoomRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomRsp) ProtoMessage() {}

func (x *ExitRoomRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomRsp.ProtoReflect.Descriptor instead.
func (*ExitRoomRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{12}
}

// 客户端前后台切换请求,消息发送时服务类型设置为 user_center
type ClientBFSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true:切换到后台， false 切换到前台
	// 切换前台需要等返回，如果没有成功或超时则继续切换
	SwitchToBack bool `protobuf:"varint,1,opt,name=switchToBack,proto3" json:"switchToBack,omitempty"`
}

func (x *ClientBFSwitchReq) Reset() {
	*x = ClientBFSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBFSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBFSwitchReq) ProtoMessage() {}

func (x *ClientBFSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBFSwitchReq.ProtoReflect.Descriptor instead.
func (*ClientBFSwitchReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{13}
}

func (x *ClientBFSwitchReq) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

// 切换回复，返回当前状态
type ClientBFSwitchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchToBack bool `protobuf:"varint,1,opt,name=switchToBack,proto3" json:"switchToBack,omitempty"` // true:目前后台， false 目前前台
}

func (x *ClientBFSwitchRsp) Reset() {
	*x = ClientBFSwitchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientBFSwitchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBFSwitchRsp) ProtoMessage() {}

func (x *ClientBFSwitchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBFSwitchRsp.ProtoReflect.Descriptor instead.
func (*ClientBFSwitchRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{14}
}

func (x *ClientBFSwitchRsp) GetSwitchToBack() bool {
	if x != nil {
		return x.SwitchToBack
	}
	return false
}

// 用户进出直播间
type UserOperationRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64     `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RoomId    int64     `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Time      int64     `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Operation OPERATION `protobuf:"varint,4,opt,name=operation,proto3,enum=pb_pub.OPERATION" json:"operation,omitempty"`
	TimeLen   int64     `protobuf:"varint,5,opt,name=timeLen,proto3" json:"timeLen,omitempty"`
}

func (x *UserOperationRoom) Reset() {
	*x = UserOperationRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOperationRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOperationRoom) ProtoMessage() {}

func (x *UserOperationRoom) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOperationRoom.ProtoReflect.Descriptor instead.
func (*UserOperationRoom) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{15}
}

func (x *UserOperationRoom) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserOperationRoom) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *UserOperationRoom) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UserOperationRoom) GetOperation() OPERATION {
	if x != nil {
		return x.Operation
	}
	return OPERATION_UNKNOWN
}

func (x *UserOperationRoom) GetTimeLen() int64 {
	if x != nil {
		return x.TimeLen
	}
	return 0
}

// 礼物消息 消息的AimId即为为房间ID
type Gift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`         // 发送的用户ID
	GiftId     int64 `protobuf:"varint,2,opt,name=giftId,proto3" json:"giftId,omitempty"`         // 礼物ID
	ActorId    int64 `protobuf:"varint,3,opt,name=actorId,proto3" json:"actorId,omitempty"`       // 收礼物的主播ID
	GiftNumber int64 `protobuf:"varint,4,opt,name=giftNumber,proto3" json:"giftNumber,omitempty"` // 送礼数量
	// int32 luckyGift = 5; // 礼物类型 int 【普通礼物，夺宝礼物，福袋】 是否为幸运礼物
	SenderName             string            `protobuf:"bytes,6,opt,name=senderName,proto3" json:"senderName,omitempty"`                                                                            // 发送的用户名
	TargetName             string            `protobuf:"bytes,7,opt,name=targetName,proto3" json:"targetName,omitempty"`                                                                            // 发送的房间名字即主播名字
	HeadImg                string            `protobuf:"bytes,8,opt,name=headImg,proto3" json:"headImg,omitempty"`                                                                                  // 发送的用户头像
	Level                  int32             `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`                                                                                     // 等级
	BatteryType            int32             `protobuf:"varint,10,opt,name=batteryType,proto3" json:"batteryType,omitempty"`                                                                        //单词连击的个数
	BatteryTypeList        []int64           `protobuf:"varint,11,rep,packed,name=batteryTypeList,proto3" json:"batteryTypeList,omitempty"`                                                         //每次连击的个数数组
	LevelPrivilegeOpen     bool              `protobuf:"varint,12,opt,name=levelPrivilegeOpen,proto3" json:"levelPrivilegeOpen,omitempty"`                                                          //是否神秘人
	GiftConfLastUpdateTime int64             `protobuf:"varint,13,opt,name=giftConfLastUpdateTime,proto3" json:"giftConfLastUpdateTime,omitempty"`                                                  // 缓存时间
	Exp                    map[string]string `protobuf:"bytes,14,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展字段
	GiftType               int32             `protobuf:"varint,15,opt,name=giftType,proto3" json:"giftType,omitempty"`                                                                              // 礼物类型 0：普通礼物 1：幸运礼物 2：福袋 3：钓鱼 4：幸运补偿
}

func (x *Gift) Reset() {
	*x = Gift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gift) ProtoMessage() {}

func (x *Gift) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gift.ProtoReflect.Descriptor instead.
func (*Gift) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{16}
}

func (x *Gift) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Gift) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *Gift) GetActorId() int64 {
	if x != nil {
		return x.ActorId
	}
	return 0
}

func (x *Gift) GetGiftNumber() int64 {
	if x != nil {
		return x.GiftNumber
	}
	return 0
}

func (x *Gift) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *Gift) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *Gift) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *Gift) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Gift) GetBatteryType() int32 {
	if x != nil {
		return x.BatteryType
	}
	return 0
}

func (x *Gift) GetBatteryTypeList() []int64 {
	if x != nil {
		return x.BatteryTypeList
	}
	return nil
}

func (x *Gift) GetLevelPrivilegeOpen() bool {
	if x != nil {
		return x.LevelPrivilegeOpen
	}
	return false
}

func (x *Gift) GetGiftConfLastUpdateTime() int64 {
	if x != nil {
		return x.GiftConfLastUpdateTime
	}
	return 0
}

func (x *Gift) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *Gift) GetGiftType() int32 {
	if x != nil {
		return x.GiftType
	}
	return 0
}

// 登录成功通知到nsq
type LogonSuccessNotifyNsq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn  int64 `protobuf:"varint,1,opt,name=MsgSn,proto3" json:"MsgSn,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Time   int64 `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *LogonSuccessNotifyNsq) Reset() {
	*x = LogonSuccessNotifyNsq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogonSuccessNotifyNsq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonSuccessNotifyNsq) ProtoMessage() {}

func (x *LogonSuccessNotifyNsq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonSuccessNotifyNsq.ProtoReflect.Descriptor instead.
func (*LogonSuccessNotifyNsq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{17}
}

func (x *LogonSuccessNotifyNsq) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *LogonSuccessNotifyNsq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogonSuccessNotifyNsq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 场景需要恢复，通知到前端
type NeedSceneRecoverNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType Service           `protobuf:"varint,1,opt,name=ServiceType,proto3,enum=pb_pub.Service" json:"ServiceType,omitempty"`
	Exp         map[string]string `protobuf:"bytes,2,rep,name=Exp,proto3" json:"Exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NeedSceneRecoverNotify) Reset() {
	*x = NeedSceneRecoverNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeedSceneRecoverNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedSceneRecoverNotify) ProtoMessage() {}

func (x *NeedSceneRecoverNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedSceneRecoverNotify.ProtoReflect.Descriptor instead.
func (*NeedSceneRecoverNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{18}
}

func (x *NeedSceneRecoverNotify) GetServiceType() Service {
	if x != nil {
		return x.ServiceType
	}
	return Service_gate
}

func (x *NeedSceneRecoverNotify) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

// 用户场景
type UserScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64      `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	SceneId   int64      `protobuf:"varint,2,opt,name=SceneId,proto3" json:"SceneId,omitempty"`
	SceneType SCENE_TYPE `protobuf:"varint,3,opt,name=SceneType,proto3,enum=pb_pub.SCENE_TYPE" json:"SceneType,omitempty"`
}

func (x *UserScene) Reset() {
	*x = UserScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScene) ProtoMessage() {}

func (x *UserScene) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScene.ProtoReflect.Descriptor instead.
func (*UserScene) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{19}
}

func (x *UserScene) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserScene) GetSceneId() int64 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *UserScene) GetSceneType() SCENE_TYPE {
	if x != nil {
		return x.SceneType
	}
	return SCENE_TYPE_SCENE_TYPE_UNKNOWN
}

// HTTP API 调用的消息使用此消息头封装
type JSONMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashKey     string      `protobuf:"bytes,1,opt,name=hashKey,proto3" json:"hashKey,omitempty"` // 转发到其他服务上去的hashkey, 可以是用户id，组id等
	Secret      string      `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`   // app secret
	PbCommData  *PBCommData `protobuf:"bytes,3,opt,name=pbCommData,proto3" json:"pbCommData,omitempty"`
	MessageName string      `protobuf:"bytes,4,opt,name=messageName,proto3" json:"messageName,omitempty"`                 // pb消息名称
	MessageData string      `protobuf:"bytes,5,opt,name=messageData,proto3" json:"messageData,omitempty"`                 // 请求数据
	SendType    SendType    `protobuf:"varint,6,opt,name=sendType,proto3,enum=pb_pub.SendType" json:"sendType,omitempty"` // 发送类型
}

func (x *JSONMessage) Reset() {
	*x = JSONMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONMessage) ProtoMessage() {}

func (x *JSONMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONMessage.ProtoReflect.Descriptor instead.
func (*JSONMessage) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{20}
}

func (x *JSONMessage) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *JSONMessage) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *JSONMessage) GetPbCommData() *PBCommData {
	if x != nil {
		return x.PbCommData
	}
	return nil
}

func (x *JSONMessage) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *JSONMessage) GetMessageData() string {
	if x != nil {
		return x.MessageData
	}
	return ""
}

func (x *JSONMessage) GetSendType() SendType {
	if x != nil {
		return x.SendType
	}
	return SendType_TO_SERVICE
}

type JSONCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageName string `protobuf:"bytes,3,opt,name=messageName,proto3" json:"messageName,omitempty"` // pb消息名称
	MessageData []byte `protobuf:"bytes,4,opt,name=messageData,proto3" json:"messageData,omitempty"` // 请求数据
}

func (x *JSONCallReq) Reset() {
	*x = JSONCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONCallReq) ProtoMessage() {}

func (x *JSONCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONCallReq.ProtoReflect.Descriptor instead.
func (*JSONCallReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{21}
}

func (x *JSONCallReq) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *JSONCallReq) GetMessageData() []byte {
	if x != nil {
		return x.MessageData
	}
	return nil
}

type JSONCallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode     ErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=pb_pub.ErrCode" json:"errCode,omitempty"` // 错误码
	ErrDesc     string  `protobuf:"bytes,2,opt,name=errDesc,proto3" json:"errDesc,omitempty"`                      // 错误描述信息
	MessageData []byte  `protobuf:"bytes,3,opt,name=messageData,proto3" json:"messageData,omitempty"`              // 响应数据
}

func (x *JSONCallRsp) Reset() {
	*x = JSONCallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONCallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONCallRsp) ProtoMessage() {}

func (x *JSONCallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONCallRsp.ProtoReflect.Descriptor instead.
func (*JSONCallRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{22}
}

func (x *JSONCallRsp) GetErrCode() ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrCode_SUCCESS
}

func (x *JSONCallRsp) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

func (x *JSONCallRsp) GetMessageData() []byte {
	if x != nil {
		return x.MessageData
	}
	return nil
}

// 服务端触发
type ServerNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    ServerNotify_From `protobuf:"varint,1,opt,name=from,proto3,enum=pb_pub.ServerNotify_From" json:"from,omitempty"` // 通知来源
	Service Service           `protobuf:"varint,2,opt,name=service,proto3,enum=pb_pub.Service" json:"service,omitempty"`     // 服务类型,标记来自im哪个服务
	ErrCode ErrCode           `protobuf:"varint,3,opt,name=errCode,proto3,enum=pb_pub.ErrCode" json:"errCode,omitempty"`     // 错误码
	ErrDesc string            `protobuf:"bytes,4,opt,name=errDesc,proto3" json:"errDesc,omitempty"`                          // 错误描述信息
	Exp     map[string]string `protobuf:"bytes,5,rep,name=Exp,proto3" json:"Exp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerNotify) Reset() {
	*x = ServerNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNotify) ProtoMessage() {}

func (x *ServerNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNotify.ProtoReflect.Descriptor instead.
func (*ServerNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{23}
}

func (x *ServerNotify) GetFrom() ServerNotify_From {
	if x != nil {
		return x.From
	}
	return ServerNotify_IM
}

func (x *ServerNotify) GetService() Service {
	if x != nil {
		return x.Service
	}
	return Service_gate
}

func (x *ServerNotify) GetErrCode() ErrCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrCode_SUCCESS
}

func (x *ServerNotify) GetErrDesc() string {
	if x != nil {
		return x.ErrDesc
	}
	return ""
}

func (x *ServerNotify) GetExp() map[string]string {
	if x != nil {
		return x.Exp
	}
	return nil
}

// 撤回消息
type MsgRecallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn      int64 `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`           // 消息id
	MsgOwnerId int64 `protobuf:"varint,2,opt,name=msgOwnerId,proto3" json:"msgOwnerId,omitempty"` // 撤回消息的主人
}

func (x *MsgRecallReq) Reset() {
	*x = MsgRecallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRecallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRecallReq) ProtoMessage() {}

func (x *MsgRecallReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRecallReq.ProtoReflect.Descriptor instead.
func (*MsgRecallReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{24}
}

func (x *MsgRecallReq) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *MsgRecallReq) GetMsgOwnerId() int64 {
	if x != nil {
		return x.MsgOwnerId
	}
	return 0
}

type MsgRecallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn      int64   `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`           // 消息id
	MsgOwnerId int64   `protobuf:"varint,2,opt,name=msgOwnerId,proto3" json:"msgOwnerId,omitempty"` // 撤回消息的主人
	Result     ErrCode `protobuf:"varint,3,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *MsgRecallRsp) Reset() {
	*x = MsgRecallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRecallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRecallRsp) ProtoMessage() {}

func (x *MsgRecallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRecallRsp.ProtoReflect.Descriptor instead.
func (*MsgRecallRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{25}
}

func (x *MsgRecallRsp) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *MsgRecallRsp) GetMsgOwnerId() int64 {
	if x != nil {
		return x.MsgOwnerId
	}
	return 0
}

func (x *MsgRecallRsp) GetResult() ErrCode {
	if x != nil {
		return x.Result
	}
	return ErrCode_SUCCESS
}

// 更改消息
type MsgChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn      int64             `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`                                                                                                  // 消息id
	ChangeData map[string]string `protobuf:"bytes,2,rep,name=changeData,proto3" json:"changeData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 更改内容,字段名：新数据；字段名为json命名格式小写开头驼峰格式
}

func (x *MsgChangeReq) Reset() {
	*x = MsgChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChangeReq) ProtoMessage() {}

func (x *MsgChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChangeReq.ProtoReflect.Descriptor instead.
func (*MsgChangeReq) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{26}
}

func (x *MsgChangeReq) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *MsgChangeReq) GetChangeData() map[string]string {
	if x != nil {
		return x.ChangeData
	}
	return nil
}

// 更改消息
type MsgChangeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSn      int64             `protobuf:"varint,1,opt,name=msgSn,proto3" json:"msgSn,omitempty"`                                                                                                  // 消息id
	ChangeData map[string]string `protobuf:"bytes,2,rep,name=changeData,proto3" json:"changeData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 更改内容,字段名：新数据
	Result     ErrCode           `protobuf:"varint,3,opt,name=result,proto3,enum=pb_pub.ErrCode" json:"result,omitempty"`
}

func (x *MsgChangeRsp) Reset() {
	*x = MsgChangeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChangeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChangeRsp) ProtoMessage() {}

func (x *MsgChangeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChangeRsp.ProtoReflect.Descriptor instead.
func (*MsgChangeRsp) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{27}
}

func (x *MsgChangeRsp) GetMsgSn() int64 {
	if x != nil {
		return x.MsgSn
	}
	return 0
}

func (x *MsgChangeRsp) GetChangeData() map[string]string {
	if x != nil {
		return x.ChangeData
	}
	return nil
}

func (x *MsgChangeRsp) GetResult() ErrCode {
	if x != nil {
		return x.Result
	}
	return ErrCode_SUCCESS
}

// 客户端触发的截屏通知，私聊截屏发送到私聊，群聊截屏发送到当前群
type TakeScreenShotNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TakeScreenShotNotify) Reset() {
	*x = TakeScreenShotNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeScreenShotNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeScreenShotNotify) ProtoMessage() {}

func (x *TakeScreenShotNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeScreenShotNotify.ProtoReflect.Descriptor instead.
func (*TakeScreenShotNotify) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{28}
}

type AppClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelType         MODEL_TYPE `protobuf:"varint,1,opt,name=modelType,proto3,enum=pb_pub.MODEL_TYPE" json:"modelType,omitempty"` // 推送厂商类型
	PackageName       string     `protobuf:"bytes,2,opt,name=packageName,proto3" json:"packageName,omitempty"`                     // 包名
	SystemVersion     string     `protobuf:"bytes,3,opt,name=systemVersion,proto3" json:"systemVersion,omitempty"`                 // 手机操作系统版本号    12.2
	PhoneModels       string     `protobuf:"bytes,4,opt,name=phoneModels,proto3" json:"phoneModels,omitempty"`                     // 手机型号             iPhone 7
	AppVersion        string     `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`                       // app应用版本号           2.2.5/debug2.5.6(build256)
	SystemName        string     `protobuf:"bytes,6,opt,name=systemName,proto3" json:"systemName,omitempty"`                       // android/iOS
	Identifier        string     `protobuf:"bytes,7,opt,name=identifier,proto3" json:"identifier,omitempty"`                       // 手机设备号
	XChannel          string     `protobuf:"bytes,8,opt,name=xChannel,proto3" json:"xChannel,omitempty"`                           // 渠道号               default_1....
	PushPlatformAppId string     `protobuf:"bytes,9,opt,name=pushPlatformAppId,proto3" json:"pushPlatformAppId,omitempty"`         // 应用id，厂商开发者平台获取，每个包唯一
	Odid              string     `protobuf:"bytes,10,opt,name=odid,proto3" json:"odid,omitempty"`                                  // 开放设备标识符，开发者级别的非永久性设备标志符，同一设备上同一开发者的多个应用ODID取值相同，可用作设备唯一标识符
	Aaid              string     `protobuf:"bytes,11,opt,name=aaid,proto3" json:"aaid,omitempty"`                                  // 应用的匿名设备标识，标识运行在移动智能终端设备上的应用实例，同一开发者相同设备不同应用不同，用作实例唯一标识
	Token             string     `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`                                // 推送token，每个实例都不同, 有些平台叫  Registration ID
	Expired           int64      `protobuf:"varint,13,opt,name=expired,proto3" json:"expired,omitempty"`                           // token失效时间，token失效必须重新获取，一般卸载重装或系统清理数据时失效
}

func (x *AppClientInfo) Reset() {
	*x = AppClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppClientInfo) ProtoMessage() {}

func (x *AppClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppClientInfo.ProtoReflect.Descriptor instead.
func (*AppClientInfo) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{29}
}

func (x *AppClientInfo) GetModelType() MODEL_TYPE {
	if x != nil {
		return x.ModelType
	}
	return MODEL_TYPE_NIL
}

func (x *AppClientInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AppClientInfo) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *AppClientInfo) GetPhoneModels() string {
	if x != nil {
		return x.PhoneModels
	}
	return ""
}

func (x *AppClientInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *AppClientInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *AppClientInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *AppClientInfo) GetXChannel() string {
	if x != nil {
		return x.XChannel
	}
	return ""
}

func (x *AppClientInfo) GetPushPlatformAppId() string {
	if x != nil {
		return x.PushPlatformAppId
	}
	return ""
}

func (x *AppClientInfo) GetOdid() string {
	if x != nil {
		return x.Odid
	}
	return ""
}

func (x *AppClientInfo) GetAaid() string {
	if x != nil {
		return x.Aaid
	}
	return ""
}

func (x *AppClientInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AppClientInfo) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

type AppLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcd           *PBCommData               `protobuf:"bytes,1,opt,name=pcd,proto3" json:"pcd,omitempty"`                                                                                                   // 基础信息
	AppClientInfo *AppClientInfo            `protobuf:"bytes,2,opt,name=appClientInfo,proto3" json:"appClientInfo,omitempty"`                                                                               // 客户端数据
	KvValues      map[string]*_struct.Value `protobuf:"bytes,3,rep,name=kvValues,proto3" json:"kvValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 日志数据
}

func (x *AppLogData) Reset() {
	*x = AppLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pub_comm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogData) ProtoMessage() {}

func (x *AppLogData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pub_comm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogData.ProtoReflect.Descriptor instead.
func (*AppLogData) Descriptor() ([]byte, []int) {
	return file_pb_pub_comm_proto_rawDescGZIP(), []int{30}
}

func (x *AppLogData) GetPcd() *PBCommData {
	if x != nil {
		return x.Pcd
	}
	return nil
}

func (x *AppLogData) GetAppClientInfo() *AppClientInfo {
	if x != nil {
		return x.AppClientInfo
	}
	return nil
}

func (x *AppLogData) GetKvValues() map[string]*_struct.Value {
	if x != nil {
		return x.KvValues
	}
	return nil
}

var File_pb_pub_comm_proto protoreflect.FileDescriptor

var file_pb_pub_comm_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xae, 0x06, 0x0a, 0x0a, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73,
	0x67, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x72, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73,
	0x67, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d,
	0x73, 0x72, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x61, 0x69, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x61, 0x69, 0x6d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x6f, 0x53, 0x72, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x72, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x4f, 0x66, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x09, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x6f, 0x70,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x1a, 0x37, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1,
	0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x73,
	0x70, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4e,
	0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x0a, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41, 0x74,
	0x4d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x74, 0x4d, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75,
	0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x2e, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7c, 0x0a, 0x0c, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x49, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x46, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x22,
	0x37, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x46, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f,
	0x42, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0x91, 0x04,
	0x0a, 0x04, 0x47, 0x69, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x67, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x59, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x73, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x53, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x53, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a,
	0x16, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x45, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x2e, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x45, 0x78, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe5,
	0x01, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42,
	0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x5f,
	0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0b, 0x4a, 0x53, 0x4f,
	0x4e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70,
	0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xb0, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x2f, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x45, 0x78, 0x70,
	0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41,
	0x10, 0x01, 0x22, 0x44, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x73,
	0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x44,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x53, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x73, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x61, 0x6b, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x22, 0xad, 0x03, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75,
	0x73, 0x68, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x61, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x61, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x82, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x03, 0x70, 0x63, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x03, 0x70, 0x63, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x6b, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x53, 0x0a, 0x0d, 0x4b, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x7e, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x55, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4b, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49,
	0x4e, 0x55, 0x58, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x44,
	0x45, 0x42, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x45, 0x56, 0x36, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x52, 0x45, 0x56, 0x37, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52,
	0x45, 0x56, 0x38, 0x10, 0x08, 0x2a, 0x3b, 0x0a, 0x0b, 0x50, 0x43, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x4b, 0x45, 0x59, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x43, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0xe8, 0x07, 0x2a, 0x48, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x35, 0x10, 0x02, 0x12, 0x06,
	0x0a, 0x02, 0x50, 0x43, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x10, 0x64, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0xe8, 0x07, 0x2a, 0x8b, 0x01, 0x0a,
	0x17, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x5f, 0x46, 0x55, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0c, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49, 0x46, 0x54, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x41, 0x43, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0a, 0x2a,
	0x6b, 0x0a, 0x09, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x7d, 0x0a, 0x0a,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49,
	0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x50, 0x4f, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x49, 0x41,
	0x4f, 0x4d, 0x49, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x49, 0x5a, 0x55, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x56, 0x49, 0x56, 0x4f, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x49, 0x47, 0x55,
	0x41, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x43, 0x4d, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x4f, 0x4e, 0x47, 0x59, 0x41, 0x4f, 0x10, 0x09, 0x2a, 0x86, 0x01, 0x0a, 0x0f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4d, 0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x54, 0x4b, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x10, 0x06, 0x2a, 0x2a, 0x0a, 0x14, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45,
	0x41, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x4e, 0x47, 0x10, 0x01,
	0x2a, 0x6d, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x2a,
	0x2d, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x59,
	0x0a, 0x0a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x5f, 0x41, 0x49, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x5f, 0x41, 0x49,
	0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x42, 0x20, 0x5a, 0x1e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x30, 0x30, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_pub_comm_proto_rawDescOnce sync.Once
	file_pb_pub_comm_proto_rawDescData = file_pb_pub_comm_proto_rawDesc
)

func file_pb_pub_comm_proto_rawDescGZIP() []byte {
	file_pb_pub_comm_proto_rawDescOnce.Do(func() {
		file_pb_pub_comm_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_pub_comm_proto_rawDescData)
	})
	return file_pb_pub_comm_proto_rawDescData
}

var file_pb_pub_comm_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_pb_pub_comm_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_pb_pub_comm_proto_goTypes = []interface{}{
	(CLIENT_RUN_ENV_TYPE)(0),       // 0: pb_pub.CLIENT_RUN_ENV_TYPE
	(PCD_EXP_KEY)(0),               // 1: pb_pub.PCD_EXP_KEY
	(CLIENT_TYPE)(0),               // 2: pb_pub.CLIENT_TYPE
	(PushMsgClientActionType)(0),   // 3: pb_pub.PushMsgClientActionType
	(TextChatType)(0),              // 4: pb_pub.TextChatType
	(MSG_STATE)(0),                 // 5: pb_pub.MSG_STATE
	(MODEL_TYPE)(0),                // 6: pb_pub.MODEL_TYPE
	(HEART_BEAT_TYPE)(0),           // 7: pb_pub.HEART_BEAT_TYPE
	(HEART_BEAT_MSG_STATE)(0),      // 8: pb_pub.HEART_BEAT_MSG_STATE
	(USER_STATE_TYPE)(0),           // 9: pb_pub.USER_STATE_TYPE
	(OPERATION)(0),                 // 10: pb_pub.OPERATION
	(SCENE_TYPE)(0),                // 11: pb_pub.SCENE_TYPE
	(SendType)(0),                  // 12: pb_pub.SendType
	(EnterRoomReq_UserType)(0),     // 13: pb_pub.EnterRoomReq.UserType
	(ServerNotify_From)(0),         // 14: pb_pub.ServerNotify.From
	(*PBCommData)(nil),             // 15: pb_pub.PBCommData
	(*PBMessage)(nil),              // 16: pb_pub.PBMessage
	(*CommCallReq)(nil),            // 17: pb_pub.CommCallReq
	(*CommCallRsp)(nil),            // 18: pb_pub.CommCallRsp
	(*CommNatsMsg)(nil),            // 19: pb_pub.CommNatsMsg
	(*MsgReceipt)(nil),             // 20: pb_pub.MsgReceipt
	(*CommRsp)(nil),                // 21: pb_pub.CommRsp
	(*UserInfo)(nil),               // 22: pb_pub.UserInfo
	(*HeartBeat)(nil),              // 23: pb_pub.HeartBeat
	(*EnterRoomReq)(nil),           // 24: pb_pub.EnterRoomReq
	(*EnterRoomRsp)(nil),           // 25: pb_pub.EnterRoomRsp
	(*ExitRoomReq)(nil),            // 26: pb_pub.ExitRoomReq
	(*ExitRoomRsp)(nil),            // 27: pb_pub.ExitRoomRsp
	(*ClientBFSwitchReq)(nil),      // 28: pb_pub.ClientBFSwitchReq
	(*ClientBFSwitchRsp)(nil),      // 29: pb_pub.ClientBFSwitchRsp
	(*UserOperationRoom)(nil),      // 30: pb_pub.userOperationRoom
	(*Gift)(nil),                   // 31: pb_pub.Gift
	(*LogonSuccessNotifyNsq)(nil),  // 32: pb_pub.LogonSuccessNotifyNsq
	(*NeedSceneRecoverNotify)(nil), // 33: pb_pub.NeedSceneRecoverNotify
	(*UserScene)(nil),              // 34: pb_pub.UserScene
	(*JSONMessage)(nil),            // 35: pb_pub.JSONMessage
	(*JSONCallReq)(nil),            // 36: pb_pub.JSONCallReq
	(*JSONCallRsp)(nil),            // 37: pb_pub.JSONCallRsp
	(*ServerNotify)(nil),           // 38: pb_pub.ServerNotify
	(*MsgRecallReq)(nil),           // 39: pb_pub.MsgRecallReq
	(*MsgRecallRsp)(nil),           // 40: pb_pub.MsgRecallRsp
	(*MsgChangeReq)(nil),           // 41: pb_pub.MsgChangeReq
	(*MsgChangeRsp)(nil),           // 42: pb_pub.MsgChangeRsp
	(*TakeScreenShotNotify)(nil),   // 43: pb_pub.TakeScreenShotNotify
	(*AppClientInfo)(nil),          // 44: pb_pub.AppClientInfo
	(*AppLogData)(nil),             // 45: pb_pub.AppLogData
	nil,                            // 46: pb_pub.PBCommData.ExpEntry
	nil,                            // 47: pb_pub.PBMessage.OptsEntry
	nil,                            // 48: pb_pub.CommCallReq.ParamsEntry
	nil,                            // 49: pb_pub.CommCallRsp.ParamsEntry
	nil,                            // 50: pb_pub.Gift.ExpEntry
	nil,                            // 51: pb_pub.NeedSceneRecoverNotify.ExpEntry
	nil,                            // 52: pb_pub.ServerNotify.ExpEntry
	nil,                            // 53: pb_pub.MsgChangeReq.ChangeDataEntry
	nil,                            // 54: pb_pub.MsgChangeRsp.ChangeDataEntry
	nil,                            // 55: pb_pub.AppLogData.KvValuesEntry
	(Service)(0),                   // 56: pb_pub.Service
	(*status.Status)(nil),          // 57: google.rpc.Status
	(ErrCode)(0),                   // 58: pb_pub.ErrCode
	(*_struct.Value)(nil),          // 59: google.protobuf.Value
}
var file_pb_pub_comm_proto_depIdxs = []int32{
	46, // 0: pb_pub.PBCommData.exp:type_name -> pb_pub.PBCommData.ExpEntry
	56, // 1: pb_pub.PBCommData.serviceType:type_name -> pb_pub.Service
	2,  // 2: pb_pub.PBCommData.srcClientType:type_name -> pb_pub.CLIENT_TYPE
	2,  // 3: pb_pub.PBCommData.aimClientType:type_name -> pb_pub.CLIENT_TYPE
	15, // 4: pb_pub.PBMessage.pbCommData:type_name -> pb_pub.PBCommData
	47, // 5: pb_pub.PBMessage.opts:type_name -> pb_pub.PBMessage.OptsEntry
	48, // 6: pb_pub.CommCallReq.params:type_name -> pb_pub.CommCallReq.ParamsEntry
	49, // 7: pb_pub.CommCallRsp.params:type_name -> pb_pub.CommCallRsp.ParamsEntry
	57, // 8: pb_pub.CommCallRsp.status:type_name -> google.rpc.Status
	15, // 9: pb_pub.CommNatsMsg.pbCommData:type_name -> pb_pub.PBCommData
	5,  // 10: pb_pub.MsgReceipt.state:type_name -> pb_pub.MSG_STATE
	58, // 11: pb_pub.CommRsp.result:type_name -> pb_pub.ErrCode
	57, // 12: pb_pub.CommRsp.status:type_name -> google.rpc.Status
	7,  // 13: pb_pub.HeartBeat.type:type_name -> pb_pub.HEART_BEAT_TYPE
	8,  // 14: pb_pub.HeartBeat.state:type_name -> pb_pub.HEART_BEAT_MSG_STATE
	13, // 15: pb_pub.EnterRoomReq.userType:type_name -> pb_pub.EnterRoomReq.UserType
	10, // 16: pb_pub.userOperationRoom.operation:type_name -> pb_pub.OPERATION
	50, // 17: pb_pub.Gift.exp:type_name -> pb_pub.Gift.ExpEntry
	56, // 18: pb_pub.NeedSceneRecoverNotify.ServiceType:type_name -> pb_pub.Service
	51, // 19: pb_pub.NeedSceneRecoverNotify.Exp:type_name -> pb_pub.NeedSceneRecoverNotify.ExpEntry
	11, // 20: pb_pub.UserScene.SceneType:type_name -> pb_pub.SCENE_TYPE
	15, // 21: pb_pub.JSONMessage.pbCommData:type_name -> pb_pub.PBCommData
	12, // 22: pb_pub.JSONMessage.sendType:type_name -> pb_pub.SendType
	58, // 23: pb_pub.JSONCallRsp.errCode:type_name -> pb_pub.ErrCode
	14, // 24: pb_pub.ServerNotify.from:type_name -> pb_pub.ServerNotify.From
	56, // 25: pb_pub.ServerNotify.service:type_name -> pb_pub.Service
	58, // 26: pb_pub.ServerNotify.errCode:type_name -> pb_pub.ErrCode
	52, // 27: pb_pub.ServerNotify.Exp:type_name -> pb_pub.ServerNotify.ExpEntry
	58, // 28: pb_pub.MsgRecallRsp.result:type_name -> pb_pub.ErrCode
	53, // 29: pb_pub.MsgChangeReq.changeData:type_name -> pb_pub.MsgChangeReq.ChangeDataEntry
	54, // 30: pb_pub.MsgChangeRsp.changeData:type_name -> pb_pub.MsgChangeRsp.ChangeDataEntry
	58, // 31: pb_pub.MsgChangeRsp.result:type_name -> pb_pub.ErrCode
	6,  // 32: pb_pub.AppClientInfo.modelType:type_name -> pb_pub.MODEL_TYPE
	15, // 33: pb_pub.AppLogData.pcd:type_name -> pb_pub.PBCommData
	44, // 34: pb_pub.AppLogData.appClientInfo:type_name -> pb_pub.AppClientInfo
	55, // 35: pb_pub.AppLogData.kvValues:type_name -> pb_pub.AppLogData.KvValuesEntry
	59, // 36: pb_pub.AppLogData.KvValuesEntry.value:type_name -> google.protobuf.Value
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_pb_pub_comm_proto_init() }
func file_pb_pub_comm_proto_init() {
	if File_pb_pub_comm_proto != nil {
		return
	}
	file_pb_pub_error_code_proto_init()
	file_pb_pub_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pb_pub_comm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBCommData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommCallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommNatsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRoomRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRoomRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBFSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientBFSwitchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOperationRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogonSuccessNotifyNsq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeedSceneRecoverNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONCallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRecallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRecallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChangeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeScreenShotNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pub_comm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_pub_comm_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_pub_comm_proto_goTypes,
		DependencyIndexes: file_pb_pub_comm_proto_depIdxs,
		EnumInfos:         file_pb_pub_comm_proto_enumTypes,
		MessageInfos:      file_pb_pub_comm_proto_msgTypes,
	}.Build()
	File_pb_pub_comm_proto = out.File
	file_pb_pub_comm_proto_rawDesc = nil
	file_pb_pub_comm_proto_goTypes = nil
	file_pb_pub_comm_proto_depIdxs = nil
}
