// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: pb_msg/lucky/lucky.proto

package lucky

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LuckyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetChips     int64  `protobuf:"varint,1,opt,name=betChips,proto3" json:"betChips,omitempty"`         // 每次投入筹码总数量
	BetChipsFree int64  `protobuf:"varint,2,opt,name=betChipsFree,proto3" json:"betChipsFree,omitempty"` // 每次投入筹码中的免费筹码含量，
	BetCount     int64  `protobuf:"varint,3,opt,name=betCount,proto3" json:"betCount,omitempty"`         // 摇奖次数
	PoolId       string `protobuf:"bytes,4,opt,name=poolId,proto3" json:"poolId,omitempty"`              // 奖池，跟业务相关
}

func (x *LuckyReq) Reset() {
	*x = LuckyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_lucky_lucky_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyReq) ProtoMessage() {}

func (x *LuckyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_lucky_lucky_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyReq.ProtoReflect.Descriptor instead.
func (*LuckyReq) Descriptor() ([]byte, []int) {
	return file_pb_msg_lucky_lucky_proto_rawDescGZIP(), []int{0}
}

func (x *LuckyReq) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *LuckyReq) GetBetChipsFree() int64 {
	if x != nil {
		return x.BetChipsFree
	}
	return 0
}

func (x *LuckyReq) GetBetCount() int64 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

func (x *LuckyReq) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

// 中奖的结构
type LuckyBean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No           int64 `protobuf:"varint,1,opt,name=No,proto3" json:"No,omitempty"`                     // 中奖号码
	BetChips     int64 `protobuf:"varint,2,opt,name=BetChips,proto3" json:"BetChips,omitempty"`         // 下注
	BetChipsFree int64 `protobuf:"varint,3,opt,name=BetChipsFree,proto3" json:"BetChipsFree,omitempty"` // 免费下注
	Chance       int64 `protobuf:"varint,4,opt,name=Chance,proto3" json:"Chance,omitempty"`             // 概率
	Odds         int64 `protobuf:"varint,5,opt,name=Odds,proto3" json:"Odds,omitempty"`                 // 赔率
	WinChips     int64 `protobuf:"varint,6,opt,name=WinChips,proto3" json:"WinChips,omitempty"`         // 赢取筹码总量
	WinChipsFree int64 `protobuf:"varint,7,opt,name=WinChipsFree,proto3" json:"WinChipsFree,omitempty"` // 赢取筹码中免费筹码含量
}

func (x *LuckyBean) Reset() {
	*x = LuckyBean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_lucky_lucky_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyBean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyBean) ProtoMessage() {}

func (x *LuckyBean) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_lucky_lucky_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyBean.ProtoReflect.Descriptor instead.
func (*LuckyBean) Descriptor() ([]byte, []int) {
	return file_pb_msg_lucky_lucky_proto_rawDescGZIP(), []int{1}
}

func (x *LuckyBean) GetNo() int64 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *LuckyBean) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *LuckyBean) GetBetChipsFree() int64 {
	if x != nil {
		return x.BetChipsFree
	}
	return 0
}

func (x *LuckyBean) GetChance() int64 {
	if x != nil {
		return x.Chance
	}
	return 0
}

func (x *LuckyBean) GetOdds() int64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *LuckyBean) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *LuckyBean) GetWinChipsFree() int64 {
	if x != nil {
		return x.WinChipsFree
	}
	return 0
}

type LuckyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetChips            int64        `protobuf:"varint,1,opt,name=betChips,proto3" json:"betChips,omitempty"`         // 每次投入筹码数量
	BetChipsFree        int64        `protobuf:"varint,2,opt,name=betChipsFree,proto3" json:"betChipsFree,omitempty"` // 每次投入筹码中的免费筹码含量，
	BetCount            int64        `protobuf:"varint,3,opt,name=betCount,proto3" json:"betCount,omitempty"`         // 摇奖次数
	LuckyTotalCount     int64        `protobuf:"varint,4,opt,name=luckyTotalCount,proto3" json:"luckyTotalCount,omitempty"`
	LuckyTotalChips     int64        `protobuf:"varint,5,opt,name=luckyTotalChips,proto3" json:"luckyTotalChips,omitempty"`         // 赢取筹码总量
	LuckyTotalChipsFree int64        `protobuf:"varint,6,opt,name=luckyTotalChipsFree,proto3" json:"luckyTotalChipsFree,omitempty"` // 赢取免费筹码总含量
	LuckyBean           []*LuckyBean `protobuf:"bytes,7,rep,name=luckyBean,proto3" json:"luckyBean,omitempty"`                      // 中奖列表
}

func (x *LuckyRsp) Reset() {
	*x = LuckyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_msg_lucky_lucky_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyRsp) ProtoMessage() {}

func (x *LuckyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_msg_lucky_lucky_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyRsp.ProtoReflect.Descriptor instead.
func (*LuckyRsp) Descriptor() ([]byte, []int) {
	return file_pb_msg_lucky_lucky_proto_rawDescGZIP(), []int{2}
}

func (x *LuckyRsp) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *LuckyRsp) GetBetChipsFree() int64 {
	if x != nil {
		return x.BetChipsFree
	}
	return 0
}

func (x *LuckyRsp) GetBetCount() int64 {
	if x != nil {
		return x.BetCount
	}
	return 0
}

func (x *LuckyRsp) GetLuckyTotalCount() int64 {
	if x != nil {
		return x.LuckyTotalCount
	}
	return 0
}

func (x *LuckyRsp) GetLuckyTotalChips() int64 {
	if x != nil {
		return x.LuckyTotalChips
	}
	return 0
}

func (x *LuckyRsp) GetLuckyTotalChipsFree() int64 {
	if x != nil {
		return x.LuckyTotalChipsFree
	}
	return 0
}

func (x *LuckyRsp) GetLuckyBean() []*LuckyBean {
	if x != nil {
		return x.LuckyBean
	}
	return nil
}

var File_pb_msg_lucky_lucky_proto protoreflect.FileDescriptor

var file_pb_msg_lucky_lucky_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x2f, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x22, 0x7e, 0x0a, 0x08, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x42, 0x65, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x57, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x08, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x75,
	0x63, 0x6b, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x65, 0x61, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x75,
	0x63, 0x6b, 0x79, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x42, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x42, 0x65, 0x61, 0x6e, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x30, 0x30,
	0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_msg_lucky_lucky_proto_rawDescOnce sync.Once
	file_pb_msg_lucky_lucky_proto_rawDescData = file_pb_msg_lucky_lucky_proto_rawDesc
)

func file_pb_msg_lucky_lucky_proto_rawDescGZIP() []byte {
	file_pb_msg_lucky_lucky_proto_rawDescOnce.Do(func() {
		file_pb_msg_lucky_lucky_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_msg_lucky_lucky_proto_rawDescData)
	})
	return file_pb_msg_lucky_lucky_proto_rawDescData
}

var file_pb_msg_lucky_lucky_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pb_msg_lucky_lucky_proto_goTypes = []interface{}{
	(*LuckyReq)(nil),  // 0: pb_msg_lucky.LuckyReq
	(*LuckyBean)(nil), // 1: pb_msg_lucky.LuckyBean
	(*LuckyRsp)(nil),  // 2: pb_msg_lucky.LuckyRsp
}
var file_pb_msg_lucky_lucky_proto_depIdxs = []int32{
	1, // 0: pb_msg_lucky.LuckyRsp.luckyBean:type_name -> pb_msg_lucky.LuckyBean
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pb_msg_lucky_lucky_proto_init() }
func file_pb_msg_lucky_lucky_proto_init() {
	if File_pb_msg_lucky_lucky_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_msg_lucky_lucky_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_lucky_lucky_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyBean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_msg_lucky_lucky_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_msg_lucky_lucky_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_msg_lucky_lucky_proto_goTypes,
		DependencyIndexes: file_pb_msg_lucky_lucky_proto_depIdxs,
		MessageInfos:      file_pb_msg_lucky_lucky_proto_msgTypes,
	}.Build()
	File_pb_msg_lucky_lucky_proto = out.File
	file_pb_msg_lucky_lucky_proto_rawDesc = nil
	file_pb_msg_lucky_lucky_proto_goTypes = nil
	file_pb_msg_lucky_lucky_proto_depIdxs = nil
}
